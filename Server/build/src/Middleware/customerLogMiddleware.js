"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.logProductView = exports.logPaymentActivity = exports.logOrderActivity = exports.logAuthActivity = exports.customerActivityLogger = void 0;var _customerLogger = _interopRequireDefault(require("../utils/customerLogger.js"));

/**
 * Middleware to log customer authentication activities
 */
const logAuthActivity = async (req, res, next) => {
  // Store original end function
  const originalEnd = res.end;

  // Override end function to capture response
  res.end = async function (chunk, encoding) {
    // Restore original end function
    res.end = originalEnd;

    // Get client IP address
    const ip = req.headers['x-forwarded-for'] ||
    req.connection.remoteAddress ||
    req.socket.remoteAddress;

    // Get path and method
    const path = req.path;
    const method = req.method;

    // Get user agent
    const userAgent = req.headers['user-agent'];

    // Check if this is an authentication route
    if (path.includes('/login') || path.includes('/auth')) {
      const user = req.user || {};
      const email = req.body?.email || user.email;

      // Log based on response status
      if (res.statusCode >= 200 && res.statusCode < 300) {
        await _customerLogger.default.loginSuccess({
          customerId: user._id,
          email,
          ip,
          userAgent,
          sessionId: req.session?.id,
          method: path.includes('google') ? 'google' :
          path.includes('facebook') ? 'facebook' : 'password'
        });
      } else if (res.statusCode >= 400) {
        await _customerLogger.default.loginFailed({
          email,
          ip,
          userAgent,
          reason: res.statusCode === 401 ? 'invalid_credentials' :
          res.statusCode === 403 ? 'forbidden' : 'error',
          method: path.includes('google') ? 'google' :
          path.includes('facebook') ? 'facebook' : 'password'
        });
      }
    }

    // Check if this is a logout route
    if (path.includes('/logout')) {
      const user = req.user || {};
      await _customerLogger.default.logout({
        customerId: user._id,
        email: user.email,
        ip,
        userAgent,
        sessionId: req.session?.id
      });
    }

    // Check if this is a registration route
    if (path.includes('/register') || path.includes('/signup')) {
      const user = req.user || {};
      const email = req.body?.email || user.email;

      if (res.statusCode >= 200 && res.statusCode < 300) {
        await _customerLogger.default.registration({
          customerId: user._id,
          email,
          ip,
          userAgent,
          status: 'success'
        });
      } else {
        await _customerLogger.default.registration({
          email,
          ip,
          userAgent,
          status: 'failed',
          details: { reason: 'registration_error', statusCode: res.statusCode }
        });
      }
    }

    // Call original end function
    return originalEnd.call(this, chunk, encoding);
  };

  next();
};

/**
 * Middleware to log product view activities
 */exports.logAuthActivity = logAuthActivity;
const logProductView = async (req, res, next) => {
  try {
    // Check if this is a product view route
    if (req.path.includes('/products/') && req.method === 'GET') {
      const productId = req.params.id || req.params.productId;

      if (productId) {
        const user = req.user || {};

        await _customerLogger.default.productView({
          customerId: user._id,
          email: user.email,
          ip: req.headers['x-forwarded-for'] || req.connection.remoteAddress,
          userAgent: req.headers['user-agent'],
          productId,
          productName: req.product?.name || 'Unknown Product'
        });
      }
    }
  } catch (error) {
    console.error('Error in logProductView middleware:', error);
    // Continue even if logging fails
  }

  next();
};

/**
 * Middleware to log order placement
 */exports.logProductView = logProductView;
const logOrderActivity = async (req, res, next) => {
  // Store original end function
  const originalEnd = res.end;

  // Override end function to capture response
  res.end = async function (chunk, encoding) {
    // Restore original end function
    res.end = originalEnd;

    // Check if this is an order creation route
    if ((req.path.includes('/orders') || req.path.includes('/checkout')) &&
    req.method === 'POST' &&
    res.statusCode >= 200 &&
    res.statusCode < 300) {

      try {
        const user = req.user || {};
        const orderData = req.body || {};

        await _customerLogger.default.orderPlaced({
          customerId: user._id,
          email: user.email,
          ip: req.headers['x-forwarded-for'] || req.connection.remoteAddress,
          userAgent: req.headers['user-agent'],
          orderId: res.locals.orderId || orderData.orderId,
          amount: orderData.totalAmount,
          items: orderData.items || []
        });
      } catch (error) {
        console.error('Error logging order activity:', error);
      }
    }

    // Call original end function
    return originalEnd.call(this, chunk, encoding);
  };

  next();
};

/**
 * Middleware to log payment activity
 */exports.logOrderActivity = logOrderActivity;
const logPaymentActivity = async (req, res, next) => {
  // Store original end function
  const originalEnd = res.end;

  // Override end function to capture response
  res.end = async function (chunk, encoding) {
    // Restore original end function
    res.end = originalEnd;

    // Check if this is a payment route
    if (req.path.includes('/payment') && (
    req.method === 'POST' || req.path.includes('/confirm'))) {

      try {
        const user = req.user || {};
        const paymentData = req.body || {};

        await _customerLogger.default.payment({
          customerId: user._id,
          email: user.email,
          ip: req.headers['x-forwarded-for'] || req.connection.remoteAddress,
          userAgent: req.headers['user-agent'],
          orderId: paymentData.orderId,
          paymentId: paymentData.paymentId || res.locals.paymentId,
          amount: paymentData.amount,
          method: paymentData.method || 'unknown',
          status: res.statusCode >= 200 && res.statusCode < 300 ? 'success' : 'failed'
        });
      } catch (error) {
        console.error('Error logging payment activity:', error);
      }
    }

    // Call original end function
    return originalEnd.call(this, chunk, encoding);
  };

  next();
};

// Export a combined middleware for convenience
exports.logPaymentActivity = logPaymentActivity;const customerActivityLogger = (req, res, next) => {
  logAuthActivity(req, res, () => {
    logProductView(req, res, () => {
      logOrderActivity(req, res, () => {
        logPaymentActivity(req, res, next);
      });
    });
  });
};exports.customerActivityLogger = customerActivityLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY3VzdG9tZXJMb2dnZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImxvZ0F1dGhBY3Rpdml0eSIsInJlcSIsInJlcyIsIm5leHQiLCJvcmlnaW5hbEVuZCIsImVuZCIsImNodW5rIiwiZW5jb2RpbmciLCJpcCIsImhlYWRlcnMiLCJjb25uZWN0aW9uIiwicmVtb3RlQWRkcmVzcyIsInNvY2tldCIsInBhdGgiLCJtZXRob2QiLCJ1c2VyQWdlbnQiLCJpbmNsdWRlcyIsInVzZXIiLCJlbWFpbCIsImJvZHkiLCJzdGF0dXNDb2RlIiwiQ3VzdG9tZXJMb2dnZXIiLCJsb2dpblN1Y2Nlc3MiLCJjdXN0b21lcklkIiwiX2lkIiwic2Vzc2lvbklkIiwic2Vzc2lvbiIsImlkIiwibG9naW5GYWlsZWQiLCJyZWFzb24iLCJsb2dvdXQiLCJyZWdpc3RyYXRpb24iLCJzdGF0dXMiLCJkZXRhaWxzIiwiY2FsbCIsImV4cG9ydHMiLCJsb2dQcm9kdWN0VmlldyIsInByb2R1Y3RJZCIsInBhcmFtcyIsInByb2R1Y3RWaWV3IiwicHJvZHVjdE5hbWUiLCJwcm9kdWN0IiwibmFtZSIsImVycm9yIiwiY29uc29sZSIsImxvZ09yZGVyQWN0aXZpdHkiLCJvcmRlckRhdGEiLCJvcmRlclBsYWNlZCIsIm9yZGVySWQiLCJsb2NhbHMiLCJhbW91bnQiLCJ0b3RhbEFtb3VudCIsIml0ZW1zIiwibG9nUGF5bWVudEFjdGl2aXR5IiwicGF5bWVudERhdGEiLCJwYXltZW50IiwicGF5bWVudElkIiwiY3VzdG9tZXJBY3Rpdml0eUxvZ2dlciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NaWRkbGV3YXJlL2N1c3RvbWVyTG9nTWlkZGxld2FyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ3VzdG9tZXJMb2dnZXIgZnJvbSAnLi4vdXRpbHMvY3VzdG9tZXJMb2dnZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIE1pZGRsZXdhcmUgdG8gbG9nIGN1c3RvbWVyIGF1dGhlbnRpY2F0aW9uIGFjdGl2aXRpZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBsb2dBdXRoQWN0aXZpdHkgPSBhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICAvLyBTdG9yZSBvcmlnaW5hbCBlbmQgZnVuY3Rpb25cclxuICBjb25zdCBvcmlnaW5hbEVuZCA9IHJlcy5lbmQ7XHJcbiAgXHJcbiAgLy8gT3ZlcnJpZGUgZW5kIGZ1bmN0aW9uIHRvIGNhcHR1cmUgcmVzcG9uc2VcclxuICByZXMuZW5kID0gYXN5bmMgZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nKSB7XHJcbiAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIGVuZCBmdW5jdGlvblxyXG4gICAgcmVzLmVuZCA9IG9yaWdpbmFsRW5kO1xyXG4gICAgXHJcbiAgICAvLyBHZXQgY2xpZW50IElQIGFkZHJlc3NcclxuICAgIGNvbnN0IGlwID0gcmVxLmhlYWRlcnNbJ3gtZm9yd2FyZGVkLWZvciddIHx8IFxyXG4gICAgICAgICAgICAgICByZXEuY29ubmVjdGlvbi5yZW1vdGVBZGRyZXNzIHx8IFxyXG4gICAgICAgICAgICAgICByZXEuc29ja2V0LnJlbW90ZUFkZHJlc3M7XHJcbiAgICBcclxuICAgIC8vIEdldCBwYXRoIGFuZCBtZXRob2RcclxuICAgIGNvbnN0IHBhdGggPSByZXEucGF0aDtcclxuICAgIGNvbnN0IG1ldGhvZCA9IHJlcS5tZXRob2Q7XHJcbiAgICBcclxuICAgIC8vIEdldCB1c2VyIGFnZW50XHJcbiAgICBjb25zdCB1c2VyQWdlbnQgPSByZXEuaGVhZGVyc1sndXNlci1hZ2VudCddO1xyXG4gICAgXHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGFuIGF1dGhlbnRpY2F0aW9uIHJvdXRlXHJcbiAgICBpZiAocGF0aC5pbmNsdWRlcygnL2xvZ2luJykgfHwgcGF0aC5pbmNsdWRlcygnL2F1dGgnKSkge1xyXG4gICAgICBjb25zdCB1c2VyID0gcmVxLnVzZXIgfHwge307XHJcbiAgICAgIGNvbnN0IGVtYWlsID0gcmVxLmJvZHk/LmVtYWlsIHx8IHVzZXIuZW1haWw7XHJcbiAgICAgIFxyXG4gICAgICAvLyBMb2cgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzXHJcbiAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA+PSAyMDAgJiYgcmVzLnN0YXR1c0NvZGUgPCAzMDApIHtcclxuICAgICAgICBhd2FpdCBDdXN0b21lckxvZ2dlci5sb2dpblN1Y2Nlc3Moe1xyXG4gICAgICAgICAgY3VzdG9tZXJJZDogdXNlci5faWQsXHJcbiAgICAgICAgICBlbWFpbCxcclxuICAgICAgICAgIGlwLFxyXG4gICAgICAgICAgdXNlckFnZW50LFxyXG4gICAgICAgICAgc2Vzc2lvbklkOiByZXEuc2Vzc2lvbj8uaWQsXHJcbiAgICAgICAgICBtZXRob2Q6IHBhdGguaW5jbHVkZXMoJ2dvb2dsZScpID8gJ2dvb2dsZScgOiBcclxuICAgICAgICAgICAgICAgICAgcGF0aC5pbmNsdWRlcygnZmFjZWJvb2snKSA/ICdmYWNlYm9vaycgOiAncGFzc3dvcmQnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVzLnN0YXR1c0NvZGUgPj0gNDAwKSB7XHJcbiAgICAgICAgYXdhaXQgQ3VzdG9tZXJMb2dnZXIubG9naW5GYWlsZWQoe1xyXG4gICAgICAgICAgZW1haWwsXHJcbiAgICAgICAgICBpcCxcclxuICAgICAgICAgIHVzZXJBZ2VudCxcclxuICAgICAgICAgIHJlYXNvbjogcmVzLnN0YXR1c0NvZGUgPT09IDQwMSA/ICdpbnZhbGlkX2NyZWRlbnRpYWxzJyA6IFxyXG4gICAgICAgICAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9PT0gNDAzID8gJ2ZvcmJpZGRlbicgOiAnZXJyb3InLFxyXG4gICAgICAgICAgbWV0aG9kOiBwYXRoLmluY2x1ZGVzKCdnb29nbGUnKSA/ICdnb29nbGUnIDogXHJcbiAgICAgICAgICAgICAgICAgIHBhdGguaW5jbHVkZXMoJ2ZhY2Vib29rJykgPyAnZmFjZWJvb2snIDogJ3Bhc3N3b3JkJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBsb2dvdXQgcm91dGVcclxuICAgIGlmIChwYXRoLmluY2x1ZGVzKCcvbG9nb3V0JykpIHtcclxuICAgICAgY29uc3QgdXNlciA9IHJlcS51c2VyIHx8IHt9O1xyXG4gICAgICBhd2FpdCBDdXN0b21lckxvZ2dlci5sb2dvdXQoe1xyXG4gICAgICAgIGN1c3RvbWVySWQ6IHVzZXIuX2lkLFxyXG4gICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxyXG4gICAgICAgIGlwLFxyXG4gICAgICAgIHVzZXJBZ2VudCxcclxuICAgICAgICBzZXNzaW9uSWQ6IHJlcS5zZXNzaW9uPy5pZFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIHJlZ2lzdHJhdGlvbiByb3V0ZVxyXG4gICAgaWYgKHBhdGguaW5jbHVkZXMoJy9yZWdpc3RlcicpIHx8IHBhdGguaW5jbHVkZXMoJy9zaWdudXAnKSkge1xyXG4gICAgICBjb25zdCB1c2VyID0gcmVxLnVzZXIgfHwge307XHJcbiAgICAgIGNvbnN0IGVtYWlsID0gcmVxLmJvZHk/LmVtYWlsIHx8IHVzZXIuZW1haWw7XHJcbiAgICAgIFxyXG4gICAgICBpZiAocmVzLnN0YXR1c0NvZGUgPj0gMjAwICYmIHJlcy5zdGF0dXNDb2RlIDwgMzAwKSB7XHJcbiAgICAgICAgYXdhaXQgQ3VzdG9tZXJMb2dnZXIucmVnaXN0cmF0aW9uKHtcclxuICAgICAgICAgIGN1c3RvbWVySWQ6IHVzZXIuX2lkLFxyXG4gICAgICAgICAgZW1haWwsXHJcbiAgICAgICAgICBpcCxcclxuICAgICAgICAgIHVzZXJBZ2VudCxcclxuICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXdhaXQgQ3VzdG9tZXJMb2dnZXIucmVnaXN0cmF0aW9uKHtcclxuICAgICAgICAgIGVtYWlsLFxyXG4gICAgICAgICAgaXAsXHJcbiAgICAgICAgICB1c2VyQWdlbnQsXHJcbiAgICAgICAgICBzdGF0dXM6ICdmYWlsZWQnLFxyXG4gICAgICAgICAgZGV0YWlsczogeyByZWFzb246ICdyZWdpc3RyYXRpb25fZXJyb3InLCBzdGF0dXNDb2RlOiByZXMuc3RhdHVzQ29kZSB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ2FsbCBvcmlnaW5hbCBlbmQgZnVuY3Rpb25cclxuICAgIHJldHVybiBvcmlnaW5hbEVuZC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XHJcbiAgfTtcclxuICBcclxuICBuZXh0KCk7XHJcbn07XHJcblxyXG4vKipcclxuICogTWlkZGxld2FyZSB0byBsb2cgcHJvZHVjdCB2aWV3IGFjdGl2aXRpZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBsb2dQcm9kdWN0VmlldyA9IGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgcHJvZHVjdCB2aWV3IHJvdXRlXHJcbiAgICBpZiAocmVxLnBhdGguaW5jbHVkZXMoJy9wcm9kdWN0cy8nKSAmJiByZXEubWV0aG9kID09PSAnR0VUJykge1xyXG4gICAgICBjb25zdCBwcm9kdWN0SWQgPSByZXEucGFyYW1zLmlkIHx8IHJlcS5wYXJhbXMucHJvZHVjdElkO1xyXG4gICAgICBcclxuICAgICAgaWYgKHByb2R1Y3RJZCkge1xyXG4gICAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlciB8fCB7fTtcclxuICAgICAgICBcclxuICAgICAgICBhd2FpdCBDdXN0b21lckxvZ2dlci5wcm9kdWN0Vmlldyh7XHJcbiAgICAgICAgICBjdXN0b21lcklkOiB1c2VyLl9pZCxcclxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxyXG4gICAgICAgICAgaXA6IHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC1mb3InXSB8fCByZXEuY29ubmVjdGlvbi5yZW1vdGVBZGRyZXNzLFxyXG4gICAgICAgICAgdXNlckFnZW50OiByZXEuaGVhZGVyc1sndXNlci1hZ2VudCddLFxyXG4gICAgICAgICAgcHJvZHVjdElkLFxyXG4gICAgICAgICAgcHJvZHVjdE5hbWU6IHJlcS5wcm9kdWN0Py5uYW1lIHx8ICdVbmtub3duIFByb2R1Y3QnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gbG9nUHJvZHVjdFZpZXcgbWlkZGxld2FyZTonLCBlcnJvcik7XHJcbiAgICAvLyBDb250aW51ZSBldmVuIGlmIGxvZ2dpbmcgZmFpbHNcclxuICB9XHJcbiAgXHJcbiAgbmV4dCgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1pZGRsZXdhcmUgdG8gbG9nIG9yZGVyIHBsYWNlbWVudFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGxvZ09yZGVyQWN0aXZpdHkgPSBhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICAvLyBTdG9yZSBvcmlnaW5hbCBlbmQgZnVuY3Rpb25cclxuICBjb25zdCBvcmlnaW5hbEVuZCA9IHJlcy5lbmQ7XHJcbiAgXHJcbiAgLy8gT3ZlcnJpZGUgZW5kIGZ1bmN0aW9uIHRvIGNhcHR1cmUgcmVzcG9uc2VcclxuICByZXMuZW5kID0gYXN5bmMgZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nKSB7XHJcbiAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIGVuZCBmdW5jdGlvblxyXG4gICAgcmVzLmVuZCA9IG9yaWdpbmFsRW5kO1xyXG4gICAgXHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGFuIG9yZGVyIGNyZWF0aW9uIHJvdXRlXHJcbiAgICBpZiAoKHJlcS5wYXRoLmluY2x1ZGVzKCcvb3JkZXJzJykgfHwgcmVxLnBhdGguaW5jbHVkZXMoJy9jaGVja291dCcpKSAmJiBcclxuICAgICAgICByZXEubWV0aG9kID09PSAnUE9TVCcgJiYgXHJcbiAgICAgICAgcmVzLnN0YXR1c0NvZGUgPj0gMjAwICYmIFxyXG4gICAgICAgIHJlcy5zdGF0dXNDb2RlIDwgMzAwKSB7XHJcbiAgICAgIFxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlciB8fCB7fTtcclxuICAgICAgICBjb25zdCBvcmRlckRhdGEgPSByZXEuYm9keSB8fCB7fTtcclxuICAgICAgICBcclxuICAgICAgICBhd2FpdCBDdXN0b21lckxvZ2dlci5vcmRlclBsYWNlZCh7XHJcbiAgICAgICAgICBjdXN0b21lcklkOiB1c2VyLl9pZCxcclxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxyXG4gICAgICAgICAgaXA6IHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC1mb3InXSB8fCByZXEuY29ubmVjdGlvbi5yZW1vdGVBZGRyZXNzLFxyXG4gICAgICAgICAgdXNlckFnZW50OiByZXEuaGVhZGVyc1sndXNlci1hZ2VudCddLFxyXG4gICAgICAgICAgb3JkZXJJZDogcmVzLmxvY2Fscy5vcmRlcklkIHx8IG9yZGVyRGF0YS5vcmRlcklkLFxyXG4gICAgICAgICAgYW1vdW50OiBvcmRlckRhdGEudG90YWxBbW91bnQsXHJcbiAgICAgICAgICBpdGVtczogb3JkZXJEYXRhLml0ZW1zIHx8IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9nZ2luZyBvcmRlciBhY3Rpdml0eTonLCBlcnJvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ2FsbCBvcmlnaW5hbCBlbmQgZnVuY3Rpb25cclxuICAgIHJldHVybiBvcmlnaW5hbEVuZC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XHJcbiAgfTtcclxuICBcclxuICBuZXh0KCk7XHJcbn07XHJcblxyXG4vKipcclxuICogTWlkZGxld2FyZSB0byBsb2cgcGF5bWVudCBhY3Rpdml0eVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGxvZ1BheW1lbnRBY3Rpdml0eSA9IGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gIC8vIFN0b3JlIG9yaWdpbmFsIGVuZCBmdW5jdGlvblxyXG4gIGNvbnN0IG9yaWdpbmFsRW5kID0gcmVzLmVuZDtcclxuICBcclxuICAvLyBPdmVycmlkZSBlbmQgZnVuY3Rpb24gdG8gY2FwdHVyZSByZXNwb25zZVxyXG4gIHJlcy5lbmQgPSBhc3luYyBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcpIHtcclxuICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgZW5kIGZ1bmN0aW9uXHJcbiAgICByZXMuZW5kID0gb3JpZ2luYWxFbmQ7XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBwYXltZW50IHJvdXRlXHJcbiAgICBpZiAocmVxLnBhdGguaW5jbHVkZXMoJy9wYXltZW50JykgJiYgXHJcbiAgICAgICAgKHJlcS5tZXRob2QgPT09ICdQT1NUJyB8fCByZXEucGF0aC5pbmNsdWRlcygnL2NvbmZpcm0nKSkpIHtcclxuICAgICAgXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgdXNlciA9IHJlcS51c2VyIHx8IHt9O1xyXG4gICAgICAgIGNvbnN0IHBheW1lbnREYXRhID0gcmVxLmJvZHkgfHwge307XHJcbiAgICAgICAgXHJcbiAgICAgICAgYXdhaXQgQ3VzdG9tZXJMb2dnZXIucGF5bWVudCh7XHJcbiAgICAgICAgICBjdXN0b21lcklkOiB1c2VyLl9pZCxcclxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxyXG4gICAgICAgICAgaXA6IHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC1mb3InXSB8fCByZXEuY29ubmVjdGlvbi5yZW1vdGVBZGRyZXNzLFxyXG4gICAgICAgICAgdXNlckFnZW50OiByZXEuaGVhZGVyc1sndXNlci1hZ2VudCddLFxyXG4gICAgICAgICAgb3JkZXJJZDogcGF5bWVudERhdGEub3JkZXJJZCxcclxuICAgICAgICAgIHBheW1lbnRJZDogcGF5bWVudERhdGEucGF5bWVudElkIHx8IHJlcy5sb2NhbHMucGF5bWVudElkLFxyXG4gICAgICAgICAgYW1vdW50OiBwYXltZW50RGF0YS5hbW91bnQsXHJcbiAgICAgICAgICBtZXRob2Q6IHBheW1lbnREYXRhLm1ldGhvZCB8fCAndW5rbm93bicsXHJcbiAgICAgICAgICBzdGF0dXM6IHJlcy5zdGF0dXNDb2RlID49IDIwMCAmJiByZXMuc3RhdHVzQ29kZSA8IDMwMCA/ICdzdWNjZXNzJyA6ICdmYWlsZWQnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9nZ2luZyBwYXltZW50IGFjdGl2aXR5OicsIGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBDYWxsIG9yaWdpbmFsIGVuZCBmdW5jdGlvblxyXG4gICAgcmV0dXJuIG9yaWdpbmFsRW5kLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcclxuICB9O1xyXG4gIFxyXG4gIG5leHQoKTtcclxufTtcclxuXHJcbi8vIEV4cG9ydCBhIGNvbWJpbmVkIG1pZGRsZXdhcmUgZm9yIGNvbnZlbmllbmNlXHJcbmV4cG9ydCBjb25zdCBjdXN0b21lckFjdGl2aXR5TG9nZ2VyID0gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgbG9nQXV0aEFjdGl2aXR5KHJlcSwgcmVzLCAoKSA9PiB7XHJcbiAgICBsb2dQcm9kdWN0VmlldyhyZXEsIHJlcywgKCkgPT4ge1xyXG4gICAgICBsb2dPcmRlckFjdGl2aXR5KHJlcSwgcmVzLCAoKSA9PiB7XHJcbiAgICAgICAgbG9nUGF5bWVudEFjdGl2aXR5KHJlcSwgcmVzLCBuZXh0KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufTsgIl0sIm1hcHBpbmdzIjoibVRBQUEsSUFBQUEsZUFB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