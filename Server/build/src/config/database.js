"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.isMongoConnected = exports.initializeDatabase = exports.getConnectionStatus = void 0;Object.defineProperty(exports, "mongoose", { enumerable: true, get: function () {return _mongoose.default;} });
var _mongoose = _interopRequireDefault(require("mongoose"));
var _dotenv = _interopRequireDefault(require("dotenv"));
var _dns = _interopRequireDefault(require("dns")); /* eslint-disable no-undef */
// Không cần fileURLToPath và dirname vì chúng ta không sử dụng __dirname

// Khởi tạo dotenv
_dotenv.default.config({ path: '.env' });

// Hỗ trợ IPv4 first - giúp kết nối từ nhiều loại thiết bị
_dns.default.setDefaultResultOrder('ipv4first');

// Biến toàn cục theo dõi trạng thái kết nối
let isMongoConnected = exports.isMongoConnected = false;
let connectionAttempts = 0;
let currentUri = null;

// Kiểm tra xem thiết bị có phải là thiết bị di động không
const isMobileDevice = () => {
  // Kiểm tra UserAgent nếu đang chạy trong môi trường có window
  if (typeof window !== 'undefined' && window.navigator) {
    const ua = window.navigator.userAgent;
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua);
  }

  // Nếu không có window, kiểm tra biến môi trường
  if (typeof process !== 'undefined' && process.env) {
    return process.env.IS_MOBILE === 'true';
  }

  return false;
};

// Hàm khởi tạo cơ sở dữ liệu
const initializeDatabase = async () => {
  // Thiết lập các handlers xử lý sự kiện kết nối
  setupConnectionHandlers();

  // Reset Mongoose
  if (_mongoose.default.connection.readyState !== 0) {
    try {
      await _mongoose.default.connection.close();
      console.log("Đã đóng kết nối cũ để khởi tạo mới");
    } catch (err) {
      console.error("Lỗi khi đóng kết nối cũ:", err);
    }
  }

  // Kết nối với MongoDB
  return await connectWithRetry();
};

// Lấy URI phù hợp nhất cho kết nối
exports.initializeDatabase = initializeDatabase;const getBestMongoURI = () => {
  if (typeof process === 'undefined' || !process.env) return null;

  // Quyết định URI theo device type
  if (isMobileDevice()) {
    // Cho thiết bị di động, ưu tiên các URI trực tiếp bằng IP
    return process.env.MONGODB_IP_URI ||
    process.env.MONGODB_SINGLE_IP_URI ||
    process.env.MONGODB_DIRECT_URI ||
    process.env.MONGODB_MOBILE_URI ||
    process.env.MONGODB_SUPER_SIMPLE_URI ||
    process.env.MONGODB_SRV_URI ||
    process.env.MONGODB_FALLBACK_URI;
  } else {
    // Cho thiết bị thông thường
    return process.env.MONGODB_IP_URI ||
    process.env.MONGODB_SINGLE_IP_URI ||
    process.env.MONGODB_SUPER_SIMPLE_URI ||
    process.env.MONGODB_SRV_URI ||
    process.env.MONGODB_DIRECT_URI ||
    process.env.MONGODB_MOBILE_URI ||
    process.env.MONGODB_FALLBACK_URI;
  }
};

// Hàm kết nối MongoDB với khả năng thử lại
const connectWithRetry = async (retries = 5, delay = 5000) => {
  connectionAttempts++;
  console.log(`MongoDB Connection Attempt #${connectionAttempts}...`);

  // Đảm bảo đóng kết nối cũ nếu có
  if (_mongoose.default.connection.readyState !== 0) {
    try {
      await _mongoose.default.connection.close();
      console.log("Đã đóng kết nối cũ trước khi kết nối lại");
    } catch (err) {
      console.error("Lỗi khi đóng kết nối cũ:", err);
    }
  }

  // Lấy URI tốt nhất
  const uriToConnect = getBestMongoURI();

  if (!uriToConnect) {
    console.error("Không tìm thấy URI MongoDB hợp lệ trong biến môi trường");
    exports.isMongoConnected = isMongoConnected = false;
    return null;
  }

  // Lưu URI hiện tại
  currentUri = uriToConnect;

  // Log thông tin kết nối để debug
  const uriType =
  uriToConnect === process.env.MONGODB_IP_URI ? 'IP URI' :
  uriToConnect === process.env.MONGODB_SINGLE_IP_URI ? 'Single IP URI' :
  uriToConnect === process.env.MONGODB_DIRECT_URI ? 'Direct URI' :
  uriToConnect === process.env.MONGODB_MOBILE_URI ? 'Mobile URI' :
  uriToConnect === process.env.MONGODB_SUPER_SIMPLE_URI ? 'Super Simple URI' :
  uriToConnect === process.env.MONGODB_SRV_URI ? 'SRV URI' :
  'Other URI';

  console.log(`Đang kết nối với MongoDB, loại URI: ${uriType}`);

  // In thông tin device để debug
  console.log("Device info:", {
    platform: typeof process !== 'undefined' ? process.platform : 'unknown',
    arch: typeof process !== 'undefined' ? process.arch : 'unknown',
    node: typeof process !== 'undefined' ? process.version : 'unknown',
    mongooseVersion: _mongoose.default.version,
    isMobile: isMobileDevice()
  });

  // Options kết nối MongoDB tối ưu - Điều chỉnh để khắc phục lỗi timeout
  const mongooseOptions = {
    serverSelectionTimeoutMS: 30000, // Giảm thời gian chờ server selection
    socketTimeoutMS: 45000, // Giảm thời gian chờ socket
    connectTimeoutMS: 30000, // Giảm thời gian timeout kết nối
    maxPoolSize: 10, // Giảm số lượng kết nối tối đa
    minPoolSize: 1, // Giảm số lượng kết nối tối thiểu
    family: 4, // IPv4
    autoIndex: true,
    // Tùy chỉnh SSL/TLS dựa trên loại URI
    ...(uriToConnect.includes('mongodb+srv://') ? {
      tls: true,
      tlsInsecure: true, // Cho phép kết nối không an toàn để test
      tlsAllowInvalidCertificates: true,
      tlsAllowInvalidHostnames: true
    } : {
      ssl: false // Tắt SSL cho kết nối trực tiếp để tránh timeout
    })
  };

  for (let i = 0; i < retries; i++) {
    try {
      // Chờ một chút trước khi thử lại nếu không phải lần đầu
      if (i > 0) {
        await new Promise((r) => setTimeout(r, delay));
      }

      // Hiển thị thông tin kết nối (che dấu thông tin nhạy cảm)
      console.log("Connecting to MongoDB with URI:",
      uriToConnect ? uriToConnect.replace(/\/\/[^:]+:[^@]+@/, "//***:***@") : "URI is undefined");

      // Kết nối với MongoDB
      await _mongoose.default.connect(uriToConnect, mongooseOptions);

      console.log("MongoDB Connected Successfully!");
      console.log("Connection Info:", {
        host: _mongoose.default.connection.host,
        port: _mongoose.default.connection.port,
        dbName: _mongoose.default.connection.name,
        readyState: _mongoose.default.connection.readyState
      });

      exports.isMongoConnected = isMongoConnected = true;
      return _mongoose.default.connection;
    } catch (err) {
      console.error(`MongoDB connection attempt ${i + 1} failed:`, err.name);
      console.error("Error details:", err.message);

      // Thử kết nối với URI khác nếu đã thử 2 lần với URI hiện tại
      if (i === 1) {
        // Thử với URI không có SSL
        try {
          console.log("Thử kết nối không sử dụng SSL/TLS...");

          // Tạo URI mới không có SSL
          let noSslUri = uriToConnect;
          if (noSslUri.includes('ssl=true')) {
            noSslUri = noSslUri.replace('ssl=true', 'ssl=false');
          } else if (!noSslUri.includes('ssl=false')) {
            noSslUri += noSslUri.includes('?') ? '&ssl=false' : '?ssl=false';
          }

          // Kết nối với URI không có SSL
          await _mongoose.default.connect(noSslUri, {
            ...mongooseOptions,
            ssl: false,
            tls: false
          });

          console.log("Kết nối thành công với cấu hình không SSL!");
          exports.isMongoConnected = isMongoConnected = true;
          return _mongoose.default.connection;
        } catch (noSslErr) {
          console.error("Kết nối không SSL cũng thất bại:", noSslErr.message);
        }
      }

      // Nếu đã thử tất cả các lần và vẫn thất bại
      if (i === retries - 1) {
        console.error(`Failed to connect to MongoDB after ${retries} attempts.`);
        console.log("The server will continue to run without database connection.");
        exports.isMongoConnected = isMongoConnected = false;
      }
    }
  }

  return null;
};

// Lấy trạng thái kết nối
const getConnectionStatus = () => {
  return {
    isConnected: isMongoConnected,
    readyState: _mongoose.default.connection ? _mongoose.default.connection.readyState : 0,
    dbName: _mongoose.default.connection ? _mongoose.default.connection.name : null,
    host: _mongoose.default.connection ? _mongoose.default.connection.host : null,
    uriType: currentUri ?
    currentUri.includes('mongodb+srv://') ? 'SRV URI' :
    currentUri.includes('27018') ? 'Single IP URI' :
    currentUri.includes('27017') ? 'IP URI' : 'Other URI' : 'None'
  };
};

// Các hàm xử lý sự kiện kết nối
exports.getConnectionStatus = getConnectionStatus;const setupConnectionHandlers = () => {
  _mongoose.default.connection.on("error", (err) => {
    console.error("MongoDB connection error:", err);
    exports.isMongoConnected = isMongoConnected = false;
  });

  _mongoose.default.connection.on("disconnected", () => {
    console.log("MongoDB disconnected. Attempting to reconnect...");
    exports.isMongoConnected = isMongoConnected = false;

    // Thử kết nối lại sau 10 giây khi bị ngắt kết nối
    setTimeout(() => connectWithRetry(), 10000);
  });

  _mongoose.default.connection.on("reconnected", () => {
    console.log("MongoDB reconnected successfully");
    exports.isMongoConnected = isMongoConnected = true;
  });

  // Xử lý khi process kết thúc
  if (typeof process !== 'undefined') {
    process.on('SIGINT', async () => {
      try {
        await _mongoose.default.connection.close();
        console.log('MongoDB connection closed due to app termination');
        process.exit(0);
      } catch (err) {
        console.error('Error during MongoDB connection closure:', err);
        process.exit(1);
      }
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kb3RlbnYiLCJfZG5zIiwiZG90ZW52IiwiY29uZmlnIiwicGF0aCIsImRucyIsInNldERlZmF1bHRSZXN1bHRPcmRlciIsImlzTW9uZ29Db25uZWN0ZWQiLCJleHBvcnRzIiwiY29ubmVjdGlvbkF0dGVtcHRzIiwiY3VycmVudFVyaSIsImlzTW9iaWxlRGV2aWNlIiwid2luZG93IiwibmF2aWdhdG9yIiwidWEiLCJ1c2VyQWdlbnQiLCJ0ZXN0IiwicHJvY2VzcyIsImVudiIsIklTX01PQklMRSIsImluaXRpYWxpemVEYXRhYmFzZSIsInNldHVwQ29ubmVjdGlvbkhhbmRsZXJzIiwibW9uZ29vc2UiLCJjb25uZWN0aW9uIiwicmVhZHlTdGF0ZSIsImNsb3NlIiwiY29uc29sZSIsImxvZyIsImVyciIsImVycm9yIiwiY29ubmVjdFdpdGhSZXRyeSIsImdldEJlc3RNb25nb1VSSSIsIk1PTkdPREJfSVBfVVJJIiwiTU9OR09EQl9TSU5HTEVfSVBfVVJJIiwiTU9OR09EQl9ESVJFQ1RfVVJJIiwiTU9OR09EQl9NT0JJTEVfVVJJIiwiTU9OR09EQl9TVVBFUl9TSU1QTEVfVVJJIiwiTU9OR09EQl9TUlZfVVJJIiwiTU9OR09EQl9GQUxMQkFDS19VUkkiLCJyZXRyaWVzIiwiZGVsYXkiLCJ1cmlUb0Nvbm5lY3QiLCJ1cmlUeXBlIiwicGxhdGZvcm0iLCJhcmNoIiwibm9kZSIsInZlcnNpb24iLCJtb25nb29zZVZlcnNpb24iLCJpc01vYmlsZSIsIm1vbmdvb3NlT3B0aW9ucyIsInNlcnZlclNlbGVjdGlvblRpbWVvdXRNUyIsInNvY2tldFRpbWVvdXRNUyIsImNvbm5lY3RUaW1lb3V0TVMiLCJtYXhQb29sU2l6ZSIsIm1pblBvb2xTaXplIiwiZmFtaWx5IiwiYXV0b0luZGV4IiwiaW5jbHVkZXMiLCJ0bHMiLCJ0bHNJbnNlY3VyZSIsInRsc0FsbG93SW52YWxpZENlcnRpZmljYXRlcyIsInRsc0FsbG93SW52YWxpZEhvc3RuYW1lcyIsInNzbCIsImkiLCJQcm9taXNlIiwiciIsInNldFRpbWVvdXQiLCJyZXBsYWNlIiwiY29ubmVjdCIsImhvc3QiLCJwb3J0IiwiZGJOYW1lIiwibmFtZSIsIm1lc3NhZ2UiLCJub1NzbFVyaSIsIm5vU3NsRXJyIiwiZ2V0Q29ubmVjdGlvblN0YXR1cyIsImlzQ29ubmVjdGVkIiwib24iLCJleGl0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbmZpZy9kYXRhYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xyXG5pbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xyXG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XHJcbmltcG9ydCBkbnMgZnJvbSAnZG5zJztcclxuLy8gS2jDtG5nIGPhuqduIGZpbGVVUkxUb1BhdGggdsOgIGRpcm5hbWUgdsOsIGNow7puZyB0YSBraMO0bmcgc+G7rSBk4bulbmcgX19kaXJuYW1lXHJcblxyXG4vLyBLaOG7n2kgdOG6oW8gZG90ZW52XHJcbmRvdGVudi5jb25maWcoe3BhdGg6ICcuZW52J30pO1xyXG5cclxuLy8gSOG7lyB0cuG7oyBJUHY0IGZpcnN0IC0gZ2nDunAga+G6v3QgbuG7kWkgdOG7qyBuaGnhu4F1IGxv4bqhaSB0aGnhur90IGLhu4tcclxuZG5zLnNldERlZmF1bHRSZXN1bHRPcmRlcignaXB2NGZpcnN0Jyk7XHJcblxyXG4vLyBCaeG6v24gdG/DoG4gY+G7pWMgdGhlbyBkw7VpIHRy4bqhbmcgdGjDoWkga+G6v3QgbuG7kWlcclxubGV0IGlzTW9uZ29Db25uZWN0ZWQgPSBmYWxzZTtcclxubGV0IGNvbm5lY3Rpb25BdHRlbXB0cyA9IDA7XHJcbmxldCBjdXJyZW50VXJpID0gbnVsbDtcclxuXHJcbi8vIEtp4buDbSB0cmEgeGVtIHRoaeG6v3QgYuG7iyBjw7MgcGjhuqNpIGzDoCB0aGnhur90IGLhu4sgZGkgxJHhu5luZyBraMO0bmdcclxuY29uc3QgaXNNb2JpbGVEZXZpY2UgPSAoKSA9PiB7XHJcbiAgLy8gS2nhu4NtIHRyYSBVc2VyQWdlbnQgbuG6v3UgxJFhbmcgY2jhuqF5IHRyb25nIG3DtGkgdHLGsOG7nW5nIGPDsyB3aW5kb3dcclxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvcikge1xyXG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuICAgIHJldHVybiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QodWEpO1xyXG4gIH1cclxuICBcclxuICAvLyBO4bq/dSBraMO0bmcgY8OzIHdpbmRvdywga2nhu4NtIHRyYSBiaeG6v24gbcO0aSB0csaw4budbmdcclxuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52KSB7XHJcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuSVNfTU9CSUxFID09PSAndHJ1ZSc7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbi8vIEjDoG0ga2jhu59pIHThuqFvIGPGoSBz4bufIGThu68gbGnhu4d1XHJcbmNvbnN0IGluaXRpYWxpemVEYXRhYmFzZSA9IGFzeW5jICgpID0+IHtcclxuICAvLyBUaGnhur90IGzhuq1wIGPDoWMgaGFuZGxlcnMgeOG7rSBsw70gc+G7sSBraeG7h24ga+G6v3QgbuG7kWlcclxuICBzZXR1cENvbm5lY3Rpb25IYW5kbGVycygpO1xyXG4gIFxyXG4gIC8vIFJlc2V0IE1vbmdvb3NlXHJcbiAgaWYgKG1vbmdvb3NlLmNvbm5lY3Rpb24ucmVhZHlTdGF0ZSAhPT0gMCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdGlvbi5jbG9zZSgpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIsSQw6MgxJHDs25nIGvhur90IG7hu5FpIGPFqSDEkeG7gyBraOG7n2kgdOG6oW8gbeG7m2lcIik7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkzhu5dpIGtoaSDEkcOzbmcga+G6v3QgbuG7kWkgY8WpOlwiLCBlcnIpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvLyBL4bq/dCBu4buRaSB24bubaSBNb25nb0RCXHJcbiAgcmV0dXJuIGF3YWl0IGNvbm5lY3RXaXRoUmV0cnkoKTtcclxufTtcclxuXHJcbi8vIEzhuqV5IFVSSSBwaMO5IGjhu6NwIG5o4bqldCBjaG8ga+G6v3QgbuG7kWlcclxuY29uc3QgZ2V0QmVzdE1vbmdvVVJJID0gKCkgPT4ge1xyXG4gIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgIXByb2Nlc3MuZW52KSByZXR1cm4gbnVsbDtcclxuICBcclxuICAvLyBRdXnhur90IMSR4buLbmggVVJJIHRoZW8gZGV2aWNlIHR5cGVcclxuICBpZiAoaXNNb2JpbGVEZXZpY2UoKSkge1xyXG4gICAgLy8gQ2hvIHRoaeG6v3QgYuG7iyBkaSDEkeG7mW5nLCDGsHUgdGnDqm4gY8OhYyBVUkkgdHLhu7FjIHRp4bq/cCBi4bqxbmcgSVBcclxuICAgIHJldHVybiBwcm9jZXNzLmVudi5NT05HT0RCX0lQX1VSSSB8fCBcclxuICAgICAgICAgICBwcm9jZXNzLmVudi5NT05HT0RCX1NJTkdMRV9JUF9VUkkgfHwgXHJcbiAgICAgICAgICAgcHJvY2Vzcy5lbnYuTU9OR09EQl9ESVJFQ1RfVVJJIHx8IFxyXG4gICAgICAgICAgIHByb2Nlc3MuZW52Lk1PTkdPREJfTU9CSUxFX1VSSSB8fCBcclxuICAgICAgICAgICBwcm9jZXNzLmVudi5NT05HT0RCX1NVUEVSX1NJTVBMRV9VUkkgfHwgXHJcbiAgICAgICAgICAgcHJvY2Vzcy5lbnYuTU9OR09EQl9TUlZfVVJJIHx8IFxyXG4gICAgICAgICAgIHByb2Nlc3MuZW52Lk1PTkdPREJfRkFMTEJBQ0tfVVJJO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBDaG8gdGhp4bq/dCBi4buLIHRow7RuZyB0aMaw4budbmdcclxuICAgIHJldHVybiBwcm9jZXNzLmVudi5NT05HT0RCX0lQX1VSSSB8fCBcclxuICAgICAgICAgICBwcm9jZXNzLmVudi5NT05HT0RCX1NJTkdMRV9JUF9VUkkgfHwgXHJcbiAgICAgICAgICAgcHJvY2Vzcy5lbnYuTU9OR09EQl9TVVBFUl9TSU1QTEVfVVJJIHx8IFxyXG4gICAgICAgICAgIHByb2Nlc3MuZW52Lk1PTkdPREJfU1JWX1VSSSB8fCBcclxuICAgICAgICAgICBwcm9jZXNzLmVudi5NT05HT0RCX0RJUkVDVF9VUkkgfHwgXHJcbiAgICAgICAgICAgcHJvY2Vzcy5lbnYuTU9OR09EQl9NT0JJTEVfVVJJIHx8IFxyXG4gICAgICAgICAgIHByb2Nlc3MuZW52Lk1PTkdPREJfRkFMTEJBQ0tfVVJJO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIEjDoG0ga+G6v3QgbuG7kWkgTW9uZ29EQiB24bubaSBraOG6oyBuxINuZyB0aOG7rSBs4bqhaVxyXG5jb25zdCBjb25uZWN0V2l0aFJldHJ5ID0gYXN5bmMgKHJldHJpZXMgPSA1LCBkZWxheSA9IDUwMDApID0+IHtcclxuICBjb25uZWN0aW9uQXR0ZW1wdHMrKztcclxuICBjb25zb2xlLmxvZyhgTW9uZ29EQiBDb25uZWN0aW9uIEF0dGVtcHQgIyR7Y29ubmVjdGlvbkF0dGVtcHRzfS4uLmApO1xyXG4gIFxyXG4gIC8vIMSQ4bqjbSBi4bqjbyDEkcOzbmcga+G6v3QgbuG7kWkgY8WpIG7hur91IGPDs1xyXG4gIGlmIChtb25nb29zZS5jb25uZWN0aW9uLnJlYWR5U3RhdGUgIT09IDApIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3Rpb24uY2xvc2UoKTtcclxuICAgICAgY29uc29sZS5sb2coXCLEkMOjIMSRw7NuZyBr4bq/dCBu4buRaSBjxakgdHLGsOG7m2Mga2hpIGvhur90IG7hu5FpIGzhuqFpXCIpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJM4buXaSBraGkgxJHDs25nIGvhur90IG7hu5FpIGPFqTpcIiwgZXJyKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8gTOG6pXkgVVJJIHThu5F0IG5o4bqldFxyXG4gIGNvbnN0IHVyaVRvQ29ubmVjdCA9IGdldEJlc3RNb25nb1VSSSgpO1xyXG4gIFxyXG4gIGlmICghdXJpVG9Db25uZWN0KSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiS2jDtG5nIHTDrG0gdGjhuqV5IFVSSSBNb25nb0RCIGjhu6NwIGzhu4cgdHJvbmcgYmnhur9uIG3DtGkgdHLGsOG7nW5nXCIpO1xyXG4gICAgaXNNb25nb0Nvbm5lY3RlZCA9IGZhbHNlO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIEzGsHUgVVJJIGhp4buHbiB04bqhaVxyXG4gIGN1cnJlbnRVcmkgPSB1cmlUb0Nvbm5lY3Q7XHJcbiAgXHJcbiAgLy8gTG9nIHRow7RuZyB0aW4ga+G6v3QgbuG7kWkgxJHhu4MgZGVidWdcclxuICBjb25zdCB1cmlUeXBlID0gXHJcbiAgICB1cmlUb0Nvbm5lY3QgPT09IHByb2Nlc3MuZW52Lk1PTkdPREJfSVBfVVJJID8gJ0lQIFVSSScgOlxyXG4gICAgdXJpVG9Db25uZWN0ID09PSBwcm9jZXNzLmVudi5NT05HT0RCX1NJTkdMRV9JUF9VUkkgPyAnU2luZ2xlIElQIFVSSScgOlxyXG4gICAgdXJpVG9Db25uZWN0ID09PSBwcm9jZXNzLmVudi5NT05HT0RCX0RJUkVDVF9VUkkgPyAnRGlyZWN0IFVSSScgOlxyXG4gICAgdXJpVG9Db25uZWN0ID09PSBwcm9jZXNzLmVudi5NT05HT0RCX01PQklMRV9VUkkgPyAnTW9iaWxlIFVSSScgOlxyXG4gICAgdXJpVG9Db25uZWN0ID09PSBwcm9jZXNzLmVudi5NT05HT0RCX1NVUEVSX1NJTVBMRV9VUkkgPyAnU3VwZXIgU2ltcGxlIFVSSScgOlxyXG4gICAgdXJpVG9Db25uZWN0ID09PSBwcm9jZXNzLmVudi5NT05HT0RCX1NSVl9VUkkgPyAnU1JWIFVSSScgOlxyXG4gICAgJ090aGVyIFVSSSc7XHJcbiAgXHJcbiAgY29uc29sZS5sb2coYMSQYW5nIGvhur90IG7hu5FpIHbhu5tpIE1vbmdvREIsIGxv4bqhaSBVUkk6ICR7dXJpVHlwZX1gKTtcclxuICBcclxuICAvLyBJbiB0aMO0bmcgdGluIGRldmljZSDEkeG7gyBkZWJ1Z1xyXG4gIGNvbnNvbGUubG9nKFwiRGV2aWNlIGluZm86XCIsIHtcclxuICAgIHBsYXRmb3JtOiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9jZXNzLnBsYXRmb3JtIDogJ3Vua25vd24nLFxyXG4gICAgYXJjaDogdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gcHJvY2Vzcy5hcmNoIDogJ3Vua25vd24nLFxyXG4gICAgbm9kZTogdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gcHJvY2Vzcy52ZXJzaW9uIDogJ3Vua25vd24nLFxyXG4gICAgbW9uZ29vc2VWZXJzaW9uOiBtb25nb29zZS52ZXJzaW9uLFxyXG4gICAgaXNNb2JpbGU6IGlzTW9iaWxlRGV2aWNlKClcclxuICB9KTtcclxuICBcclxuICAvLyBPcHRpb25zIGvhur90IG7hu5FpIE1vbmdvREIgdOG7kWkgxrB1IC0gxJBp4buBdSBjaOG7iW5oIMSR4buDIGto4bqvYyBwaOG7pWMgbOG7l2kgdGltZW91dFxyXG4gIGNvbnN0IG1vbmdvb3NlT3B0aW9ucyA9IHtcclxuICAgIHNlcnZlclNlbGVjdGlvblRpbWVvdXRNUzogMzAwMDAsICAvLyBHaeG6o20gdGjhu51pIGdpYW4gY2jhu50gc2VydmVyIHNlbGVjdGlvblxyXG4gICAgc29ja2V0VGltZW91dE1TOiA0NTAwMCwgICAgICAgICAgIC8vIEdp4bqjbSB0aOG7nWkgZ2lhbiBjaOG7nSBzb2NrZXRcclxuICAgIGNvbm5lY3RUaW1lb3V0TVM6IDMwMDAwLCAgICAgICAgICAvLyBHaeG6o20gdGjhu51pIGdpYW4gdGltZW91dCBr4bq/dCBu4buRaVxyXG4gICAgbWF4UG9vbFNpemU6IDEwLCAgICAgICAgICAgICAgICAgIC8vIEdp4bqjbSBz4buRIGzGsOG7o25nIGvhur90IG7hu5FpIHThu5FpIMSRYVxyXG4gICAgbWluUG9vbFNpemU6IDEsICAgICAgICAgICAgICAgICAgIC8vIEdp4bqjbSBz4buRIGzGsOG7o25nIGvhur90IG7hu5FpIHThu5FpIHRoaeG7g3VcclxuICAgIGZhbWlseTogNCwgICAgICAgICAgICAgICAgICAgICAgICAvLyBJUHY0XHJcbiAgICBhdXRvSW5kZXg6IHRydWUsXHJcbiAgICAvLyBUw7l5IGNo4buJbmggU1NML1RMUyBk4buxYSB0csOqbiBsb+G6oWkgVVJJXHJcbiAgICAuLi4odXJpVG9Db25uZWN0LmluY2x1ZGVzKCdtb25nb2RiK3NydjovLycpID8ge1xyXG4gICAgICB0bHM6IHRydWUsXHJcbiAgICAgIHRsc0luc2VjdXJlOiB0cnVlLCAgICAgICAgICAgICAgLy8gQ2hvIHBow6lwIGvhur90IG7hu5FpIGtow7RuZyBhbiB0b8OgbiDEkeG7gyB0ZXN0XHJcbiAgICAgIHRsc0FsbG93SW52YWxpZENlcnRpZmljYXRlczogdHJ1ZSxcclxuICAgICAgdGxzQWxsb3dJbnZhbGlkSG9zdG5hbWVzOiB0cnVlXHJcbiAgICB9IDoge1xyXG4gICAgICBzc2w6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgIC8vIFThuq90IFNTTCBjaG8ga+G6v3QgbuG7kWkgdHLhu7FjIHRp4bq/cCDEkeG7gyB0csOhbmggdGltZW91dFxyXG4gICAgfSlcclxuICB9O1xyXG4gIFxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0cmllczsgaSsrKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBDaOG7nSBt4buZdCBjaMO6dCB0csaw4bubYyBraGkgdGjhu60gbOG6oWkgbuG6v3Uga2jDtG5nIHBo4bqjaSBs4bqnbiDEkeG6p3VcclxuICAgICAgaWYgKGkgPiAwKSB7XHJcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UociA9PiBzZXRUaW1lb3V0KHIsIGRlbGF5KSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEhp4buDbiB0aOG7iyB0aMO0bmcgdGluIGvhur90IG7hu5FpIChjaGUgZOG6pXUgdGjDtG5nIHRpbiBuaOG6oXkgY+G6o20pXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiQ29ubmVjdGluZyB0byBNb25nb0RCIHdpdGggVVJJOlwiLCBcclxuICAgICAgICB1cmlUb0Nvbm5lY3QgPyB1cmlUb0Nvbm5lY3QucmVwbGFjZSgvXFwvXFwvW146XSs6W15AXStALywgXCIvLyoqKjoqKipAXCIpIDogXCJVUkkgaXMgdW5kZWZpbmVkXCIpO1xyXG4gICAgICBcclxuICAgICAgLy8gS+G6v3QgbuG7kWkgduG7m2kgTW9uZ29EQlxyXG4gICAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KHVyaVRvQ29ubmVjdCwgbW9uZ29vc2VPcHRpb25zKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiTW9uZ29EQiBDb25uZWN0ZWQgU3VjY2Vzc2Z1bGx5IVwiKTtcclxuICAgICAgY29uc29sZS5sb2coXCJDb25uZWN0aW9uIEluZm86XCIsIHtcclxuICAgICAgICBob3N0OiBtb25nb29zZS5jb25uZWN0aW9uLmhvc3QsXHJcbiAgICAgICAgcG9ydDogbW9uZ29vc2UuY29ubmVjdGlvbi5wb3J0LFxyXG4gICAgICAgIGRiTmFtZTogbW9uZ29vc2UuY29ubmVjdGlvbi5uYW1lLFxyXG4gICAgICAgIHJlYWR5U3RhdGU6IG1vbmdvb3NlLmNvbm5lY3Rpb24ucmVhZHlTdGF0ZVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGlzTW9uZ29Db25uZWN0ZWQgPSB0cnVlO1xyXG4gICAgICByZXR1cm4gbW9uZ29vc2UuY29ubmVjdGlvbjtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBNb25nb0RCIGNvbm5lY3Rpb24gYXR0ZW1wdCAke2kgKyAxfSBmYWlsZWQ6YCwgZXJyLm5hbWUpO1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZGV0YWlsczpcIiwgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICBcclxuICAgICAgLy8gVGjhu60ga+G6v3QgbuG7kWkgduG7m2kgVVJJIGtow6FjIG7hur91IMSRw6MgdGjhu60gMiBs4bqnbiB24bubaSBVUkkgaGnhu4duIHThuqFpXHJcbiAgICAgIGlmIChpID09PSAxKSB7XHJcbiAgICAgICAgLy8gVGjhu60gduG7m2kgVVJJIGtow7RuZyBjw7MgU1NMXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGjhu60ga+G6v3QgbuG7kWkga2jDtG5nIHPhu60gZOG7pW5nIFNTTC9UTFMuLi5cIik7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIFThuqFvIFVSSSBt4bubaSBraMO0bmcgY8OzIFNTTFxyXG4gICAgICAgICAgbGV0IG5vU3NsVXJpID0gdXJpVG9Db25uZWN0O1xyXG4gICAgICAgICAgaWYgKG5vU3NsVXJpLmluY2x1ZGVzKCdzc2w9dHJ1ZScpKSB7XHJcbiAgICAgICAgICAgIG5vU3NsVXJpID0gbm9Tc2xVcmkucmVwbGFjZSgnc3NsPXRydWUnLCAnc3NsPWZhbHNlJyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKCFub1NzbFVyaS5pbmNsdWRlcygnc3NsPWZhbHNlJykpIHtcclxuICAgICAgICAgICAgbm9Tc2xVcmkgKz0gbm9Tc2xVcmkuaW5jbHVkZXMoJz8nKSA/ICcmc3NsPWZhbHNlJyA6ICc/c3NsPWZhbHNlJztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gS+G6v3QgbuG7kWkgduG7m2kgVVJJIGtow7RuZyBjw7MgU1NMXHJcbiAgICAgICAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KG5vU3NsVXJpLCB7XHJcbiAgICAgICAgICAgIC4uLm1vbmdvb3NlT3B0aW9ucyxcclxuICAgICAgICAgICAgc3NsOiBmYWxzZSxcclxuICAgICAgICAgICAgdGxzOiBmYWxzZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiS+G6v3QgbuG7kWkgdGjDoG5oIGPDtG5nIHbhu5tpIGPhuqV1IGjDrG5oIGtow7RuZyBTU0whXCIpO1xyXG4gICAgICAgICAgaXNNb25nb0Nvbm5lY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICByZXR1cm4gbW9uZ29vc2UuY29ubmVjdGlvbjtcclxuICAgICAgICB9IGNhdGNoIChub1NzbEVycikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkvhur90IG7hu5FpIGtow7RuZyBTU0wgY8WpbmcgdGjhuqV0IGLhuqFpOlwiLCBub1NzbEVyci5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIE7hur91IMSRw6MgdGjhu60gdOG6pXQgY+G6oyBjw6FjIGzhuqduIHbDoCB24bqrbiB0aOG6pXQgYuG6oWlcclxuICAgICAgaWYgKGkgPT09IHJldHJpZXMgLSAxKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNvbm5lY3QgdG8gTW9uZ29EQiBhZnRlciAke3JldHJpZXN9IGF0dGVtcHRzLmApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiVGhlIHNlcnZlciB3aWxsIGNvbnRpbnVlIHRvIHJ1biB3aXRob3V0IGRhdGFiYXNlIGNvbm5lY3Rpb24uXCIpO1xyXG4gICAgICAgIGlzTW9uZ29Db25uZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcbi8vIEzhuqV5IHRy4bqhbmcgdGjDoWkga+G6v3QgbuG7kWlcclxuY29uc3QgZ2V0Q29ubmVjdGlvblN0YXR1cyA9ICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgaXNDb25uZWN0ZWQ6IGlzTW9uZ29Db25uZWN0ZWQsXHJcbiAgICByZWFkeVN0YXRlOiBtb25nb29zZS5jb25uZWN0aW9uID8gbW9uZ29vc2UuY29ubmVjdGlvbi5yZWFkeVN0YXRlIDogMCxcclxuICAgIGRiTmFtZTogbW9uZ29vc2UuY29ubmVjdGlvbiA/IG1vbmdvb3NlLmNvbm5lY3Rpb24ubmFtZSA6IG51bGwsXHJcbiAgICBob3N0OiBtb25nb29zZS5jb25uZWN0aW9uID8gbW9uZ29vc2UuY29ubmVjdGlvbi5ob3N0IDogbnVsbCxcclxuICAgIHVyaVR5cGU6IGN1cnJlbnRVcmkgPyBcclxuICAgICAgKGN1cnJlbnRVcmkuaW5jbHVkZXMoJ21vbmdvZGIrc3J2Oi8vJykgPyAnU1JWIFVSSScgOiBcclxuICAgICAgIGN1cnJlbnRVcmkuaW5jbHVkZXMoJzI3MDE4JykgPyAnU2luZ2xlIElQIFVSSScgOlxyXG4gICAgICAgY3VycmVudFVyaS5pbmNsdWRlcygnMjcwMTcnKSA/ICdJUCBVUkknIDogJ090aGVyIFVSSScpIDogJ05vbmUnXHJcbiAgfTtcclxufTtcclxuXHJcbi8vIEPDoWMgaMOgbSB44butIGzDvSBz4buxIGtp4buHbiBr4bq/dCBu4buRaVxyXG5jb25zdCBzZXR1cENvbm5lY3Rpb25IYW5kbGVycyA9ICgpID0+IHtcclxuICBtb25nb29zZS5jb25uZWN0aW9uLm9uKFwiZXJyb3JcIiwgKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihcIk1vbmdvREIgY29ubmVjdGlvbiBlcnJvcjpcIiwgZXJyKTtcclxuICAgIGlzTW9uZ29Db25uZWN0ZWQgPSBmYWxzZTtcclxuICB9KTtcclxuXHJcbiAgbW9uZ29vc2UuY29ubmVjdGlvbi5vbihcImRpc2Nvbm5lY3RlZFwiLCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIk1vbmdvREIgZGlzY29ubmVjdGVkLiBBdHRlbXB0aW5nIHRvIHJlY29ubmVjdC4uLlwiKTtcclxuICAgIGlzTW9uZ29Db25uZWN0ZWQgPSBmYWxzZTtcclxuICAgIFxyXG4gICAgLy8gVGjhu60ga+G6v3QgbuG7kWkgbOG6oWkgc2F1IDEwIGdpw6J5IGtoaSBi4buLIG5n4bqvdCBr4bq/dCBu4buRaVxyXG4gICAgc2V0VGltZW91dCgoKSA9PiBjb25uZWN0V2l0aFJldHJ5KCksIDEwMDAwKTtcclxuICB9KTtcclxuXHJcbiAgbW9uZ29vc2UuY29ubmVjdGlvbi5vbihcInJlY29ubmVjdGVkXCIsICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwiTW9uZ29EQiByZWNvbm5lY3RlZCBzdWNjZXNzZnVsbHlcIik7XHJcbiAgICBpc01vbmdvQ29ubmVjdGVkID0gdHJ1ZTtcclxuICB9KTtcclxuICBcclxuICAvLyBY4butIGzDvSBraGkgcHJvY2VzcyBr4bq/dCB0aMO6Y1xyXG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHByb2Nlc3Mub24oJ1NJR0lOVCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0aW9uLmNsb3NlKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ01vbmdvREIgY29ubmVjdGlvbiBjbG9zZWQgZHVlIHRvIGFwcCB0ZXJtaW5hdGlvbicpO1xyXG4gICAgICAgIHByb2Nlc3MuZXhpdCgwKTtcclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIE1vbmdvREIgY29ubmVjdGlvbiBjbG9zdXJlOicsIGVycik7XHJcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgeyBcclxuICBpbml0aWFsaXplRGF0YWJhc2UsIFxyXG4gIGdldENvbm5lY3Rpb25TdGF0dXMsIFxyXG4gIGlzTW9uZ29Db25uZWN0ZWQsXHJcbiAgbW9uZ29vc2VcclxufTsgIl0sIm1hcHBpbmdzIjoiO0FBQ0EsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxD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