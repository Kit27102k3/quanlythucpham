"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;
var _express = _interopRequireDefault(require("express"));
var _Order = _interopRequireDefault(require("../Model/Order.js"));
var _Products = _interopRequireDefault(require("../Model/Products.js"));
var _Register = _interopRequireDefault(require("../Model/Register.js"));
var _Category = _interopRequireDefault(require("../Model/Category.js"));
var _authMiddleware = require("../Middleware/authMiddleware.js");
var _ProductController = require("../Controller/ProductController.js"); /* eslint-disable no-unused-vars */ // Added missing import

const router = _express.default.Router();

// Get revenue data by time range (week/month/year)
router.get("/revenue", _authMiddleware.verifyToken, async (req, res) => {
  try {
    const { timeRange } = req.query;
    const currentDate = new Date();
    let startDate;

    // Set time range
    switch (timeRange) {
      case "week":
        startDate = new Date(currentDate.setDate(currentDate.getDate() - 7));
        break;
      case "month":
        startDate = new Date(currentDate.setDate(currentDate.getDate() - 30));
        break;
      case "year":
        startDate = new Date(
          currentDate.setFullYear(currentDate.getFullYear() - 1)
        );
        break;
      default:
        return res.status(400).json({ message: "Invalid timeRange parameter" });
    }

    // Aggregate revenue data
    let revenueData;
    if (timeRange === "week") {
      revenueData = await _Order.default.aggregate([
      {
        $match: {
          createdAt: { $gte: startDate },
          status: { $in: ["completed", "delivered"] }
        }
      },
      {
        $group: {
          _id: { $dayOfWeek: "$createdAt" },
          revenue: { $sum: "$totalAmount" }
        }
      },
      { $sort: { _id: 1 } },
      { $project: { _id: 0, day: "$_id", revenue: 1 } }]
      );

      // Format data for all days of the week
      const daysOfWeek = [
      "CN",
      "Thứ 2",
      "Thứ 3",
      "Thứ 4",
      "Thứ 5",
      "Thứ 6",
      "Thứ 7"];

      revenueData = Array.from({ length: 7 }, (_, i) => {
        const item = revenueData.find((item) => item.day === i + 1);
        return {
          name: daysOfWeek[i],
          revenue: item ? item.revenue : 0
        };
      });
    } else if (timeRange === "month") {
      revenueData = await _Order.default.aggregate([
      {
        $match: {
          createdAt: { $gte: startDate },
          status: { $in: ["completed", "delivered"] }
        }
      },
      {
        $group: {
          _id: { $dayOfMonth: "$createdAt" },
          revenue: { $sum: "$totalAmount" }
        }
      },
      { $sort: { _id: 1 } },
      { $project: { _id: 0, name: { $toString: "$_id" }, revenue: 1 } }]
      );

      // Ensure data for all days
      const daysInMonth = new Date(
        currentDate.getFullYear(),
        currentDate.getMonth() + 1,
        0
      ).getDate();
      revenueData = Array.from({ length: daysInMonth }, (_, i) => {
        const item = revenueData.find((item) => parseInt(item.name) === i + 1);
        return {
          name: `${i + 1}`,
          revenue: item ? item.revenue : 0
        };
      });
    } else {
      revenueData = await _Order.default.aggregate([
      {
        $match: {
          createdAt: { $gte: startDate },
          status: { $in: ["completed", "delivered"] }
        }
      },
      {
        $group: {
          _id: { $month: "$createdAt" },
          revenue: { $sum: "$totalAmount" }
        }
      },
      { $sort: { _id: 1 } },
      { $project: { _id: 0, month: "$_id", revenue: 1 } }]
      );

      // Format data for all months
      const months = Array.from({ length: 12 }, (_, i) => `Tháng ${i + 1}`);
      revenueData = Array.from({ length: 12 }, (_, i) => {
        const item = revenueData.find((item) => item.month === i + 1);
        return {
          name: months[i],
          revenue: item ? item.revenue : 0
        };
      });
    }

    res.json(revenueData);
  } catch (error) {
    console.error("Error fetching revenue data:", error);
    res.status(500).json({ message: "Error fetching revenue data" });
  }
});

// Get top-selling products
router.get("/top-products", _authMiddleware.verifyToken, async (req, res) => {
  try {
    const { limit = 10 } = req.query;

    const topProducts = await _Order.default.aggregate([
    { $match: { status: "completed" } },
    { $unwind: "$products" },
    {
      $lookup: {
        from: "products",
        localField: "products.productId",
        foreignField: "_id",
        as: "productInfo"
      }
    },
    {
      $group: {
        _id: "$products.productId",
        name: { $first: { $arrayElemAt: ["$productInfo.productName", 0] } },
        sold: { $sum: "$products.quantity" },
        revenue: {
          $sum: { $multiply: ["$products.price", "$products.quantity"] }
        }
      }
    },
    { $sort: { revenue: -1 } },
    { $limit: parseInt(limit) },
    { $project: { _id: 0, name: 1, sold: 1, revenue: 1 } }]
    );

    res.json(topProducts);
  } catch (error) {
    console.error("Error fetching top products:", error);
    res.status(500).json({ message: "Error fetching top products" });
  }
});

// Get low-stock products (delegated to ProductController)
router.get("/low-stock", _authMiddleware.verifyToken, _ProductController.getLowStockProducts);

// Get user statistics
router.get("/users", _authMiddleware.verifyToken, async (req, res) => {
  try {
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);

    const [totalUsers, newUsers, activeUsers, guestOrders] = await Promise.all([
    _Register.default.countDocuments(),
    _Register.default.countDocuments({ createdAt: { $gte: thirtyDaysAgo } }),
    _Order.default.distinct("userId", {
      createdAt: { $gte: thirtyDaysAgo },
      userId: { $exists: true, $ne: null }
    }).then((users) => users.length),
    _Order.default.countDocuments({
      createdAt: { $gte: thirtyDaysAgo },
      userId: { $exists: false }
    })]
    );

    const userData = [
    { name: "Người dùng mới", count: newUsers, color: "#8884d8" },
    { name: "Khách hàng thân thiết", count: activeUsers, color: "#82ca9d" },
    { name: "Khách vãng lai", count: guestOrders, color: "#ffc658" }];


    res.json(userData);
  } catch (error) {
    console.error("Error fetching user data:", error);
    res.status(500).json({ message: "Error fetching user data" });
  }
});

// Test data structure
router.get("/test-structure", _authMiddleware.verifyToken, async (req, res) => {
  try {
    const [orderCount, productCount, userCount, orderStatus, categories] =
    await Promise.all([
    _Order.default.countDocuments(),
    _Products.default.countDocuments(),
    _Register.default.countDocuments(),
    _Order.default.aggregate([{ $group: { _id: "$status", count: { $sum: 1 } } }]),
    _Category.default.find()]
    );

    res.json({
      message: "Data structure checked successfully",
      orderCount,
      productCount,
      userCount,
      orderStatus,
      categories
    });
  } catch (error) {
    console.error("Error checking data structure:", error);
    res.status(500).json({ message: "Error checking data structure" });
  }
});var _default = exports.default =

router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,