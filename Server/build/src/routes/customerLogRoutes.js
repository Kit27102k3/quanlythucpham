"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _express = _interopRequireDefault(require("express"));
var _customerLogController = _interopRequireDefault(require("../Controller/customerLogController.js"));
var _authMiddleware = require("../Middleware/authMiddleware.js");

const router = _express.default.Router();

/**
 * @route GET /api/logs
 * @desc Get all logs with pagination and filtering
 * @access Admin only
 */
router.get('/', _authMiddleware.verifyToken, _authMiddleware.isAdmin, _customerLogController.default.getAllLogs);

/**
 * @route GET /api/logs/customer/:customerId
 * @desc Get logs for a specific customer
 * @access Admin only
 */
router.get('/customer/:customerId', _authMiddleware.verifyToken, _authMiddleware.isAdmin, _customerLogController.default.getCustomerLogs);

/**
 * @route GET /api/logs/action/:action
 * @desc Get logs by action type
 * @access Admin only
 */
router.get('/action/:action', _authMiddleware.verifyToken, _authMiddleware.isAdmin, _customerLogController.default.getLogsByAction);

/**
 * @route GET /api/logs/status/:status
 * @desc Get logs by status
 * @access Admin only
 */
router.get('/status/:status', _authMiddleware.verifyToken, _authMiddleware.isAdmin, _customerLogController.default.getLogsByStatus);

/**
 * @route GET /api/logs/stats
 * @desc Get log statistics
 * @access Admin only
 */
router.get('/stats', _authMiddleware.verifyToken, _authMiddleware.isAdmin, _customerLogController.default.getLogStats);

/**
 * @route DELETE /api/logs/cleanup
 * @desc Delete logs older than a certain date
 * @access Admin only
 */
router.delete('/cleanup', _authMiddleware.verifyToken, _authMiddleware.isAdmin, _customerLogController.default.deleteOldLogs);var _default = exports.default =

router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2N1c3RvbWVyTG9nQ29udHJvbGxlciIsIl9hdXRoTWlkZGxld2FyZSIsInJvdXRlciIsImV4cHJlc3MiLCJSb3V0ZXIiLCJnZXQiLCJ2ZXJpZnlUb2tlbiIsImlzQWRtaW4iLCJjdXN0b21lckxvZ0NvbnRyb2xsZXIiLCJnZXRBbGxMb2dzIiwiZ2V0Q3VzdG9tZXJMb2dzIiwiZ2V0TG9nc0J5QWN0aW9uIiwiZ2V0TG9nc0J5U3RhdHVzIiwiZ2V0TG9nU3RhdHMiLCJkZWxldGUiLCJkZWxldGVPbGRMb2dzIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvY3VzdG9tZXJMb2dSb3V0ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCBjdXN0b21lckxvZ0NvbnRyb2xsZXIgZnJvbSAnLi4vQ29udHJvbGxlci9jdXN0b21lckxvZ0NvbnRyb2xsZXIuanMnO1xyXG5pbXBvcnQgeyBpc0FkbWluLCB2ZXJpZnlUb2tlbiB9IGZyb20gJy4uL01pZGRsZXdhcmUvYXV0aE1pZGRsZXdhcmUuanMnO1xyXG5cclxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxuXHJcbi8qKlxyXG4gKiBAcm91dGUgR0VUIC9hcGkvbG9nc1xyXG4gKiBAZGVzYyBHZXQgYWxsIGxvZ3Mgd2l0aCBwYWdpbmF0aW9uIGFuZCBmaWx0ZXJpbmdcclxuICogQGFjY2VzcyBBZG1pbiBvbmx5XHJcbiAqL1xyXG5yb3V0ZXIuZ2V0KCcvJywgdmVyaWZ5VG9rZW4sIGlzQWRtaW4sIGN1c3RvbWVyTG9nQ29udHJvbGxlci5nZXRBbGxMb2dzKTtcclxuXHJcbi8qKlxyXG4gKiBAcm91dGUgR0VUIC9hcGkvbG9ncy9jdXN0b21lci86Y3VzdG9tZXJJZFxyXG4gKiBAZGVzYyBHZXQgbG9ncyBmb3IgYSBzcGVjaWZpYyBjdXN0b21lclxyXG4gKiBAYWNjZXNzIEFkbWluIG9ubHlcclxuICovXHJcbnJvdXRlci5nZXQoJy9jdXN0b21lci86Y3VzdG9tZXJJZCcsIHZlcmlmeVRva2VuLCBpc0FkbWluLCBjdXN0b21lckxvZ0NvbnRyb2xsZXIuZ2V0Q3VzdG9tZXJMb2dzKTtcclxuXHJcbi8qKlxyXG4gKiBAcm91dGUgR0VUIC9hcGkvbG9ncy9hY3Rpb24vOmFjdGlvblxyXG4gKiBAZGVzYyBHZXQgbG9ncyBieSBhY3Rpb24gdHlwZVxyXG4gKiBAYWNjZXNzIEFkbWluIG9ubHlcclxuICovXHJcbnJvdXRlci5nZXQoJy9hY3Rpb24vOmFjdGlvbicsIHZlcmlmeVRva2VuLCBpc0FkbWluLCBjdXN0b21lckxvZ0NvbnRyb2xsZXIuZ2V0TG9nc0J5QWN0aW9uKTtcclxuXHJcbi8qKlxyXG4gKiBAcm91dGUgR0VUIC9hcGkvbG9ncy9zdGF0dXMvOnN0YXR1c1xyXG4gKiBAZGVzYyBHZXQgbG9ncyBieSBzdGF0dXNcclxuICogQGFjY2VzcyBBZG1pbiBvbmx5XHJcbiAqL1xyXG5yb3V0ZXIuZ2V0KCcvc3RhdHVzLzpzdGF0dXMnLCB2ZXJpZnlUb2tlbiwgaXNBZG1pbiwgY3VzdG9tZXJMb2dDb250cm9sbGVyLmdldExvZ3NCeVN0YXR1cyk7XHJcblxyXG4vKipcclxuICogQHJvdXRlIEdFVCAvYXBpL2xvZ3Mvc3RhdHNcclxuICogQGRlc2MgR2V0IGxvZyBzdGF0aXN0aWNzXHJcbiAqIEBhY2Nlc3MgQWRtaW4gb25seVxyXG4gKi9cclxucm91dGVyLmdldCgnL3N0YXRzJywgdmVyaWZ5VG9rZW4sIGlzQWRtaW4sIGN1c3RvbWVyTG9nQ29udHJvbGxlci5nZXRMb2dTdGF0cyk7XHJcblxyXG4vKipcclxuICogQHJvdXRlIERFTEVURSAvYXBpL2xvZ3MvY2xlYW51cFxyXG4gKiBAZGVzYyBEZWxldGUgbG9ncyBvbGRlciB0aGFuIGEgY2VydGFpbiBkYXRlXHJcbiAqIEBhY2Nlc3MgQWRtaW4gb25seVxyXG4gKi9cclxucm91dGVyLmRlbGV0ZSgnL2NsZWFudXAnLCB2ZXJpZnlUb2tlbiwgaXNBZG1pbiwgY3VzdG9tZXJMb2dDb250cm9sbGVyLmRlbGV0ZU9sZExvZ3MpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVyOyAiXSwibWFwcGluZ3MiOiJ5TEFBQSxJQUFBQSxRQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxzQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsZUFBQSxHQUFBRixPQUFBOztBQUVBLE1BQU1HLE1BQU0sR0FBR0MsZ0JBQU8sQ0FBQ0MsTUFBTSxDQUFDLENBQUM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUYsTUFBTSxDQUFDRyxHQUFHLENBQUMsR0FBRyxFQUFFQywyQkFBVyxFQUFFQyx1QkFBTyxFQUFFQyw4QkFBcUIsQ0FBQ0MsVUFBVSxDQUFDOztBQUV2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FQLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLHVCQUF1QixFQUFFQywyQkFBVyxFQUFFQyx1QkFBTyxFQUFFQyw4QkFBcUIsQ0FBQ0UsZUFBZSxDQUFDOztBQUVoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FSLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLGlCQUFpQixFQUFFQywyQkFBVyxFQUFFQyx1QkFBTyxFQUFFQyw4QkFBcUIsQ0FBQ0csZUFBZSxDQUFDOztBQUUxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FULE1BQU0sQ0FBQ0csR0FBRyxDQUFDLGlCQUFpQixFQUFFQywyQkFBVyxFQUFFQyx1QkFBTyxFQUFFQyw4QkFBcUIsQ0FBQ0ksZUFBZSxDQUFDOztBQUUxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FWLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLFFBQVEsRUFBRUMsMkJBQVcsRUFBRUMsdUJBQU8sRUFBRUMsOEJBQXFCLENBQUNLLFdBQVcsQ0FBQzs7QUFFN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBWCxNQUFNLENBQUNZLE1BQU0sQ0FBQyxVQUFVLEVBQUVSLDJCQUFXLEVBQUVDLHVCQUFPLEVBQUVDLDhCQUFxQixDQUFDTyxhQUFhLENBQUMsQ0FBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQUMsT0FBQTs7QUFFdEVoQixNQUFNIiwiaWdub3JlTGlzdCI6W119