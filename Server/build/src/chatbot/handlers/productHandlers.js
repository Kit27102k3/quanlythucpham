"use strict";const Product = require('../../models/Product');
const { connectToDatabase } = require('../../config/db');
const { ObjectId } = require('mongodb');
const productHelper = require('../../util/productHelper');

// Xử lý yêu cầu về thông tin sản phẩm
const handleProductInfo = async (productId) => {
  try {
    await connectToDatabase();
    const product = await Product.findById(productId);

    if (!product) {
      return 'Không tìm thấy thông tin sản phẩm này.';
    }

    return `${product.productName} - ${product.productInfo || 'Không có thông tin chi tiết.'}\n\nGiá: ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.productPrice)}${product.productDiscount ? ` (giảm ${product.productDiscount}%)` : ''}`;
  } catch (error) {
    console.error('Lỗi khi lấy thông tin sản phẩm:', error);
    return 'Đã xảy ra lỗi khi lấy thông tin sản phẩm.';
  }
};

// Xử lý yêu cầu về giá sản phẩm
const handleProductPrice = async (productId) => {
  try {
    await connectToDatabase();
    const product = await Product.findById(productId);

    if (!product) {
      return 'Không tìm thấy thông tin sản phẩm này.';
    }

    let priceMessage = `Giá của sản phẩm "${product.productName}" là ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.productPrice)}`;

    if (product.productDiscount && product.productDiscount > 0) {
      const discountedPrice = product.productPrice * (1 - product.productDiscount / 100);
      priceMessage += ` (Đã giảm ${product.productDiscount}%, giá gốc: ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.productPrice)})`;
    }

    return priceMessage;
  } catch (error) {
    console.error('Lỗi khi lấy giá sản phẩm:', error);
    return 'Đã xảy ra lỗi khi lấy thông tin giá sản phẩm.';
  }
};

// Xử lý yêu cầu về xuất xứ sản phẩm
const handleProductOrigin = async (productId) => {
  try {
    await connectToDatabase();
    const product = await Product.findById(productId);

    if (!product) {
      return 'Không tìm thấy thông tin sản phẩm này.';
    }

    if (product.origin) {
      return `Xuất xứ của sản phẩm "${product.productName}" là: ${product.origin}`;
    } else {
      // Sử dụng helper để sinh thông tin xuất xứ
      return productHelper.generateOrigin(product);
    }
  } catch (error) {
    console.error('Lỗi khi lấy xuất xứ sản phẩm:', error);
    return 'Đã xảy ra lỗi khi lấy thông tin xuất xứ sản phẩm.';
  }
};

// Xử lý yêu cầu về công dụng sản phẩm
const handleProductUsage = async (productId) => {
  try {
    await connectToDatabase();
    const product = await Product.findById(productId);

    if (!product) {
      return 'Không tìm thấy thông tin sản phẩm này.';
    }

    // Sử dụng helper để sinh công dụng sản phẩm
    return productHelper.generateProductUsage(product);
  } catch (error) {
    console.error('Lỗi khi lấy công dụng sản phẩm:', error);
    return 'Đã xảy ra lỗi khi lấy thông tin công dụng sản phẩm.';
  }
};

// Xử lý yêu cầu về cách sử dụng sản phẩm
const handleHowToUse = async (productId) => {
  try {
    await connectToDatabase();
    const product = await Product.findById(productId);

    if (!product) {
      return 'Không tìm thấy thông tin sản phẩm này.';
    }

    // Sử dụng helper để sinh cách sử dụng sản phẩm
    return productHelper.generateHowToUse(product);
  } catch (error) {
    console.error('Lỗi khi lấy cách sử dụng sản phẩm:', error);
    return 'Đã xảy ra lỗi khi lấy thông tin cách sử dụng sản phẩm.';
  }
};

// Xử lý yêu cầu về thành phần sản phẩm
const handleIngredients = async (productId) => {
  try {
    await connectToDatabase();
    const product = await Product.findById(productId);

    if (!product) {
      return 'Không tìm thấy thông tin sản phẩm này.';
    }

    // Sử dụng helper để sinh thông tin thành phần
    return productHelper.generateIngredients(product);
  } catch (error) {
    console.error('Lỗi khi lấy thành phần sản phẩm:', error);
    return 'Đã xảy ra lỗi khi lấy thông tin thành phần sản phẩm.';
  }
};

// Xử lý yêu cầu về các sản phẩm liên quan
const handleRelatedProducts = async (productId) => {
  try {
    await connectToDatabase();
    const product = await Product.findById(productId);

    if (!product) {
      return 'Không tìm thấy thông tin sản phẩm này.';
    }

    // Tìm các sản phẩm cùng danh mục
    const relatedProducts = await Product.find({
      productCategory: product.productCategory,
      _id: { $ne: productId }
    }).limit(5);

    if (relatedProducts.length === 0) {
      return `Hiện không có sản phẩm nào tương tự với "${product.productName}".`;
    }

    // Thay đổi trả về đối tượng có chứa danh sách sản phẩm thay vì chuỗi text
    return {
      type: 'relatedProducts',
      text: `Các sản phẩm tương tự với "${product.productName}":`,
      products: relatedProducts
    };
  } catch (error) {
    console.error('Lỗi khi lấy sản phẩm liên quan:', error);
    return 'Đã xảy ra lỗi khi lấy thông tin sản phẩm liên quan.';
  }
};

// Xử lý yêu cầu về các sản phẩm đắt nhất
const handleMostExpensiveProduct = async (productId) => {
  try {
    await connectToDatabase();
    const product = await Product.findById(productId);

    if (!product) {
      return 'Không tìm thấy thông tin sản phẩm này.';
    }

    // Tìm các sản phẩm đắt nhất trong cùng danh mục
    const mostExpensiveProducts = await Product.find({
      productCategory: product.productCategory
    }).sort({ productPrice: -1 }).limit(5);

    if (mostExpensiveProducts.length === 0) {
      return `Không tìm thấy sản phẩm nào trong danh mục của "${product.productName}".`;
    }

    let response = `Các sản phẩm cao cấp nhất trong danh mục của "${product.productName}":\n\n`;

    mostExpensiveProducts.forEach((item, index) => {
      response += `${index + 1}. ${item.productName} - ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(item.productPrice)}\n`;
    });

    return response;
  } catch (error) {
    console.error('Lỗi khi lấy sản phẩm đắt nhất:', error);
    return 'Đã xảy ra lỗi khi lấy thông tin sản phẩm đắt nhất.';
  }
};

// Xử lý yêu cầu về các sản phẩm rẻ nhất
const handleCheapestProduct = async (productId) => {
  try {
    await connectToDatabase();
    const product = await Product.findById(productId);

    if (!product) {
      return 'Không tìm thấy thông tin sản phẩm này.';
    }

    // Tìm các sản phẩm rẻ nhất trong cùng danh mục
    const cheapestProducts = await Product.find({
      productCategory: product.productCategory,
      productPrice: { $gt: 0 } // Đảm bảo giá lớn hơn 0
    }).sort({ productPrice: 1 }).limit(5);

    if (cheapestProducts.length === 0) {
      return `Không tìm thấy sản phẩm nào trong danh mục của "${product.productName}".`;
    }

    let response = `Các sản phẩm giá rẻ nhất trong danh mục của "${product.productName}":\n\n`;

    cheapestProducts.forEach((item, index) => {
      response += `${index + 1}. ${item.productName} - ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(item.productPrice)}\n`;
    });

    return response;
  } catch (error) {
    console.error('Lỗi khi lấy sản phẩm rẻ nhất:', error);
    return 'Đã xảy ra lỗi khi lấy thông tin sản phẩm rẻ nhất.';
  }
};

module.exports = {
  handleProductInfo,
  handleProductPrice,
  handleProductOrigin,
  handleProductUsage,
  handleHowToUse,
  handleIngredients,
  handleRelatedProducts,
  handleMostExpensiveProduct,
  handleCheapestProduct
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9kdWN0IiwicmVxdWlyZSIsImNvbm5lY3RUb0RhdGFiYXNlIiwiT2JqZWN0SWQiLCJwcm9kdWN0SGVscGVyIiwiaGFuZGxlUHJvZHVjdEluZm8iLCJwcm9kdWN0SWQiLCJwcm9kdWN0IiwiZmluZEJ5SWQiLCJwcm9kdWN0TmFtZSIsInByb2R1Y3RJbmZvIiwiSW50bCIsIk51bWJlckZvcm1hdCIsInN0eWxlIiwiY3VycmVuY3kiLCJmb3JtYXQiLCJwcm9kdWN0UHJpY2UiLCJwcm9kdWN0RGlzY291bnQiLCJlcnJvciIsImNvbnNvbGUiLCJoYW5kbGVQcm9kdWN0UHJpY2UiLCJwcmljZU1lc3NhZ2UiLCJkaXNjb3VudGVkUHJpY2UiLCJoYW5kbGVQcm9kdWN0T3JpZ2luIiwib3JpZ2luIiwiZ2VuZXJhdGVPcmlnaW4iLCJoYW5kbGVQcm9kdWN0VXNhZ2UiLCJnZW5lcmF0ZVByb2R1Y3RVc2FnZSIsImhhbmRsZUhvd1RvVXNlIiwiZ2VuZXJhdGVIb3dUb1VzZSIsImhhbmRsZUluZ3JlZGllbnRzIiwiZ2VuZXJhdGVJbmdyZWRpZW50cyIsImhhbmRsZVJlbGF0ZWRQcm9kdWN0cyIsInJlbGF0ZWRQcm9kdWN0cyIsImZpbmQiLCJwcm9kdWN0Q2F0ZWdvcnkiLCJfaWQiLCIkbmUiLCJsaW1pdCIsImxlbmd0aCIsInR5cGUiLCJ0ZXh0IiwicHJvZHVjdHMiLCJoYW5kbGVNb3N0RXhwZW5zaXZlUHJvZHVjdCIsIm1vc3RFeHBlbnNpdmVQcm9kdWN0cyIsInNvcnQiLCJyZXNwb25zZSIsImZvckVhY2giLCJpdGVtIiwiaW5kZXgiLCJoYW5kbGVDaGVhcGVzdFByb2R1Y3QiLCJjaGVhcGVzdFByb2R1Y3RzIiwiJGd0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jaGF0Ym90L2hhbmRsZXJzL3Byb2R1Y3RIYW5kbGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQcm9kdWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kZWxzL1Byb2R1Y3QnKTtcclxuY29uc3QgeyBjb25uZWN0VG9EYXRhYmFzZSB9ID0gcmVxdWlyZSgnLi4vLi4vY29uZmlnL2RiJyk7XHJcbmNvbnN0IHsgT2JqZWN0SWQgfSA9IHJlcXVpcmUoJ21vbmdvZGInKTtcclxuY29uc3QgcHJvZHVjdEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvcHJvZHVjdEhlbHBlcicpO1xyXG5cclxuLy8gWOG7rSBsw70gecOqdSBj4bqndSB24buBIHRow7RuZyB0aW4gc+G6o24gcGjhuqltXHJcbmNvbnN0IGhhbmRsZVByb2R1Y3RJbmZvID0gYXN5bmMgKHByb2R1Y3RJZCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCBjb25uZWN0VG9EYXRhYmFzZSgpO1xyXG4gICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IFByb2R1Y3QuZmluZEJ5SWQocHJvZHVjdElkKTtcclxuICAgIFxyXG4gICAgaWYgKCFwcm9kdWN0KSB7XHJcbiAgICAgIHJldHVybiAnS2jDtG5nIHTDrG0gdGjhuqV5IHRow7RuZyB0aW4gc+G6o24gcGjhuqltIG7DoHkuJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGAke3Byb2R1Y3QucHJvZHVjdE5hbWV9IC0gJHtwcm9kdWN0LnByb2R1Y3RJbmZvIHx8ICdLaMO0bmcgY8OzIHRow7RuZyB0aW4gY2hpIHRp4bq/dC4nfVxcblxcbkdpw6E6ICR7bmV3IEludGwuTnVtYmVyRm9ybWF0KCd2aS1WTicsIHsgc3R5bGU6ICdjdXJyZW5jeScsIGN1cnJlbmN5OiAnVk5EJyB9KS5mb3JtYXQocHJvZHVjdC5wcm9kdWN0UHJpY2UpfSR7cHJvZHVjdC5wcm9kdWN0RGlzY291bnQgPyBgIChnaeG6o20gJHtwcm9kdWN0LnByb2R1Y3REaXNjb3VudH0lKWAgOiAnJ31gO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdM4buXaSBraGkgbOG6pXkgdGjDtG5nIHRpbiBz4bqjbiBwaOG6qW06JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuICfEkMOjIHjhuqN5IHJhIGzhu5dpIGtoaSBs4bqleSB0aMO0bmcgdGluIHPhuqNuIHBo4bqpbS4nO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIFjhu60gbMO9IHnDqnUgY+G6p3UgduG7gSBnacOhIHPhuqNuIHBo4bqpbVxyXG5jb25zdCBoYW5kbGVQcm9kdWN0UHJpY2UgPSBhc3luYyAocHJvZHVjdElkKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IGNvbm5lY3RUb0RhdGFiYXNlKCk7XHJcbiAgICBjb25zdCBwcm9kdWN0ID0gYXdhaXQgUHJvZHVjdC5maW5kQnlJZChwcm9kdWN0SWQpO1xyXG4gICAgXHJcbiAgICBpZiAoIXByb2R1Y3QpIHtcclxuICAgICAgcmV0dXJuICdLaMO0bmcgdMOsbSB0aOG6pXkgdGjDtG5nIHRpbiBz4bqjbiBwaOG6qW0gbsOgeS4nO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsZXQgcHJpY2VNZXNzYWdlID0gYEdpw6EgY+G7p2Egc+G6o24gcGjhuqltIFwiJHtwcm9kdWN0LnByb2R1Y3ROYW1lfVwiIGzDoCAke25ldyBJbnRsLk51bWJlckZvcm1hdCgndmktVk4nLCB7IHN0eWxlOiAnY3VycmVuY3knLCBjdXJyZW5jeTogJ1ZORCcgfSkuZm9ybWF0KHByb2R1Y3QucHJvZHVjdFByaWNlKX1gO1xyXG4gICAgXHJcbiAgICBpZiAocHJvZHVjdC5wcm9kdWN0RGlzY291bnQgJiYgcHJvZHVjdC5wcm9kdWN0RGlzY291bnQgPiAwKSB7XHJcbiAgICAgIGNvbnN0IGRpc2NvdW50ZWRQcmljZSA9IHByb2R1Y3QucHJvZHVjdFByaWNlICogKDEgLSBwcm9kdWN0LnByb2R1Y3REaXNjb3VudCAvIDEwMCk7XHJcbiAgICAgIHByaWNlTWVzc2FnZSArPSBgICjEkMOjIGdp4bqjbSAke3Byb2R1Y3QucHJvZHVjdERpc2NvdW50fSUsIGdpw6EgZ+G7kWM6ICR7bmV3IEludGwuTnVtYmVyRm9ybWF0KCd2aS1WTicsIHsgc3R5bGU6ICdjdXJyZW5jeScsIGN1cnJlbmN5OiAnVk5EJyB9KS5mb3JtYXQocHJvZHVjdC5wcm9kdWN0UHJpY2UpfSlgO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gcHJpY2VNZXNzYWdlO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdM4buXaSBraGkgbOG6pXkgZ2nDoSBz4bqjbiBwaOG6qW06JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuICfEkMOjIHjhuqN5IHJhIGzhu5dpIGtoaSBs4bqleSB0aMO0bmcgdGluIGdpw6Egc+G6o24gcGjhuqltLic7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gWOG7rSBsw70gecOqdSBj4bqndSB24buBIHh14bqldCB44bupIHPhuqNuIHBo4bqpbVxyXG5jb25zdCBoYW5kbGVQcm9kdWN0T3JpZ2luID0gYXN5bmMgKHByb2R1Y3RJZCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCBjb25uZWN0VG9EYXRhYmFzZSgpO1xyXG4gICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IFByb2R1Y3QuZmluZEJ5SWQocHJvZHVjdElkKTtcclxuICAgIFxyXG4gICAgaWYgKCFwcm9kdWN0KSB7XHJcbiAgICAgIHJldHVybiAnS2jDtG5nIHTDrG0gdGjhuqV5IHRow7RuZyB0aW4gc+G6o24gcGjhuqltIG7DoHkuJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHByb2R1Y3Qub3JpZ2luKSB7XHJcbiAgICAgIHJldHVybiBgWHXhuqV0IHjhu6kgY+G7p2Egc+G6o24gcGjhuqltIFwiJHtwcm9kdWN0LnByb2R1Y3ROYW1lfVwiIGzDoDogJHtwcm9kdWN0Lm9yaWdpbn1gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gU+G7rSBk4bulbmcgaGVscGVyIMSR4buDIHNpbmggdGjDtG5nIHRpbiB4deG6pXQgeOG7qVxyXG4gICAgICByZXR1cm4gcHJvZHVjdEhlbHBlci5nZW5lcmF0ZU9yaWdpbihwcm9kdWN0KTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignTOG7l2kga2hpIGzhuqV5IHh14bqldCB44bupIHPhuqNuIHBo4bqpbTonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gJ8SQw6MgeOG6o3kgcmEgbOG7l2kga2hpIGzhuqV5IHRow7RuZyB0aW4geHXhuqV0IHjhu6kgc+G6o24gcGjhuqltLic7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gWOG7rSBsw70gecOqdSBj4bqndSB24buBIGPDtG5nIGThu6VuZyBz4bqjbiBwaOG6qW1cclxuY29uc3QgaGFuZGxlUHJvZHVjdFVzYWdlID0gYXN5bmMgKHByb2R1Y3RJZCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCBjb25uZWN0VG9EYXRhYmFzZSgpO1xyXG4gICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IFByb2R1Y3QuZmluZEJ5SWQocHJvZHVjdElkKTtcclxuICAgIFxyXG4gICAgaWYgKCFwcm9kdWN0KSB7XHJcbiAgICAgIHJldHVybiAnS2jDtG5nIHTDrG0gdGjhuqV5IHRow7RuZyB0aW4gc+G6o24gcGjhuqltIG7DoHkuJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gU+G7rSBk4bulbmcgaGVscGVyIMSR4buDIHNpbmggY8O0bmcgZOG7pW5nIHPhuqNuIHBo4bqpbVxyXG4gICAgcmV0dXJuIHByb2R1Y3RIZWxwZXIuZ2VuZXJhdGVQcm9kdWN0VXNhZ2UocHJvZHVjdCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0zhu5dpIGtoaSBs4bqleSBjw7RuZyBk4bulbmcgc+G6o24gcGjhuqltOicsIGVycm9yKTtcclxuICAgIHJldHVybiAnxJDDoyB44bqjeSByYSBs4buXaSBraGkgbOG6pXkgdGjDtG5nIHRpbiBjw7RuZyBk4bulbmcgc+G6o24gcGjhuqltLic7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gWOG7rSBsw70gecOqdSBj4bqndSB24buBIGPDoWNoIHPhu60gZOG7pW5nIHPhuqNuIHBo4bqpbVxyXG5jb25zdCBoYW5kbGVIb3dUb1VzZSA9IGFzeW5jIChwcm9kdWN0SWQpID0+IHtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgY29ubmVjdFRvRGF0YWJhc2UoKTtcclxuICAgIGNvbnN0IHByb2R1Y3QgPSBhd2FpdCBQcm9kdWN0LmZpbmRCeUlkKHByb2R1Y3RJZCk7XHJcbiAgICBcclxuICAgIGlmICghcHJvZHVjdCkge1xyXG4gICAgICByZXR1cm4gJ0tow7RuZyB0w6xtIHRo4bqleSB0aMO0bmcgdGluIHPhuqNuIHBo4bqpbSBuw6B5Lic7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFPhu60gZOG7pW5nIGhlbHBlciDEkeG7gyBzaW5oIGPDoWNoIHPhu60gZOG7pW5nIHPhuqNuIHBo4bqpbVxyXG4gICAgcmV0dXJuIHByb2R1Y3RIZWxwZXIuZ2VuZXJhdGVIb3dUb1VzZShwcm9kdWN0KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignTOG7l2kga2hpIGzhuqV5IGPDoWNoIHPhu60gZOG7pW5nIHPhuqNuIHBo4bqpbTonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gJ8SQw6MgeOG6o3kgcmEgbOG7l2kga2hpIGzhuqV5IHRow7RuZyB0aW4gY8OhY2ggc+G7rSBk4bulbmcgc+G6o24gcGjhuqltLic7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gWOG7rSBsw70gecOqdSBj4bqndSB24buBIHRow6BuaCBwaOG6p24gc+G6o24gcGjhuqltXHJcbmNvbnN0IGhhbmRsZUluZ3JlZGllbnRzID0gYXN5bmMgKHByb2R1Y3RJZCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCBjb25uZWN0VG9EYXRhYmFzZSgpO1xyXG4gICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IFByb2R1Y3QuZmluZEJ5SWQocHJvZHVjdElkKTtcclxuICAgIFxyXG4gICAgaWYgKCFwcm9kdWN0KSB7XHJcbiAgICAgIHJldHVybiAnS2jDtG5nIHTDrG0gdGjhuqV5IHRow7RuZyB0aW4gc+G6o24gcGjhuqltIG7DoHkuJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gU+G7rSBk4bulbmcgaGVscGVyIMSR4buDIHNpbmggdGjDtG5nIHRpbiB0aMOgbmggcGjhuqduXHJcbiAgICByZXR1cm4gcHJvZHVjdEhlbHBlci5nZW5lcmF0ZUluZ3JlZGllbnRzKHByb2R1Y3QpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdM4buXaSBraGkgbOG6pXkgdGjDoG5oIHBo4bqnbiBz4bqjbiBwaOG6qW06JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuICfEkMOjIHjhuqN5IHJhIGzhu5dpIGtoaSBs4bqleSB0aMO0bmcgdGluIHRow6BuaCBwaOG6p24gc+G6o24gcGjhuqltLic7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gWOG7rSBsw70gecOqdSBj4bqndSB24buBIGPDoWMgc+G6o24gcGjhuqltIGxpw6puIHF1YW5cclxuY29uc3QgaGFuZGxlUmVsYXRlZFByb2R1Y3RzID0gYXN5bmMgKHByb2R1Y3RJZCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCBjb25uZWN0VG9EYXRhYmFzZSgpO1xyXG4gICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IFByb2R1Y3QuZmluZEJ5SWQocHJvZHVjdElkKTtcclxuICAgIFxyXG4gICAgaWYgKCFwcm9kdWN0KSB7XHJcbiAgICAgIHJldHVybiAnS2jDtG5nIHTDrG0gdGjhuqV5IHRow7RuZyB0aW4gc+G6o24gcGjhuqltIG7DoHkuJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gVMOsbSBjw6FjIHPhuqNuIHBo4bqpbSBjw7luZyBkYW5oIG3hu6VjXHJcbiAgICBjb25zdCByZWxhdGVkUHJvZHVjdHMgPSBhd2FpdCBQcm9kdWN0LmZpbmQoe1xyXG4gICAgICBwcm9kdWN0Q2F0ZWdvcnk6IHByb2R1Y3QucHJvZHVjdENhdGVnb3J5LFxyXG4gICAgICBfaWQ6IHsgJG5lOiBwcm9kdWN0SWQgfVxyXG4gICAgfSkubGltaXQoNSk7XHJcbiAgICBcclxuICAgIGlmIChyZWxhdGVkUHJvZHVjdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBgSGnhu4duIGtow7RuZyBjw7Mgc+G6o24gcGjhuqltIG7DoG8gdMawxqFuZyB04buxIHbhu5tpIFwiJHtwcm9kdWN0LnByb2R1Y3ROYW1lfVwiLmA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFRoYXkgxJHhu5VpIHRy4bqjIHbhu4EgxJHhu5FpIHTGsOG7o25nIGPDsyBjaOG7qWEgZGFuaCBzw6FjaCBz4bqjbiBwaOG6qW0gdGhheSB2w6wgY2h14buXaSB0ZXh0XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiAncmVsYXRlZFByb2R1Y3RzJyxcclxuICAgICAgdGV4dDogYEPDoWMgc+G6o24gcGjhuqltIHTGsMahbmcgdOG7sSB24bubaSBcIiR7cHJvZHVjdC5wcm9kdWN0TmFtZX1cIjpgLFxyXG4gICAgICBwcm9kdWN0czogcmVsYXRlZFByb2R1Y3RzXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdM4buXaSBraGkgbOG6pXkgc+G6o24gcGjhuqltIGxpw6puIHF1YW46JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuICfEkMOjIHjhuqN5IHJhIGzhu5dpIGtoaSBs4bqleSB0aMO0bmcgdGluIHPhuqNuIHBo4bqpbSBsacOqbiBxdWFuLic7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gWOG7rSBsw70gecOqdSBj4bqndSB24buBIGPDoWMgc+G6o24gcGjhuqltIMSR4bqvdCBuaOG6pXRcclxuY29uc3QgaGFuZGxlTW9zdEV4cGVuc2l2ZVByb2R1Y3QgPSBhc3luYyAocHJvZHVjdElkKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IGNvbm5lY3RUb0RhdGFiYXNlKCk7XHJcbiAgICBjb25zdCBwcm9kdWN0ID0gYXdhaXQgUHJvZHVjdC5maW5kQnlJZChwcm9kdWN0SWQpO1xyXG4gICAgXHJcbiAgICBpZiAoIXByb2R1Y3QpIHtcclxuICAgICAgcmV0dXJuICdLaMO0bmcgdMOsbSB0aOG6pXkgdGjDtG5nIHRpbiBz4bqjbiBwaOG6qW0gbsOgeS4nO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBUw6xtIGPDoWMgc+G6o24gcGjhuqltIMSR4bqvdCBuaOG6pXQgdHJvbmcgY8O5bmcgZGFuaCBt4bulY1xyXG4gICAgY29uc3QgbW9zdEV4cGVuc2l2ZVByb2R1Y3RzID0gYXdhaXQgUHJvZHVjdC5maW5kKHtcclxuICAgICAgcHJvZHVjdENhdGVnb3J5OiBwcm9kdWN0LnByb2R1Y3RDYXRlZ29yeVxyXG4gICAgfSkuc29ydCh7IHByb2R1Y3RQcmljZTogLTEgfSkubGltaXQoNSk7XHJcbiAgICBcclxuICAgIGlmIChtb3N0RXhwZW5zaXZlUHJvZHVjdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBgS2jDtG5nIHTDrG0gdGjhuqV5IHPhuqNuIHBo4bqpbSBuw6BvIHRyb25nIGRhbmggbeG7pWMgY+G7p2EgXCIke3Byb2R1Y3QucHJvZHVjdE5hbWV9XCIuYDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgbGV0IHJlc3BvbnNlID0gYEPDoWMgc+G6o24gcGjhuqltIGNhbyBj4bqlcCBuaOG6pXQgdHJvbmcgZGFuaCBt4bulYyBj4bunYSBcIiR7cHJvZHVjdC5wcm9kdWN0TmFtZX1cIjpcXG5cXG5gO1xyXG4gICAgXHJcbiAgICBtb3N0RXhwZW5zaXZlUHJvZHVjdHMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgcmVzcG9uc2UgKz0gYCR7aW5kZXggKyAxfS4gJHtpdGVtLnByb2R1Y3ROYW1lfSAtICR7bmV3IEludGwuTnVtYmVyRm9ybWF0KCd2aS1WTicsIHsgc3R5bGU6ICdjdXJyZW5jeScsIGN1cnJlbmN5OiAnVk5EJyB9KS5mb3JtYXQoaXRlbS5wcm9kdWN0UHJpY2UpfVxcbmA7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdM4buXaSBraGkgbOG6pXkgc+G6o24gcGjhuqltIMSR4bqvdCBuaOG6pXQ6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuICfEkMOjIHjhuqN5IHJhIGzhu5dpIGtoaSBs4bqleSB0aMO0bmcgdGluIHPhuqNuIHBo4bqpbSDEkeG6r3QgbmjhuqV0Lic7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gWOG7rSBsw70gecOqdSBj4bqndSB24buBIGPDoWMgc+G6o24gcGjhuqltIHLhursgbmjhuqV0XHJcbmNvbnN0IGhhbmRsZUNoZWFwZXN0UHJvZHVjdCA9IGFzeW5jIChwcm9kdWN0SWQpID0+IHtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgY29ubmVjdFRvRGF0YWJhc2UoKTtcclxuICAgIGNvbnN0IHByb2R1Y3QgPSBhd2FpdCBQcm9kdWN0LmZpbmRCeUlkKHByb2R1Y3RJZCk7XHJcbiAgICBcclxuICAgIGlmICghcHJvZHVjdCkge1xyXG4gICAgICByZXR1cm4gJ0tow7RuZyB0w6xtIHRo4bqleSB0aMO0bmcgdGluIHPhuqNuIHBo4bqpbSBuw6B5Lic7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFTDrG0gY8OhYyBz4bqjbiBwaOG6qW0gcuG6uyBuaOG6pXQgdHJvbmcgY8O5bmcgZGFuaCBt4bulY1xyXG4gICAgY29uc3QgY2hlYXBlc3RQcm9kdWN0cyA9IGF3YWl0IFByb2R1Y3QuZmluZCh7XHJcbiAgICAgIHByb2R1Y3RDYXRlZ29yeTogcHJvZHVjdC5wcm9kdWN0Q2F0ZWdvcnksXHJcbiAgICAgIHByb2R1Y3RQcmljZTogeyAkZ3Q6IDAgfSAvLyDEkOG6o20gYuG6o28gZ2nDoSBs4bubbiBoxqFuIDBcclxuICAgIH0pLnNvcnQoeyBwcm9kdWN0UHJpY2U6IDEgfSkubGltaXQoNSk7XHJcbiAgICBcclxuICAgIGlmIChjaGVhcGVzdFByb2R1Y3RzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gYEtow7RuZyB0w6xtIHRo4bqleSBz4bqjbiBwaOG6qW0gbsOgbyB0cm9uZyBkYW5oIG3hu6VjIGPhu6dhIFwiJHtwcm9kdWN0LnByb2R1Y3ROYW1lfVwiLmA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGxldCByZXNwb25zZSA9IGBDw6FjIHPhuqNuIHBo4bqpbSBnacOhIHLhursgbmjhuqV0IHRyb25nIGRhbmggbeG7pWMgY+G7p2EgXCIke3Byb2R1Y3QucHJvZHVjdE5hbWV9XCI6XFxuXFxuYDtcclxuICAgIFxyXG4gICAgY2hlYXBlc3RQcm9kdWN0cy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICByZXNwb25zZSArPSBgJHtpbmRleCArIDF9LiAke2l0ZW0ucHJvZHVjdE5hbWV9IC0gJHtuZXcgSW50bC5OdW1iZXJGb3JtYXQoJ3ZpLVZOJywgeyBzdHlsZTogJ2N1cnJlbmN5JywgY3VycmVuY3k6ICdWTkQnIH0pLmZvcm1hdChpdGVtLnByb2R1Y3RQcmljZSl9XFxuYDtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0zhu5dpIGtoaSBs4bqleSBz4bqjbiBwaOG6qW0gcuG6uyBuaOG6pXQ6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuICfEkMOjIHjhuqN5IHJhIGzhu5dpIGtoaSBs4bqleSB0aMO0bmcgdGluIHPhuqNuIHBo4bqpbSBy4bq7IG5o4bqldC4nO1xyXG4gIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGhhbmRsZVByb2R1Y3RJbmZvLFxyXG4gIGhhbmRsZVByb2R1Y3RQcmljZSxcclxuICBoYW5kbGVQcm9kdWN0T3JpZ2luLFxyXG4gIGhhbmRsZVByb2R1Y3RVc2FnZSxcclxuICBoYW5kbGVIb3dUb1VzZSxcclxuICBoYW5kbGVJbmdyZWRpZW50cyxcclxuICBoYW5kbGVSZWxhdGVkUHJvZHVjdHMsXHJcbiAgaGFuZGxlTW9zdEV4cGVuc2l2ZVByb2R1Y3QsXHJcbiAgaGFu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