"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));
var _paymentConfig = require("../config/paymentConfig.js");
var _qrcode = _interopRequireDefault(require("qrcode"));
var _crypto = _interopRequireDefault(require("crypto"));
var _dotenv = _interopRequireDefault(require("dotenv"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };} /* eslint-disable no-unused-vars */ /* eslint-disable no-undef */

_dotenv.default.config();

// Thêm biến môi trường cho domain
const isDevelopment = process.env.NODE_ENV !== 'production';
const SITE_CONFIG = {
  baseUrl: isDevelopment ? "http://localhost:3000" : "https://quanlythucpham.vercel.app",
  apiUrl: isDevelopment ? "http://localhost:8080" : "https://quanlythucpham-azf6.vercel.app"
};

class PaymentService {
  // SePay Payment
  static async createSePayPayment(orderId, amount, orderInfo, customRedirectUrl = null) {
    try {
      // Cấu hình endpoints callback
      // Sử dụng customRedirectUrl từ client nếu có, ngược lại dùng URL mặc định
      const returnUrl = customRedirectUrl || `${SITE_CONFIG.baseUrl}/payment-result`;

      // Ưu tiên sử dụng NGROK_URL nếu có (cho môi trường phát triển với ngrok)
      const ngrokUrl = process.env.NGROK_URL;

      // Sử dụng đường dẫn chính xác của API
      const apiBaseUrl = ngrokUrl || (isDevelopment ?
      "http://localhost:8080" :
      "https://quanlythucpham-azf6.vercel.app");

      // Đường dẫn webhook SePay chính xác
      const notifyUrl = `${apiBaseUrl}/api/payments/webhook/bank`;

      const requestData = {
        merchantId: _paymentConfig.SEPAY.merchantId,
        orderId: orderId.toString(),
        amount: parseInt(amount),
        orderInfo: orderInfo,
        returnUrl: `${returnUrl}${returnUrl.includes('?') ? '&' : '?'}status=success&amount=${amount}`,
        notifyUrl: notifyUrl,
        expireTime: _paymentConfig.SEPAY.qrExpireTime // Thêm thời gian hết hạn từ config
      };

      // Gọi API SePay thực từ tệp .env
      const response = await _axios.default.post(
        process.env.SEPAY_API_URL,
        requestData,
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${process.env.SEPAY_API_TOKEN}`
          },
          timeout: 30000 // 30 giây
        }
      );

      if (response.data && response.data.code === '00') {
        // Tạo QR code cho URL thanh toán
        const qrCodeDataURL = await this.generateQRCode(response.data.data);

        return {
          code: response.data.code,
          message: response.data.message,
          data: response.data.data,
          qr_code: qrCodeDataURL
        };
      } else {var _response$data;
        throw new Error(`Phản hồi không thành công từ SePay API: ${((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || 'Unknown error'}`);
      }
    } catch (error) {
      throw new Error(`Lỗi tạo thanh toán SePay: ${error.message}`);
    }
  }

  // Tạo URL thanh toán dự phòng
  static async createFallbackPayment(orderId, amount, orderInfo) {
    try {
      // Sử dụng URL động dựa vào môi trường
      const baseUrl = SITE_CONFIG.baseUrl;

      // URL thanh toán dự phòng
      const fallbackUrl = `${baseUrl}/payment-result?orderId=${orderId}&status=success&amount=${amount}`;

      // Tạo QR code cho URL thanh toán
      const qrCodeDataURL = await this.generateQRCode(fallbackUrl);

      return {
        code: '01', // Dùng code "01" cho thanh toán dự phòng
        message: 'Sử dụng URL thanh toán dự phòng',
        data: fallbackUrl,
        qr_code: qrCodeDataURL
      };
    } catch (error) {
      // Đảm bảo luôn trả về kết quả hợp lệ
      const baseUrl = SITE_CONFIG.baseUrl;
      const emergencyUrl = `${baseUrl}/payment-result?orderId=${orderId}&status=success&amount=${amount}`;

      return {
        code: '01',
        message: 'Sử dụng URL thanh toán dự phòng khẩn cấp',
        data: emergencyUrl,
        qr_code: null
      };
    }
  }

  // Tạo mã QR cho URL thanh toán
  static async generateQRCode(text) {
    try {
      if (!text) {
        return null;
      }

      // Tạo QR code dạng data URL
      const qrCodeDataURL = await _qrcode.default.toDataURL(text, {
        width: 300,
        margin: 2,
        errorCorrectionLevel: 'H'
      });
      return qrCodeDataURL;
    } catch (error) {
      // Tiếp tục mà không ném lỗi - chỉ trả về null nếu không thể tạo QR
      return null;
    }
  }

  // Xử lý callback từ SePay
  static verifySePayCallback(callbackData) {
    try {
      if (!callbackData) {
        return false;
      }

      // Xác thực thông tin callback từ SePay
      const { resultCode, amount, orderId, signature } = callbackData;

      // Kiểm tra các trường bắt buộc
      if (!orderId || !resultCode) {
        return false;
      }

      // Kiểm tra chữ ký nếu SePay cung cấp
      if (signature) {
        // Tạo chuỗi dữ liệu cần xác thực
        const dataToVerify = `${orderId}|${amount}|${resultCode}`;

        // Tạo chữ ký dựa trên secret key SePay
        const expectedSignature = _crypto.default.
        createHmac('sha256', process.env.SEPAY_API_TOKEN).
        update(dataToVerify).
        digest('hex');

        // So sánh chữ ký
        if (signature !== expectedSignature) {
          return false;
        }
      }

      // Nếu không có lỗi và kiểm tra chữ ký thành công, trả về true
      return true;
    } catch (error) {
      // Trong trường hợp có lỗi, trả về false
      return false;
    }
  }

  // Hàm hỗ trợ sắp xếp object
  static sortObject(obj) {
    return Object.keys(obj).sort().reduce((result, key) => {
      result[key] = obj[key];
      return result;
    }, {});
  }

  // Lưu lại lịch sử webhook
  static logWebhook(data) {
    try {
      // Nếu có order_id hoặc orderId, kiểm tra và cập nhật đơn hàng
      const orderId = data.order_id || data.orderId;
      if (orderId) {
        // Trong triển khai thực tế, bạn sẽ lưu webhook vào database
        // Ví dụ: Lưu vào bảng PaymentLogs, WebhookLogs...

        // Lưu trữ tạm thời vào bộ nhớ (chỉ cho phát triển)
        if (!global.webhookHistory) {
          global.webhookHistory = [];
        }

        global.webhookHistory.push({
          timestamp: new Date(),
          orderId: orderId,
          data: data
        });

        // Giới hạn số lượng webhook lưu trong bộ nhớ
        if (global.webhookHistory.length > 100) {
          global.webhookHistory.shift();
        }
      }
    } catch (error) {
      console.error("Error logging webhook:", error);
    }
  }

  // Tạo QR Code thanh toán ngân hàng sử dụng SePay
  static generateBankQRCode(accountNumber, bankCode, amount, description) {
    try {
      // Validate input
      if (!accountNumber || !bankCode) {
        return null;
      }

      // Chuẩn hóa mã ngân hàng để đảm bảo tương thích với Napas 247
      const normalizedBankCode = this.normalizeBankCode(bankCode);

      // Trích xuất orderId từ description
      let orderId = '';
      if (description) {
        const idMatch = description.match(/([a-f0-9]{24})/i);
        if (idMatch && idMatch[1]) {
          orderId = idMatch[1];
        }
      }

      // Tạo nội dung chuyển khoản cực kỳ đơn giản - CHỈ CÓ ID
      // Bỏ qua "TT DH" và các text khác để đảm bảo không có vấn đề khi nhận diện
      const simpleDescription = orderId || description;

      // Tạo URL QR Code với định dạng tương thích Napas 247
      let qrUrl = `https://qr.sepay.vn/img?acc=${accountNumber}&bank=${normalizedBankCode}`;

      // Thêm số tiền nếu có
      if (amount && amount > 0) {
        qrUrl += `&amount=${amount}`;
      }

      // Thêm nội dung chuyển khoản - CHỈ LÀ ID không thêm bất kỳ prefix nào
      qrUrl += `&des=${simpleDescription}`;

      return qrUrl;
    } catch (error) {
      console.error("Lỗi tạo QR code ngân hàng:", error);
      return null;
    }
  }

  // Hàm chuẩn hóa mã ngân hàng cho Napas 247
  static normalizeBankCode(bankCode) {
    // Bảng ánh xạ mã ngân hàng thường gặp sang mã Napas 247
    const bankMapping = {
      'MBBank': 'MB',
      'Techcombank': 'TCB',
      'Vietcombank': 'VCB',
      'VietinBank': 'CTG',
      'BIDV': 'BIDV',
      'Agribank': 'AGR',
      'TPBank': 'TPB',
      'VPBank': 'VPB',
      'ACB': 'ACB',
      'OCB': 'OCB',
      'SHB': 'SHB'
    };

    // Kiểm tra nếu bankCode cần được ánh xạ
    if (bankMapping[bankCode]) {
      return bankMapping[bankCode];
    }

    // Nếu không tìm thấy trong bảng ánh xạ, trả về mã gốc
    return bankCode;
  }
}var _default = exports.default =

PaymentService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXhpb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wYXltZW50Q29uZmlnIiwiX3FyY29kZSIsIl9jcnlwdG8iLCJfZG90ZW52IiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZG90ZW52IiwiY29uZmlnIiwiaXNEZXZlbG9wbWVudCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIlNJVEVfQ09ORklHIiwiYmFzZVVybCIsImFwaVVybCIsIlBheW1lbnRTZXJ2aWNlIiwiY3JlYXRlU2VQYXlQYXltZW50Iiwib3JkZXJJZCIsImFtb3VudCIsIm9yZGVySW5mbyIsImN1c3RvbVJlZGlyZWN0VXJsIiwicmV0dXJuVXJsIiwibmdyb2tVcmwiLCJOR1JPS19VUkwiLCJhcGlCYXNlVXJsIiwibm90aWZ5VXJsIiwicmVxdWVzdERhdGEiLCJtZXJjaGFudElkIiwiU0VQQVkiLCJ0b1N0cmluZyIsInBhcnNlSW50IiwiaW5jbHVkZXMiLCJleHBpcmVUaW1lIiwicXJFeHBpcmVUaW1lIiwicmVzcG9uc2UiLCJheGlvcyIsInBvc3QiLCJTRVBBWV9BUElfVVJMIiwiaGVhZGVycyIsIlNFUEFZX0FQSV9UT0tFTiIsInRpbWVvdXQiLCJkYXRhIiwiY29kZSIsInFyQ29kZURhdGFVUkwiLCJnZW5lcmF0ZVFSQ29kZSIsIm1lc3NhZ2UiLCJxcl9jb2RlIiwiX3Jlc3BvbnNlJGRhdGEiLCJFcnJvciIsImVycm9yIiwiY3JlYXRlRmFsbGJhY2tQYXltZW50IiwiZmFsbGJhY2tVcmwiLCJlbWVyZ2VuY3lVcmwiLCJ0ZXh0IiwiUVJDb2RlIiwidG9EYXRhVVJMIiwid2lkdGgiLCJtYXJnaW4iLCJlcnJvckNvcnJlY3Rpb25MZXZlbCIsInZlcmlmeVNlUGF5Q2FsbGJhY2siLCJjYWxsYmFja0RhdGEiLCJyZXN1bHRDb2RlIiwic2lnbmF0dXJlIiwiZGF0YVRvVmVyaWZ5IiwiZXhwZWN0ZWRTaWduYXR1cmUiLCJjcnlwdG8iLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0Iiwic29ydE9iamVjdCIsIm9iaiIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwicmVkdWNlIiwicmVzdWx0Iiwia2V5IiwibG9nV2ViaG9vayIsIm9yZGVyX2lkIiwiZ2xvYmFsIiwid2ViaG9va0hpc3RvcnkiLCJwdXNoIiwidGltZXN0YW1wIiwiRGF0ZSIsImxlbmd0aCIsInNoaWZ0IiwiY29uc29sZSIsImdlbmVyYXRlQmFua1FSQ29kZSIsImFjY291bnROdW1iZXIiLCJiYW5rQ29kZSIsImRlc2NyaXB0aW9uIiwibm9ybWFsaXplZEJhbmtDb2RlIiwibm9ybWFsaXplQmFua0NvZGUiLCJpZE1hdGNoIiwibWF0Y2giLCJzaW1wbGVEZXNjcmlwdGlvbiIsInFyVXJsIiwiYmFua01hcHBpbmciLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvU2VydmljZXMvcGF5bWVudFNlcnZpY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgU0VQQVkgfSBmcm9tICcuLi9jb25maWcvcGF5bWVudENvbmZpZy5qcyc7XG5pbXBvcnQgUVJDb2RlIGZyb20gJ3FyY29kZSc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XG5cbmRvdGVudi5jb25maWcoKTtcblxuLy8gVGjDqm0gYmnhur9uIG3DtGkgdHLGsOG7nW5nIGNobyBkb21haW5cbmNvbnN0IGlzRGV2ZWxvcG1lbnQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuY29uc3QgU0lURV9DT05GSUcgPSB7XG4gICAgYmFzZVVybDogaXNEZXZlbG9wbWVudCA/IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCIgOiBcImh0dHBzOi8vcXVhbmx5dGh1Y3BoYW0udmVyY2VsLmFwcFwiLFxuICAgIGFwaVVybDogaXNEZXZlbG9wbWVudCA/IFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwXCIgOiBcImh0dHBzOi8vcXVhbmx5dGh1Y3BoYW0tYXpmNi52ZXJjZWwuYXBwXCJcbn07XG5cbmNsYXNzIFBheW1lbnRTZXJ2aWNlIHtcbiAgICAvLyBTZVBheSBQYXltZW50XG4gICAgc3RhdGljIGFzeW5jIGNyZWF0ZVNlUGF5UGF5bWVudChvcmRlcklkLCBhbW91bnQsIG9yZGVySW5mbywgY3VzdG9tUmVkaXJlY3RVcmwgPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBD4bqldSBow6xuaCBlbmRwb2ludHMgY2FsbGJhY2tcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIGN1c3RvbVJlZGlyZWN0VXJsIHThu6sgY2xpZW50IG7hur91IGPDsywgbmfGsOG7o2MgbOG6oWkgZMO5bmcgVVJMIG3hurdjIMSR4buLbmhcbiAgICAgICAgICAgIGNvbnN0IHJldHVyblVybCA9IGN1c3RvbVJlZGlyZWN0VXJsIHx8IGAke1NJVEVfQ09ORklHLmJhc2VVcmx9L3BheW1lbnQtcmVzdWx0YDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gxq91IHRpw6puIHPhu60gZOG7pW5nIE5HUk9LX1VSTCBu4bq/dSBjw7MgKGNobyBtw7RpIHRyxrDhu51uZyBwaMOhdCB0cmnhu4NuIHbhu5tpIG5ncm9rKVxuICAgICAgICAgICAgY29uc3Qgbmdyb2tVcmwgPSBwcm9jZXNzLmVudi5OR1JPS19VUkw7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIMSRxrDhu51uZyBk4bqrbiBjaMOtbmggeMOhYyBj4bunYSBBUElcbiAgICAgICAgICAgIGNvbnN0IGFwaUJhc2VVcmwgPSBuZ3Jva1VybCB8fCAoaXNEZXZlbG9wbWVudCBcbiAgICAgICAgICAgICAgICA/IFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwXCIgXG4gICAgICAgICAgICAgICAgOiBcImh0dHBzOi8vcXVhbmx5dGh1Y3BoYW0tYXpmNi52ZXJjZWwuYXBwXCIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDEkMaw4budbmcgZOG6q24gd2ViaG9vayBTZVBheSBjaMOtbmggeMOhY1xuICAgICAgICAgICAgY29uc3Qgbm90aWZ5VXJsID0gYCR7YXBpQmFzZVVybH0vYXBpL3BheW1lbnRzL3dlYmhvb2svYmFua2A7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3REYXRhID0ge1xuICAgICAgICAgICAgICAgIG1lcmNoYW50SWQ6IFNFUEFZLm1lcmNoYW50SWQsXG4gICAgICAgICAgICAgICAgb3JkZXJJZDogb3JkZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGFtb3VudDogcGFyc2VJbnQoYW1vdW50KSxcbiAgICAgICAgICAgICAgICBvcmRlckluZm86IG9yZGVySW5mbyxcbiAgICAgICAgICAgICAgICByZXR1cm5Vcmw6IGAke3JldHVyblVybH0ke3JldHVyblVybC5pbmNsdWRlcygnPycpID8gJyYnIDogJz8nfXN0YXR1cz1zdWNjZXNzJmFtb3VudD0ke2Ftb3VudH1gLFxuICAgICAgICAgICAgICAgIG5vdGlmeVVybDogbm90aWZ5VXJsLFxuICAgICAgICAgICAgICAgIGV4cGlyZVRpbWU6IFNFUEFZLnFyRXhwaXJlVGltZSAvLyBUaMOqbSB0aOG7nWkgZ2lhbiBo4bq/dCBo4bqhbiB04burIGNvbmZpZ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gR+G7jWkgQVBJIFNlUGF5IHRo4buxYyB04burIHThu4dwIC5lbnZcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5TRVBBWV9BUElfVVJMLFxuICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3Byb2Nlc3MuZW52LlNFUEFZX0FQSV9UT0tFTn1gXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDAwIC8vIDMwIGdpw6J5XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5jb2RlID09PSAnMDAnKSB7XG4gICAgICAgICAgICAgICAgLy8gVOG6oW8gUVIgY29kZSBjaG8gVVJMIHRoYW5oIHRvw6FuXG4gICAgICAgICAgICAgICAgY29uc3QgcXJDb2RlRGF0YVVSTCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVRUkNvZGUocmVzcG9uc2UuZGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiByZXNwb25zZS5kYXRhLmNvZGUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLmRhdGEubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzcG9uc2UuZGF0YS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBxcl9jb2RlOiBxckNvZGVEYXRhVVJMXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQaOG6o24gaOG7k2kga2jDtG5nIHRow6BuaCBjw7RuZyB04burIFNlUGF5IEFQSTogJHtyZXNwb25zZS5kYXRhPy5tZXNzYWdlIHx8ICdVbmtub3duIGVycm9yJ31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTOG7l2kgdOG6oW8gdGhhbmggdG/DoW4gU2VQYXk6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFThuqFvIFVSTCB0aGFuaCB0b8OhbiBk4buxIHBow7JuZ1xuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVGYWxsYmFja1BheW1lbnQob3JkZXJJZCwgYW1vdW50LCBvcmRlckluZm8pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIFVSTCDEkeG7mW5nIGThu7FhIHbDoG8gbcO0aSB0csaw4budbmdcbiAgICAgICAgICAgIGNvbnN0IGJhc2VVcmwgPSBTSVRFX0NPTkZJRy5iYXNlVXJsO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVVJMIHRoYW5oIHRvw6FuIGThu7EgcGjDsm5nXG4gICAgICAgICAgICBjb25zdCBmYWxsYmFja1VybCA9IGAke2Jhc2VVcmx9L3BheW1lbnQtcmVzdWx0P29yZGVySWQ9JHtvcmRlcklkfSZzdGF0dXM9c3VjY2VzcyZhbW91bnQ9JHthbW91bnR9YDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVOG6oW8gUVIgY29kZSBjaG8gVVJMIHRoYW5oIHRvw6FuXG4gICAgICAgICAgICBjb25zdCBxckNvZGVEYXRhVVJMID0gYXdhaXQgdGhpcy5nZW5lcmF0ZVFSQ29kZShmYWxsYmFja1VybCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29kZTogJzAxJywgLy8gRMO5bmcgY29kZSBcIjAxXCIgY2hvIHRoYW5oIHRvw6FuIGThu7EgcGjDsm5nXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1Phu60gZOG7pW5nIFVSTCB0aGFuaCB0b8OhbiBk4buxIHBow7JuZycsXG4gICAgICAgICAgICAgICAgZGF0YTogZmFsbGJhY2tVcmwsIFxuICAgICAgICAgICAgICAgIHFyX2NvZGU6IHFyQ29kZURhdGFVUkxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyDEkOG6o20gYuG6o28gbHXDtG4gdHLhuqMgduG7gSBr4bq/dCBxdeG6oyBo4bujcCBs4buHXG4gICAgICAgICAgICBjb25zdCBiYXNlVXJsID0gU0lURV9DT05GSUcuYmFzZVVybDtcbiAgICAgICAgICAgIGNvbnN0IGVtZXJnZW5jeVVybCA9IGAke2Jhc2VVcmx9L3BheW1lbnQtcmVzdWx0P29yZGVySWQ9JHtvcmRlcklkfSZzdGF0dXM9c3VjY2VzcyZhbW91bnQ9JHthbW91bnR9YDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjb2RlOiAnMDEnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdT4butIGThu6VuZyBVUkwgdGhhbmggdG/DoW4gZOG7sSBwaMOybmcga2jhuqluIGPhuqVwJyxcbiAgICAgICAgICAgICAgICBkYXRhOiBlbWVyZ2VuY3lVcmwsXG4gICAgICAgICAgICAgICAgcXJfY29kZTogbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFThuqFvIG3DoyBRUiBjaG8gVVJMIHRoYW5oIHRvw6FuXG4gICAgc3RhdGljIGFzeW5jIGdlbmVyYXRlUVJDb2RlKHRleHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghdGV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBU4bqhbyBRUiBjb2RlIGThuqFuZyBkYXRhIFVSTFxuICAgICAgICAgICAgY29uc3QgcXJDb2RlRGF0YVVSTCA9IGF3YWl0IFFSQ29kZS50b0RhdGFVUkwodGV4dCwge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAzMDAsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAyLFxuICAgICAgICAgICAgICAgIGVycm9yQ29ycmVjdGlvbkxldmVsOiAnSCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHFyQ29kZURhdGFVUkw7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBUaeG6v3AgdOG7pWMgbcOgIGtow7RuZyBuw6ltIGzhu5dpIC0gY2jhu4kgdHLhuqMgduG7gSBudWxsIG7hur91IGtow7RuZyB0aOG7gyB04bqhbyBRUlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBY4butIGzDvSBjYWxsYmFjayB04burIFNlUGF5XG4gICAgc3RhdGljIHZlcmlmeVNlUGF5Q2FsbGJhY2soY2FsbGJhY2tEYXRhKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWNhbGxiYWNrRGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gWMOhYyB0aOG7sWMgdGjDtG5nIHRpbiBjYWxsYmFjayB04burIFNlUGF5XG4gICAgICAgICAgICBjb25zdCB7IHJlc3VsdENvZGUsIGFtb3VudCwgb3JkZXJJZCwgc2lnbmF0dXJlIH0gPSBjYWxsYmFja0RhdGE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgY8OhYyB0csaw4budbmcgYuG6r3QgYnXhu5ljXG4gICAgICAgICAgICBpZiAoIW9yZGVySWQgfHwgIXJlc3VsdENvZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgY2jhu68ga8O9IG7hur91IFNlUGF5IGN1bmcgY+G6pXBcbiAgICAgICAgICAgIGlmIChzaWduYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAvLyBU4bqhbyBjaHXhu5dpIGThu68gbGnhu4d1IGPhuqduIHjDoWMgdGjhu7FjXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YVRvVmVyaWZ5ID0gYCR7b3JkZXJJZH18JHthbW91bnR9fCR7cmVzdWx0Q29kZX1gO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFThuqFvIGNo4buvIGvDvSBk4buxYSB0csOqbiBzZWNyZXQga2V5IFNlUGF5XG4gICAgICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRTaWduYXR1cmUgPSBjcnlwdG9cbiAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIHByb2Nlc3MuZW52LlNFUEFZX0FQSV9UT0tFTilcbiAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZShkYXRhVG9WZXJpZnkpXG4gICAgICAgICAgICAgICAgICAgIC5kaWdlc3QoJ2hleCcpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFNvIHPDoW5oIGNo4buvIGvDvVxuICAgICAgICAgICAgICAgIGlmIChzaWduYXR1cmUgIT09IGV4cGVjdGVkU2lnbmF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE7hur91IGtow7RuZyBjw7MgbOG7l2kgdsOgIGtp4buDbSB0cmEgY2jhu68ga8O9IHRow6BuaCBjw7RuZywgdHLhuqMgduG7gSB0cnVlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIFRyb25nIHRyxrDhu51uZyBo4bujcCBjw7MgbOG7l2ksIHRy4bqjIHbhu4EgZmFsc2VcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEjDoG0gaOG7lyB0cuG7oyBz4bqvcCB44bq/cCBvYmplY3RcbiAgICBzdGF0aWMgc29ydE9iamVjdChvYmopIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuc29ydCgpLnJlZHVjZSgocmVzdWx0LCBrZXkpID0+IHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LCB7fSk7XG4gICAgfVxuXG4gICAgLy8gTMawdSBs4bqhaSBs4buLY2ggc+G7rSB3ZWJob29rXG4gICAgc3RhdGljIGxvZ1dlYmhvb2soZGF0YSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gTuG6v3UgY8OzIG9yZGVyX2lkIGhv4bq3YyBvcmRlcklkLCBraeG7g20gdHJhIHbDoCBj4bqtcCBuaOG6rXQgxJHGoW4gaMOgbmdcbiAgICAgICAgICAgIGNvbnN0IG9yZGVySWQgPSBkYXRhLm9yZGVyX2lkIHx8IGRhdGEub3JkZXJJZDtcbiAgICAgICAgICAgIGlmIChvcmRlcklkKSB7XG4gICAgICAgICAgICAgICAgLy8gVHJvbmcgdHJp4buDbiBraGFpIHRo4buxYyB04bq/LCBi4bqhbiBz4bq9IGzGsHUgd2ViaG9vayB2w6BvIGRhdGFiYXNlXG4gICAgICAgICAgICAgICAgLy8gVsOtIGThu6U6IEzGsHUgdsOgbyBi4bqjbmcgUGF5bWVudExvZ3MsIFdlYmhvb2tMb2dzLi4uXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gTMawdSB0cuG7ryB04bqhbSB0aOG7nWkgdsOgbyBi4buZIG5o4bubIChjaOG7iSBjaG8gcGjDoXQgdHJp4buDbilcbiAgICAgICAgICAgICAgICBpZiAoIWdsb2JhbC53ZWJob29rSGlzdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWwud2ViaG9va0hpc3RvcnkgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZ2xvYmFsLndlYmhvb2tIaXN0b3J5LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIG9yZGVySWQ6IG9yZGVySWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBHaeG7m2kgaOG6oW4gc+G7kSBsxrDhu6NuZyB3ZWJob29rIGzGsHUgdHJvbmcgYuG7mSBuaOG7m1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwud2ViaG9va0hpc3RvcnkubGVuZ3RoID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC53ZWJob29rSGlzdG9yeS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2dnaW5nIHdlYmhvb2s6XCIsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFThuqFvIFFSIENvZGUgdGhhbmggdG/DoW4gbmfDom4gaMOgbmcgc+G7rSBk4bulbmcgU2VQYXlcbiAgICBzdGF0aWMgZ2VuZXJhdGVCYW5rUVJDb2RlKGFjY291bnROdW1iZXIsIGJhbmtDb2RlLCBhbW91bnQsIGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBpbnB1dFxuICAgICAgICAgICAgaWYgKCFhY2NvdW50TnVtYmVyIHx8ICFiYW5rQ29kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaHXhuqluIGjDs2EgbcOjIG5nw6JuIGjDoG5nIMSR4buDIMSR4bqjbSBi4bqjbyB0xrDGoW5nIHRow61jaCB24bubaSBOYXBhcyAyNDdcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRCYW5rQ29kZSA9IHRoaXMubm9ybWFsaXplQmFua0NvZGUoYmFua0NvZGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUcsOtY2ggeHXhuqV0IG9yZGVySWQgdOG7qyBkZXNjcmlwdGlvblxuICAgICAgICAgICAgbGV0IG9yZGVySWQgPSAnJztcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkTWF0Y2ggPSBkZXNjcmlwdGlvbi5tYXRjaCgvKFthLWYwLTldezI0fSkvaSk7XG4gICAgICAgICAgICAgICAgaWYgKGlkTWF0Y2ggJiYgaWRNYXRjaFsxXSkge1xuICAgICAgICAgICAgICAgICAgICBvcmRlcklkID0gaWRNYXRjaFsxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFThuqFvIG7hu5lpIGR1bmcgY2h1eeG7g24ga2hv4bqjbiBj4buxYyBr4buzIMSRxqFuIGdp4bqjbiAtIENI4buIIEPDkyBJRFxuICAgICAgICAgICAgLy8gQuG7jyBxdWEgXCJUVCBESFwiIHbDoCBjw6FjIHRleHQga2jDoWMgxJHhu4MgxJHhuqNtIGLhuqNvIGtow7RuZyBjw7MgduG6pW4gxJHhu4Ega2hpIG5o4bqtbiBkaeG7h25cbiAgICAgICAgICAgIGNvbnN0IHNpbXBsZURlc2NyaXB0aW9uID0gb3JkZXJJZCB8fCBkZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVOG6oW8gVVJMIFFSIENvZGUgduG7m2kgxJHhu4tuaCBk4bqhbmcgdMawxqFuZyB0aMOtY2ggTmFwYXMgMjQ3XG4gICAgICAgICAgICBsZXQgcXJVcmwgPSBgaHR0cHM6Ly9xci5zZXBheS52bi9pbWc/YWNjPSR7YWNjb3VudE51bWJlcn0mYmFuaz0ke25vcm1hbGl6ZWRCYW5rQ29kZX1gO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUaMOqbSBz4buRIHRp4buBbiBu4bq/dSBjw7NcbiAgICAgICAgICAgIGlmIChhbW91bnQgJiYgYW1vdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIHFyVXJsICs9IGAmYW1vdW50PSR7YW1vdW50fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFRow6ptIG7hu5lpIGR1bmcgY2h1eeG7g24ga2hv4bqjbiAtIENI4buIIEzDgCBJRCBraMO0bmcgdGjDqm0gYuG6pXQga+G7syBwcmVmaXggbsOgb1xuICAgICAgICAgICAgcXJVcmwgKz0gYCZkZXM9JHtzaW1wbGVEZXNjcmlwdGlvbn1gO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gcXJVcmw7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTOG7l2kgdOG6oW8gUVIgY29kZSBuZ8OibiBow6BuZzpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIw6BtIGNodeG6qW4gaMOzYSBtw6MgbmfDom4gaMOgbmcgY2hvIE5hcGFzIDI0N1xuICAgIHN0YXRpYyBub3JtYWxpemVCYW5rQ29kZShiYW5rQ29kZSkge1xuICAgICAgICAvLyBC4bqjbmcgw6FuaCB44bqhIG3DoyBuZ8OibiBow6BuZyB0aMaw4budbmcgZ+G6t3Agc2FuZyBtw6MgTmFwYXMgMjQ3XG4gICAgICAgIGNvbnN0IGJhbmtNYXBwaW5nID0ge1xuICAgICAgICAgICAgJ01CQmFuayc6ICdNQicsXG4gICAgICAgICAgICAnVGVjaGNvbWJhbmsnOiAnVENCJyxcbiAgICAgICAgICAgICdWaWV0Y29tYmFuayc6ICdWQ0InLFxuICAgICAgICAgICAgJ1ZpZXRpbkJhbmsnOiAnQ1RHJyxcbiAgICAgICAgICAgICdCSURWJzogJ0JJRFYnLFxuICAgICAgICAgICAgJ0FncmliYW5rJzogJ0FHUicsXG4gICAgICAgICAgICAnVFBCYW5rJzogJ1RQQicsXG4gICAgICAgICAgICAnVlBCYW5rJzogJ1ZQQicsXG4gICAgICAgICAgICAnQUNCJzogJ0FDQicsXG4gICAgICAgICAgICAnT0NCJzogJ09DQicsXG4gICAgICAgICAgICAnU0hCJzogJ1NIQidcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBLaeG7g20gdHJhIG7hur91IGJhbmtDb2RlIGPhuqduIMSRxrDhu6NjIMOhbmggeOG6oVxuICAgICAgICBpZiAoYmFua01hcHBpbmdbYmFua0NvZGVdKSB7XG4gICAgICAgICAgICByZXR1cm4gYmFua01hcHBpbmdbYmFua0NvZGVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5IHRyb25nIGLhuqNuZyDDoW5oIHjhuqEsIHRy4bqjIHbhu4EgbcOjIGfhu5FjXG4gICAgICAgIHJldHVybiBiYW5rQ29kZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBheW1lbnRTZXJ2aWNlOyJdLCJtYXBwaW5ncyI6Ijs7QUFFQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxPQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUEsWUFBNEIsU0FBQUQsdUJBQUFNLENBQUEsVUFBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUEsS0FONUIsb0NBQ0E7O0FBT0FHLGVBQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUM7O0FBRWY7QUFDQSxNQUFNQyxhQUFhLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxRQUFRLEtBQUssWUFBWTtBQUMzRCxNQUFNQyxXQUFXLEdBQUc7RUFDaEJDLE9BQU8sRUFBRUwsYUFBYSxH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