"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.sendReviewReplyNotification = exports.sendPushNotification = exports.sendOrderStatusNotification = exports.sendNotificationToUser = exports.sendNewProductNotification = exports.sendNewCouponNotification = exports.sendMessageNotification = void 0;

var _webPush = _interopRequireDefault(require("web-push"));
var _dotenv = _interopRequireDefault(require("dotenv"));
var _Register = _interopRequireDefault(require("../Model/Register.js"));
var _notificationModel = _interopRequireDefault(require("../Model/notificationModel.js")); /* eslint-disable no-undef */ /* eslint-disable no-useless-escape */

_dotenv.default.config();

const vapidPublicKey = process.env.VAPID_PUBLIC_KEY;
const vapidPrivateKey = process.env.VAPID_PRIVATE_KEY;

_webPush.default.setVapidDetails(
  "mailto:kit10012003@gmail.com",
  vapidPublicKey,
  vapidPrivateKey
);

const sendPushNotification = async (userId, subscription, payload) => {
  try {
    if (!subscription || !subscription.endpoint)
    return { success: false, message: "Invalid subscription" };

    const notification = new _notificationModel.default({
      userId,
      title: payload.title,
      body: payload.body,
      data: payload.data,
      status: "pending"
    });
    await notification.save();

    const webPushPayload = {
      notification: {
        title: payload.title,
        body: payload.body,
        icon: payload.data?.icon || "/logo192.png",
        badge: "/badge-icon.png",
        vibrate: [100, 50, 100],
        tag: payload.data?.type || "general",
        actions: payload.data?.actions || [
        { action: "view", title: "Xem ngay" }],

        data: {
          ...payload.data,
          dateOfArrival: Date.now(),
          requireInteraction: true,
          renotify: true
        }
      }
    };

    const result = await _webPush.default.sendNotification(
      subscription,
      JSON.stringify(webPushPayload)
    );

    notification.status = "sent";
    await notification.save();

    return { success: true, result };
  } catch (error) {
    await _notificationModel.default.findOneAndUpdate(
      { userId, title: payload.title, body: payload.body, status: "pending" },
      { status: "failed", error: error.message }
    );
    return { success: false, error: error.message };
  }
};exports.sendPushNotification = sendPushNotification;

const sendNotificationToUser = async (userId, payload) => {
  try {
    const user = await _Register.default.findById(userId);
    if (!user) return { success: false, message: "User not found" };

    if (!user.pushSubscriptions || user.pushSubscriptions.length === 0) {
      const notification = new _notificationModel.default({
        userId,
        title: payload.title,
        body: payload.body,
        data: payload.data,
        status: "pending_view"
      });
      await notification.save();
      return {
        success: true,
        message: "Notification saved for in-app display"
      };
    }

    const results = await Promise.all(
      user.pushSubscriptions.map((subscription) =>
      sendPushNotification(userId, subscription, payload)
      )
    );

    const successCount = results.filter((r) => r.success).length;
    return {
      success: successCount > 0,
      message: `Sent to ${successCount}/${user.pushSubscriptions.length} devices`
    };
  } catch (error) {
    return { success: false, error: error.message };
  }
};exports.sendNotificationToUser = sendNotificationToUser;

const sendNewProductNotification = async (product) => {
  try {
    const users = await _Register.default.find({
      pushSubscriptions: { $exists: true, $not: { $size: 0 } }
    });
    if (!users.length) return;

    const payload = {
      title: "Sản phẩm mới!",
      body: `${product.productName} đã được thêm. Giá: ${product.productPrice}đ`,
      data: {
        url: `/san-pham/${product._id}`,
        productId: product._id,
        type: "new_product"
      }
    };

    await Promise.allSettled(
      users.map((user) => sendNotificationToUser(user._id, payload))
    );
    return true;
  } catch (error) {
    console.error("Lỗi khi gửi thông báo sản phẩm mới:", error);
    return false;
  }
};exports.sendNewProductNotification = sendNewProductNotification;

const sendNewCouponNotification = async (coupon) => {
  try {
    const users = await _Register.default.find({
      pushSubscriptions: { $exists: true, $not: { $size: 0 } }
    });
    if (!users.length) return;

    const payload = {
      title: "Mã giảm giá mới!",
      body: `Sử dụng mã ${coupon.code} để được giảm ${
      coupon.type === "percentage" ? `${coupon.value}%` : `${coupon.value}đ`}`,

      data: {
        url: "/voucher",
        couponCode: coupon.code,
        type: "new_coupon"
      }
    };

    await Promise.allSettled(
      users.map((user) => sendNotificationToUser(user._id, payload))
    );
    return true;
  } catch (error) {
    console.error("Lỗi khi gửi thông báo mã giảm giá:", error);
    return false;
  }
};exports.sendNewCouponNotification = sendNewCouponNotification;

const sendReviewReplyNotification = async (
userId,
review,
replyText) =>
{
  try {
    return await sendNotificationToUser(userId, {
      title: "Phản hồi đánh giá sản phẩm",
      body: `Admin: \"${replyText.slice(0, 120)}${
      replyText.length > 120 ? "..." : ""}\"`,

      data: {
        url: `/product/${review.productId}`,
        reviewId: review._id,
        type: "review_reply",
        productName: review.productName,
        replyContent: replyText,
        icon: "/review-icon.png"
      }
    });
  } catch (error) {
    return { success: false, error: error.message };
  }
};exports.sendReviewReplyNotification = sendReviewReplyNotification;

const sendOrderStatusNotification = async (
userId,
order,
statusText) =>
{
  try {
    const title = `Cập nhật đơn hàng #${
    order.orderNumber || order._id.toString().slice(0, 8)}`;

    let body = `Đơn hàng của bạn ${statusText}`;

    if (order.totalAmount) {
      body += ` - Giá trị: ${new Intl.NumberFormat("vi-VN", {
        style: "currency",
        currency: "VND"
      }).format(order.totalAmount)}`;
    }

    return await sendNotificationToUser(userId, {
      title,
      body,
      data: {
        url: `/tai-khoan/don-hang/${order._id}`,
        orderId: order._id,
        type: "order_update",
        status: order.status,
        orderItems:
        order.items?.map((item) => ({
          name: item.productName,
          quantity: item.quantity
        })) || [],
        icon: "/order-icon.png"
      }
    });
  } catch (error) {
    return { success: false, error: error.message };
  }
};exports.sendOrderStatusNotification = sendOrderStatusNotification;

const sendMessageNotification = async (
userId,
senderName,
messageText) =>
{
  try {
    return await sendNotificationToUser(userId, {
      title: `Tin nhắn mới từ ${senderName}`,
      body:
      messageText.length > 100 ?
      `${messageText.slice(0, 100)}...` :
      messageText,
      data: {
        url: "/tai-khoan/tin-nhan",
        type: "new_message",
        senderId: senderName,
        messageContent: messageText,
        icon: "/chat-icon.png",
        actions: [
        { action: "reply", title: "Trả lời" },
        { action: "view", title: "Xem tất cả" }]

      }
    });
  } catch (error) {
    return { success: false, error: error.message };
  }
};exports.sendMessageNotification = sendMessageNotification;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,