"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.getUserIdFromToken = exports.getTokenFrom = void 0;




var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };} /**
 * Extract authentication token from request
 * @param {Object} req - The request object
 * @returns {string|null} The extracted token or null if not found
 */const getTokenFrom = (req) => {// Try to get token from authorization header
  if (req.headers && req.headers.authorization) {const auth = req.headers.authorization;
    if (auth.toLowerCase().startsWith('bearer ')) {
      return auth.substring(7);
    }
  }

  // Try to get from alternate authorization header format
  if (typeof req.get === 'function') {
    const auth = req.get('authorization');
    if (auth && auth.toLowerCase().startsWith('bearer ')) {
      return auth.substring(7);
    }
  }

  // Try to get from cookies
  if (req.cookies) {
    if (req.cookies.token) return req.cookies.token;
    if (req.cookies.accessToken) return req.cookies.accessToken;
  }

  return null;
};

/**
 * Get user ID from token without full verification
 * This function uses a simplified approach for extracting the payload
 * @param {string} token - JWT token
 * @returns {string|null} User ID or null if invalid/expired
 */exports.getTokenFrom = getTokenFrom;
const getUserIdFromToken = (token) => {
  if (!token) return null;

  try {
    // Decode without verification
    const decoded = _jsonwebtoken.default.decode(token);
    return decoded && decoded.id ? decoded.id : null;
  } catch (error) {
    console.error('Error extracting user ID from token:', error);
    return null;
  }
};exports.getUserIdFromToken = getUserIdFromToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfanNvbndlYnRva2VuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJnZXRUb2tlbkZyb20iLCJyZXEiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsImF1dGgiLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJnZXQiLCJjb29raWVzIiwidG9rZW4iLCJhY2Nlc3NUb2tlbiIsImV4cG9ydHMiLCJnZXRVc2VySWRGcm9tVG9rZW4iLCJkZWNvZGVkIiwiand0IiwiZGVjb2RlIiwiaWQiLCJlcnJvciIsImNvbnNvbGUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvdG9rZW5FeHRyYWN0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEV4dHJhY3QgYXV0aGVudGljYXRpb24gdG9rZW4gZnJvbSByZXF1ZXN0XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXEgLSBUaGUgcmVxdWVzdCBvYmplY3RcclxuICogQHJldHVybnMge3N0cmluZ3xudWxsfSBUaGUgZXh0cmFjdGVkIHRva2VuIG9yIG51bGwgaWYgbm90IGZvdW5kXHJcbiAqL1xyXG5pbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VG9rZW5Gcm9tID0gKHJlcSkgPT4ge1xyXG4gIC8vIFRyeSB0byBnZXQgdG9rZW4gZnJvbSBhdXRob3JpemF0aW9uIGhlYWRlclxyXG4gIGlmIChyZXEuaGVhZGVycyAmJiByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uKSB7XHJcbiAgICBjb25zdCBhdXRoID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbjtcclxuICAgIGlmIChhdXRoLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnYmVhcmVyICcpKSB7XHJcbiAgICAgIHJldHVybiBhdXRoLnN1YnN0cmluZyg3KTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8gVHJ5IHRvIGdldCBmcm9tIGFsdGVybmF0ZSBhdXRob3JpemF0aW9uIGhlYWRlciBmb3JtYXRcclxuICBpZiAodHlwZW9mIHJlcS5nZXQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIGNvbnN0IGF1dGggPSByZXEuZ2V0KCdhdXRob3JpemF0aW9uJyk7XHJcbiAgICBpZiAoYXV0aCAmJiBhdXRoLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnYmVhcmVyICcpKSB7XHJcbiAgICAgIHJldHVybiBhdXRoLnN1YnN0cmluZyg3KTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8gVHJ5IHRvIGdldCBmcm9tIGNvb2tpZXNcclxuICBpZiAocmVxLmNvb2tpZXMpIHtcclxuICAgIGlmIChyZXEuY29va2llcy50b2tlbikgcmV0dXJuIHJlcS5jb29raWVzLnRva2VuO1xyXG4gICAgaWYgKHJlcS5jb29raWVzLmFjY2Vzc1Rva2VuKSByZXR1cm4gcmVxLmNvb2tpZXMuYWNjZXNzVG9rZW47XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCB1c2VyIElEIGZyb20gdG9rZW4gd2l0aG91dCBmdWxsIHZlcmlmaWNhdGlvblxyXG4gKiBUaGlzIGZ1bmN0aW9uIHVzZXMgYSBzaW1wbGlmaWVkIGFwcHJvYWNoIGZvciBleHRyYWN0aW5nIHRoZSBwYXlsb2FkXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b2tlbiAtIEpXVCB0b2tlblxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IFVzZXIgSUQgb3IgbnVsbCBpZiBpbnZhbGlkL2V4cGlyZWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRVc2VySWRGcm9tVG9rZW4gPSAodG9rZW4pID0+IHtcclxuICBpZiAoIXRva2VuKSByZXR1cm4gbnVsbDtcclxuICBcclxuICB0cnkge1xyXG4gICAgLy8gRGVjb2RlIHdpdGhvdXQgdmVyaWZpY2F0aW9uXHJcbiAgICBjb25zdCBkZWNvZGVkID0gand0LmRlY29kZSh0b2tlbik7XHJcbiAgICByZXR1cm4gZGVjb2RlZCAmJiBkZWNvZGVkLmlkID8gZGVjb2RlZC5pZCA6IG51bGw7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGV4dHJhY3RpbmcgdXNlciBJRCBmcm9tIHRva2VuOicsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufTsgIl0sIm1hcHBpbmdzIjoiOzs7OztBQUtBLElBQUFBLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQSxrQkFBK0IsU0FBQUQsdUJBQUFFLENBQUEsVUFBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUEsS0FML0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUdPLE1BQU1HLFlBQVksR0FBR0EsQ0FBQ0MsR0FBRyxLQUFLLENBQ25DO0VBQ0EsSUFBSUEsR0FBRyxDQUFDQyxPQUFPLElBQUlELEdBQUcsQ0FBQ0MsT0FBTyxDQUFDQyxhQUFhLEVBQUUsQ0FDNUMsTUFBTUMsSUFBSSxHQUFHSCxHQUFHLENBQUNDLE9BQU8sQ0FBQ0MsYUFBYTtJQUN0QyxJQUFJQyxJQUFJLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtNQUM1QyxPQUFPRixJQUFJLENBQUNHLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDMUI7RUFDRjs7RUFFQTtFQUNBLElBQUksT0FBT04sR0FBRyxDQUFDTyxHQUFHLEtBQUssVUFBVSxFQUFFO0lBQ2pDLE1BQU1KLElBQUksR0FBR0gsR0FBRyxDQUFDTyxHQUFHLENBQUMsZUFBZSxDQUFDO0lBQ3JDLElBQUlKLElBQUksSUFBSUEsSUFBSSxDQUFDQyxXQUFXLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7TUFDcEQsT0FBT0YsSUFBSSxDQUFDRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzFCO0VBQ0Y7O0VBRUE7RUFDQSxJQUFJTixHQUFHLENBQUNRLE9BQU8sRUFBRTtJQUNmLElBQUlSLEdBQUcsQ0FBQ1EsT0FBTyxDQUFDQyxLQUFLLEVBQUUsT0FBT1QsR0FBRyxDQUFDUSxPQUFPLENBQUNDLEtBQUs7SUFDL0MsSUFBSVQsR0FBRyxDQUFDUSxPQUFPLENBQUNFLFdBQVcsRUFBRSxPQUFPVixHQUFHLENBQUNRLE9BQU8sQ0FBQ0UsV0FBVztFQUM3RDs7RUFFQSxPQUFPLElBQUk7QUFDYixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUxBQyxPQUFBLENBQUFaLFlBQUEsR0FBQUEsWUFBQTtBQU1PLE1BQU1hLGtCQUFrQixHQUFHQSxDQUFDSCxLQUFLLEtBQUs7RUFDM0MsSUFBSSxDQUFDQSxLQUFLLEVBQUUsT0FBTyxJQUFJOztFQUV2QixJQUFJO0lBQ0Y7SUFDQSxNQUFNSSxPQUFPLEdBQUdDLHFCQUFHLENBQUNDLE1BQU0sQ0FBQ04sS0FBSyxDQUFDO0lBQ2pDLE9BQU9JLE9BQU8sSUFBSUEsT0FBTyxDQUFDRyxFQUFFLEdBQUdILE9BQU8sQ0FBQ0csRUFBRSxHQUFHLElBQUk7RUFDbEQsQ0FBQyxDQUFDLE9BQU9DLEtBQUssRUFBRTtJQUNkQyxPQUFPLENBQUNELEtBQUssQ0FBQyxzQ0FBc0MsRUFBRUEsS0FBSyxDQUFDO0lBQzVELE9BQU8sSUFBSTtFQUNiO0FBQ0YsQ0FBQyxDQUFDTixPQUFBLENBQUFDLGtCQUFBLEdBQUFBLGtCQUFBIiwiaWdub3JlTGlzdCI6W119