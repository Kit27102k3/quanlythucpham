"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;
var _mongoose = _interopRequireDefault(require("mongoose"));
var _bcryptjs = _interopRequireDefault(require("bcryptjs"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };} /* eslint-disable no-useless-catch */

// Kiểm tra nếu model đã tồn tại, sử dụng nó thay vì định nghĩa lại
const Admin = _mongoose.default.models.Admin || (() => {
  const adminSchema = new _mongoose.default.Schema(
    {
      username: {
        type: String,
        required: true,
        unique: true,
        trim: true
      },
      password: {
        type: String,
        required: true
      },
      fullName: {
        type: String,
        required: true
      },
      email: {
        type: String,
        required: true,
        unique: true,
        trim: true
      },
      phone: {
        type: String,
        required: true
      },
      birthday: {
        type: Date,
        required: true
      },
      role: {
        type: String,
        enum: ["admin", "manager", "staff"],
        default: "staff"
      },
      position: {
        type: String,
        enum: ["admin", "manager", "staff"],
        default: "staff"
      },
      isActive: {
        type: Boolean,
        default: true
      }
    },
    {
      timestamps: true
    }
  );

  // Hash password before saving
  adminSchema.pre("save", async function (next) {
    if (!this.isModified("password")) return next();

    try {
      const salt = await _bcryptjs.default.genSalt(10);
      this.password = await _bcryptjs.default.hash(this.password, salt);
      next();
    } catch (error) {
      next(error);
    }
  });

  // Method to compare password
  adminSchema.methods.comparePassword = async function (candidatePassword) {
    try {
      return await _bcryptjs.default.compare(candidatePassword, this.password);
    } catch (error) {
      throw error;
    }
  };

  return _mongoose.default.model("Admin", adminSchema);
})();var _default = exports.default =

Admin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9iY3J5cHRqcyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkFkbWluIiwibW9uZ29vc2UiLCJtb2RlbHMiLCJhZG1pblNjaGVtYSIsIlNjaGVtYSIsInVzZXJuYW1lIiwidHlwZSIsIlN0cmluZyIsInJlcXVpcmVkIiwidW5pcXVlIiwidHJpbSIsInBhc3N3b3JkIiwiZnVsbE5hbWUiLCJlbWFpbCIsInBob25lIiwiYmlydGhkYXkiLCJEYXRlIiwicm9sZSIsImVudW0iLCJwb3NpdGlvbiIsImlzQWN0aXZlIiwiQm9vbGVhbiIsInRpbWVzdGFtcHMiLCJwcmUiLCJuZXh0IiwiaXNNb2RpZmllZCIsInNhbHQiLCJiY3J5cHQiLCJnZW5TYWx0IiwiaGFzaCIsImVycm9yIiwibWV0aG9kcyIsImNvbXBhcmVQYXNzd29yZCIsImNhbmRpZGF0ZVBhc3N3b3JkIiwiY29tcGFyZSIsIm1vZGVsIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL01vZGVsL0FkbWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZWxlc3MtY2F0Y2ggKi9cclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiO1xyXG5pbXBvcnQgYmNyeXB0IGZyb20gXCJiY3J5cHRqc1wiO1xyXG5cclxuLy8gS2nhu4NtIHRyYSBu4bq/dSBtb2RlbCDEkcOjIHThu5NuIHThuqFpLCBz4butIGThu6VuZyBuw7MgdGhheSB2w6wgxJHhu4tuaCBuZ2jEqWEgbOG6oWlcclxuY29uc3QgQWRtaW4gPSBtb25nb29zZS5tb2RlbHMuQWRtaW4gfHwgKCgpID0+IHtcclxuICBjb25zdCBhZG1pblNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoXHJcbiAgICB7XHJcbiAgICAgIHVzZXJuYW1lOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgIHVuaXF1ZTogdHJ1ZSxcclxuICAgICAgICB0cmltOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBwYXNzd29yZDoge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAgZnVsbE5hbWU6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICAgIGVtYWlsOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgIHVuaXF1ZTogdHJ1ZSxcclxuICAgICAgICB0cmltOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBwaG9uZToge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAgYmlydGhkYXk6IHtcclxuICAgICAgICB0eXBlOiBEYXRlLFxyXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICByb2xlOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIGVudW06IFtcImFkbWluXCIsIFwibWFuYWdlclwiLCBcInN0YWZmXCJdLFxyXG4gICAgICAgIGRlZmF1bHQ6IFwic3RhZmZcIixcclxuICAgICAgfSxcclxuICAgICAgcG9zaXRpb246IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgZW51bTogW1wiYWRtaW5cIiwgXCJtYW5hZ2VyXCIsIFwic3RhZmZcIl0sXHJcbiAgICAgICAgZGVmYXVsdDogXCJzdGFmZlwiLFxyXG4gICAgICB9LFxyXG4gICAgICBpc0FjdGl2ZToge1xyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHRpbWVzdGFtcHM6IHRydWUsXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgLy8gSGFzaCBwYXNzd29yZCBiZWZvcmUgc2F2aW5nXHJcbiAgYWRtaW5TY2hlbWEucHJlKFwic2F2ZVwiLCBhc3luYyBmdW5jdGlvbiAobmV4dCkge1xyXG4gICAgaWYgKCF0aGlzLmlzTW9kaWZpZWQoXCJwYXNzd29yZFwiKSkgcmV0dXJuIG5leHQoKTtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgc2FsdCA9IGF3YWl0IGJjcnlwdC5nZW5TYWx0KDEwKTtcclxuICAgICAgdGhpcy5wYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKHRoaXMucGFzc3dvcmQsIHNhbHQpO1xyXG4gICAgICBuZXh0KCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBuZXh0KGVycm9yKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gTWV0aG9kIHRvIGNvbXBhcmUgcGFzc3dvcmRcclxuICBhZG1pblNjaGVtYS5tZXRob2RzLmNvbXBhcmVQYXNzd29yZCA9IGFzeW5jIGZ1bmN0aW9uIChjYW5kaWRhdGVQYXNzd29yZCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcmV0dXJuIGF3YWl0IGJjcnlwdC5jb21wYXJlKGNhbmRpZGF0ZVBhc3N3b3JkLCB0aGlzLnBhc3N3b3JkKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiBtb25nb29zZS5tb2RlbChcIkFkbWluXCIsIGFkbWluU2NoZW1hKTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFkbWluOyAiXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFGLHNCQUFB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