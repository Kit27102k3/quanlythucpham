"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _mongoose = _interopRequireDefault(require("mongoose"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

const UserSchema = new _mongoose.default.Schema(
  {
    email: { type: String, required: true },
    phone: { type: String, required: true },
    firstName: { type: String, required: true },
    lastName: { type: String, required: true },
    userName: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    userImage: { type: String, required: false, default: "" },
    isBlocked: { type: Boolean, default: false },
    resetPasswordToken: { type: String, default: null },
    resetPasswordExpires: { type: Date, default: null },
    lastLogin: { type: Date, default: null },
    facebookId: { type: String, default: null },
    googleId: { type: String, default: null },
    authProvider: {
      type: String,
      enum: ["local", "facebook", "google"],
      default: "local"
    },
    addresses: [
    {
      fullAddress: { type: String, required: true },
      houseNumber: { type: String, required: false },
      ward: { type: String, required: false },
      district: { type: String, required: false },
      province: { type: String, required: false },
      coordinates: {
        lat: { type: Number, required: false },
        lng: { type: Number, required: false }
      },
      isDefault: { type: Boolean, default: false },
      label: { type: String, required: false, default: "Nh√†" },
      receiverName: { type: String, required: false },
      receiverPhone: { type: String, required: false }
    }],

    pushSubscriptions: [
    {
      endpoint: { type: String, required: true },
      expirationTime: { type: Date, default: null },
      keys: {
        p256dh: { type: String, required: true },
        auth: { type: String, required: true }
      }
    }]

  },
  { timestamps: true }
);var _default = exports.default =

_mongoose.default.model("User", UserSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlVzZXJTY2hlbWEiLCJtb25nb29zZSIsIlNjaGVtYSIsImVtYWlsIiwidHlwZSIsIlN0cmluZyIsInJlcXVpcmVkIiwicGhvbmUiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsInVzZXJOYW1lIiwidW5pcXVlIiwicGFzc3dvcmQiLCJ1c2VySW1hZ2UiLCJpc0Jsb2NrZWQiLCJCb29sZWFuIiwicmVzZXRQYXNzd29yZFRva2VuIiwicmVzZXRQYXNzd29yZEV4cGlyZXMiLCJEYXRlIiwibGFzdExvZ2luIiwiZmFjZWJvb2tJZCIsImdvb2dsZUlkIiwiYXV0aFByb3ZpZGVyIiwiZW51bSIsImFkZHJlc3NlcyIsImZ1bGxBZGRyZXNzIiwiaG91c2VOdW1iZXIiLCJ3YXJkIiwiZGlzdHJpY3QiLCJwcm92aW5jZSIsImNvb3JkaW5hdGVzIiwibGF0IiwiTnVtYmVyIiwibG5nIiwiaXNEZWZhdWx0IiwibGFiZWwiLCJyZWNlaXZlck5hbWUiLCJyZWNlaXZlclBob25lIiwicHVzaFN1YnNjcmlwdGlvbnMiLCJlbmRwb2ludCIsImV4cGlyYXRpb25UaW1lIiwia2V5cyIsInAyNTZkaCIsImF1dGgiLCJ0aW1lc3RhbXBzIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kZWwiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvTW9kZWwvUmVnaXN0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiO1xuXG5jb25zdCBVc2VyU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYShcbiAge1xuICAgIGVtYWlsOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBwaG9uZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgZmlyc3ROYW1lOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBsYXN0TmFtZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgdXNlck5hbWU6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSwgdW5pcXVlOiB0cnVlIH0sXG4gICAgcGFzc3dvcmQ6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIHVzZXJJbWFnZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiBmYWxzZSwgZGVmYXVsdDogXCJcIiB9LFxuICAgIGlzQmxvY2tlZDogeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIHJlc2V0UGFzc3dvcmRUb2tlbjogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6IG51bGwgfSxcbiAgICByZXNldFBhc3N3b3JkRXhwaXJlczogeyB0eXBlOiBEYXRlLCBkZWZhdWx0OiBudWxsIH0sXG4gICAgbGFzdExvZ2luOiB7IHR5cGU6IERhdGUsIGRlZmF1bHQ6IG51bGwgfSxcbiAgICBmYWNlYm9va0lkOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogbnVsbCB9LFxuICAgIGdvb2dsZUlkOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogbnVsbCB9LFxuICAgIGF1dGhQcm92aWRlcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZW51bTogW1wibG9jYWxcIiwgXCJmYWNlYm9va1wiLCBcImdvb2dsZVwiXSxcbiAgICAgIGRlZmF1bHQ6IFwibG9jYWxcIixcbiAgICB9LFxuICAgIGFkZHJlc3NlczogW1xuICAgICAge1xuICAgICAgICBmdWxsQWRkcmVzczogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICAgIGhvdXNlTnVtYmVyOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IGZhbHNlIH0sXG4gICAgICAgIHdhcmQ6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICAgICAgZGlzdHJpY3Q6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICAgICAgcHJvdmluY2U6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICAgICAgY29vcmRpbmF0ZXM6IHtcbiAgICAgICAgICBsYXQ6IHsgdHlwZTogTnVtYmVyLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICAgICAgICBsbmc6IHsgdHlwZTogTnVtYmVyLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICAgICAgfSxcbiAgICAgICAgaXNEZWZhdWx0OiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgICAgIGxhYmVsOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IGZhbHNlLCBkZWZhdWx0OiBcIk5ow6BcIiB9LFxuICAgICAgICByZWNlaXZlck5hbWU6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICAgICAgcmVjZWl2ZXJQaG9uZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiBmYWxzZSB9LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHB1c2hTdWJzY3JpcHRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGVuZHBvaW50OiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgZXhwaXJhdGlvblRpbWU6IHsgdHlwZTogRGF0ZSwgZGVmYXVsdDogbnVsbCB9LFxuICAgICAgICBrZXlzOiB7XG4gICAgICAgICAgcDI1NmRoOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgICBhdXRoOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAgeyB0aW1lc3RhbXBzOiB0cnVlIH1cbik7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbmdvb3NlLm1vZGVsKFwiVXNlclwiLCBVc2VyU2NoZW1hKTtcbiJdLCJtYXBwaW5ncyI6Im9HQUFBLElB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