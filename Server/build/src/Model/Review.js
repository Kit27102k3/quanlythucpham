"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _mongoose = _interopRequireDefault(require("mongoose"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

// Schema cho phản hồi đánh giá
const ReplySchema = new _mongoose.default.Schema({
  userId: {
    type: _mongoose.default.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  adminId: {
    type: _mongoose.default.Schema.Types.ObjectId,
    ref: "Admin"
  },
  userName: {
    type: String,
    required: true
  },
  text: {
    type: String,
    required: true,
    trim: true
  },
  isAdmin: {
    type: Boolean,
    default: false
  }
}, { timestamps: true });

const ReviewSchema = new _mongoose.default.Schema(
  {
    userId: {
      type: _mongoose.default.Schema.Types.ObjectId,
      ref: "User",
      required: true
    },
    productId: {
      type: _mongoose.default.Schema.Types.ObjectId,
      ref: "Product",
      required: true
    },
    rating: {
      type: Number,
      required: true,
      min: 1,
      max: 5,
      default: 5
    },
    comment: {
      type: String,
      required: true,
      trim: true
    },
    userName: {
      type: String,
      required: true
    },
    userImage: {
      type: String,
      default: ""
    },
    isVerified: {
      type: Boolean,
      default: false
    }, // Người dùng đã mua sản phẩm chưa
    isPublished: {
      type: Boolean,
      default: true
    }, // Admin có thể ẩn đánh giá không phù hợp
    replies: [ReplySchema] // Mảng các phản hồi cho đánh giá này
  },
  { timestamps: true }
);

// Static method để tính điểm đánh giá trung bình cho một sản phẩm
ReviewSchema.statics.calculateAverageRating = async function (productId) {
  const result = await this.aggregate([
  {
    $match: {
      productId: new _mongoose.default.Types.ObjectId(productId),
      isPublished: true
    }
  },
  {
    $group: {
      _id: "$productId",
      averageRating: { $avg: "$rating" },
      numOfReviews: { $sum: 1 }
    }
  }]
  );

  try {
    if (result.length > 0) {
      await _mongoose.default.model("Product").findByIdAndUpdate(productId, {
        averageRating: result[0].averageRating,
        numOfReviews: result[0].numOfReviews
      });
    } else {
      await _mongoose.default.model("Product").findByIdAndUpdate(productId, {
        averageRating: 0,
        numOfReviews: 0
      });
    }

    // Cập nhật thống kê chi tiết trong ReviewStats
    // Sử dụng setTimeout để đảm bảo mô hình ReviewStats đã được đăng ký
    setTimeout(async () => {
      try {
        const ReviewStats = _mongoose.default.model("ReviewStats");
        await ReviewStats.recalculateStats(productId);
      } catch (err) {
        console.error("Không thể cập nhật ReviewStats:", err.message);
      }
    }, 0);
  } catch (error) {
    console.error("Lỗi khi cập nhật đánh giá trung bình:", error);
  }
};

// Middleware để tự động tính lại điểm đánh giá sau khi lưu review
ReviewSchema.post("save", function () {
  this.constructor.calculateAverageRating(this.productId);
});

// Middleware để tự động tính lại điểm đánh giá sau khi xóa review
ReviewSchema.post("remove", function () {
  this.constructor.calculateAverageRating(this.productId);
});

// Middleware để tự động tính lại điểm đánh giá sau khi cập nhật review
ReviewSchema.post("findOneAndUpdate", async function (doc) {
  if (doc) {
    await _mongoose.default.model("Review").calculateAverageRating(doc.productId);
  }
});

// Middleware để tự động tính lại điểm đánh giá sau khi thay đổi trạng thái public/private
ReviewSchema.pre("updateOne", async function () {
  const docToUpdate = await this.model.findOne(this.getQuery());
  if (docToUpdate) {
    // Lưu lại productId để sử dụng sau khi cập nhật
    this._productId = docToUpdate.productId;
  }
});

ReviewSchema.post("updateOne", async function () {
  if (this._productId) {
    await _mongoose.default.model("Review").calculateAverageRating(this._productId);
  }
});

const Review = _mongoose.default.model("Review", ReviewSchema);var _default = exports.default =

Review;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,