"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _mongoose = _interopRequireDefault(require("mongoose"));
var _dotenv = _interopRequireDefault(require("dotenv"));
var _Products = _interopRequireDefault(require("../Model/Products.js"));
var _Categories = _interopRequireDefault(require("../Model/Categories.js"));

_dotenv.default.config();

const updateProductCategories = async () => {
  try {
    // Kết nối MongoDB
    await _mongoose.default.connect(process.env.MONGOOSE_URI);
    console.log("Connected to MongoDB");

    // Lấy category "Trái"
    const traiCategory = await _Categories.default.findOne({ codeCategory: "TRAI" });
    if (!traiCategory) {
      console.log("Category 'Trái' not found");
      return;
    }

    console.log("Found category:", traiCategory);

    // Danh sách các sản phẩm là trái cây
    const fruitProducts = [
    "Trái sơ ri",
    "Táo xanh Mỹ cao cấp",
    "Dâu tây Đà Lạt"];


    // Cập nhật category chỉ cho các sản phẩm là trái cây
    const result = await _Products.default.updateMany(
      { productName: { $in: fruitProducts } },
      { $set: { productCategory: traiCategory._id } }
    );

    console.log(`Updated ${result.modifiedCount} products`);

    // Kiểm tra lại các sản phẩm
    const updatedProducts = await _Products.default.find({ productCategory: traiCategory._id });
    console.log("Products in Trái category:", updatedProducts.map((p) => ({
      id: p._id,
      name: p.productName,
      category: p.productCategory
    })));

    // Đóng kết nối
    await _mongoose.default.disconnect();
    console.log("Disconnected from MongoDB");
  } catch (error) {
    console.error("Error:", error);
  }
};

updateProductCategories();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kb3RlbnYiLCJfUHJvZHVjdHMiLCJfQ2F0ZWdvcmllcyIsImRvdGVudiIsImNvbmZpZyIsInVwZGF0ZVByb2R1Y3RDYXRlZ29yaWVzIiwibW9uZ29vc2UiLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPT1NFX1VSSSIsImNvbnNvbGUiLCJsb2ciLCJ0cmFpQ2F0ZWdvcnkiLCJDYXRlZ29yeSIsImZpbmRPbmUiLCJjb2RlQ2F0ZWdvcnkiLCJmcnVpdFByb2R1Y3RzIiwicmVzdWx0IiwiUHJvZHVjdCIsInVwZGF0ZU1hbnkiLCJwcm9kdWN0TmFtZSIsIiRpbiIsIiRzZXQiLCJwcm9kdWN0Q2F0ZWdvcnkiLCJfaWQiLCJtb2RpZmllZENvdW50IiwidXBkYXRlZFByb2R1Y3RzIiwiZmluZCIsIm1hcCIsInAiLCJpZCIsIm5hbWUiLCJjYXRlZ29yeSIsImRpc2Nvbm5lY3QiLCJlcnJvciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL3VwZGF0ZVByb2R1Y3RDYXRlZ29yaWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcclxuaW1wb3J0IGRvdGVudiBmcm9tIFwiZG90ZW52XCI7XHJcbmltcG9ydCBQcm9kdWN0IGZyb20gXCIuLi9Nb2RlbC9Qcm9kdWN0cy5qc1wiO1xyXG5pbXBvcnQgQ2F0ZWdvcnkgZnJvbSBcIi4uL01vZGVsL0NhdGVnb3JpZXMuanNcIjtcclxuXHJcbmRvdGVudi5jb25maWcoKTtcclxuXHJcbmNvbnN0IHVwZGF0ZVByb2R1Y3RDYXRlZ29yaWVzID0gYXN5bmMgKCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBL4bq/dCBu4buRaSBNb25nb0RCXHJcbiAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KHByb2Nlc3MuZW52Lk1PTkdPT1NFX1VSSSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIkNvbm5lY3RlZCB0byBNb25nb0RCXCIpO1xyXG5cclxuICAgIC8vIEzhuqV5IGNhdGVnb3J5IFwiVHLDoWlcIlxyXG4gICAgY29uc3QgdHJhaUNhdGVnb3J5ID0gYXdhaXQgQ2F0ZWdvcnkuZmluZE9uZSh7IGNvZGVDYXRlZ29yeTogXCJUUkFJXCIgfSk7XHJcbiAgICBpZiAoIXRyYWlDYXRlZ29yeSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkNhdGVnb3J5ICdUcsOhaScgbm90IGZvdW5kXCIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJGb3VuZCBjYXRlZ29yeTpcIiwgdHJhaUNhdGVnb3J5KTtcclxuXHJcbiAgICAvLyBEYW5oIHPDoWNoIGPDoWMgc+G6o24gcGjhuqltIGzDoCB0csOhaSBjw6J5XHJcbiAgICBjb25zdCBmcnVpdFByb2R1Y3RzID0gW1xyXG4gICAgICBcIlRyw6FpIHPGoSByaVwiLFxyXG4gICAgICBcIlTDoW8geGFuaCBN4bu5IGNhbyBj4bqlcFwiLFxyXG4gICAgICBcIkTDonUgdMOieSDEkMOgIEzhuqF0XCJcclxuICAgIF07XHJcblxyXG4gICAgLy8gQ+G6rXAgbmjhuq10IGNhdGVnb3J5IGNo4buJIGNobyBjw6FjIHPhuqNuIHBo4bqpbSBsw6AgdHLDoWkgY8OieVxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgUHJvZHVjdC51cGRhdGVNYW55KFxyXG4gICAgICB7IHByb2R1Y3ROYW1lOiB7ICRpbjogZnJ1aXRQcm9kdWN0cyB9IH0sXHJcbiAgICAgIHsgJHNldDogeyBwcm9kdWN0Q2F0ZWdvcnk6IHRyYWlDYXRlZ29yeS5faWQgfSB9XHJcbiAgICApO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGBVcGRhdGVkICR7cmVzdWx0Lm1vZGlmaWVkQ291bnR9IHByb2R1Y3RzYCk7XHJcblxyXG4gICAgLy8gS2nhu4NtIHRyYSBs4bqhaSBjw6FjIHPhuqNuIHBo4bqpbVxyXG4gICAgY29uc3QgdXBkYXRlZFByb2R1Y3RzID0gYXdhaXQgUHJvZHVjdC5maW5kKHsgcHJvZHVjdENhdGVnb3J5OiB0cmFpQ2F0ZWdvcnkuX2lkIH0pO1xyXG4gICAgY29uc29sZS5sb2coXCJQcm9kdWN0cyBpbiBUcsOhaSBjYXRlZ29yeTpcIiwgdXBkYXRlZFByb2R1Y3RzLm1hcChwID0+ICh7IFxyXG4gICAgICBpZDogcC5faWQsIFxyXG4gICAgICBuYW1lOiBwLnByb2R1Y3ROYW1lLFxyXG4gICAgICBjYXRlZ29yeTogcC5wcm9kdWN0Q2F0ZWdvcnkgXHJcbiAgICB9KSkpO1xyXG5cclxuICAgIC8vIMSQw7NuZyBr4bq/dCBu4buRaVxyXG4gICAgYXdhaXQgbW9uZ29vc2UuZGlzY29ubmVjdCgpO1xyXG4gICAgY29uc29sZS5sb2coXCJEaXNjb25uZWN0ZWQgZnJvbSBNb25nb0RCXCIpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6XCIsIGVycm9yKTtcclxuICB9XHJcbn07XHJcblxyXG51cGRhdGVQcm9kdWN0Q2F0ZWdvcmllcygpOyAiXSwibWFwcGluZ3MiOiJrR0FBQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7O0FBRUFJLGVBQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUM7O0FBRWYsTUFBTUMsdUJBQXVCLEdBQUcsTUFBQUEsQ0FBQSxLQUFZO0VBQzFDLElBQUk7SUFDRjtJQUNBLE1BQU1DLGlCQUFRLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFlBQVksQ0FBQztJQUNoREMsT0FBTyxDQUFDQyxHQUFHLENBQUMsc0JBQXNCLENBQUM7O0lBRW5DO0lBQ0EsTUFBTUMsWUFBWSxHQUFHLE1BQU1DLG1CQUFRLENBQUNDLE9BQU8sQ0FBQyxFQUFFQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyRSxJQUFJLENBQUNILFlBQVksRUFBRTtNQUNqQkYsT0FBTyxDQUFDQyxHQUFHLENBQUMsMkJBQTJCLENBQUM7TUFDeEM7SUFDRjs7SUFFQUQsT0FBTyxDQUFDQyxHQUFHLENBQUMsaUJBQWlCLEVBQUVDLFlBQVksQ0FBQzs7SUFFNUM7SUFDQSxNQUFNSSxhQUFhLEdBQUc7SUFDcEIsWUFBWTtJQUNaLHFCQUFxQjtJQUNyQixnQkFBZ0IsQ0FDakI7OztJQUVEO0lBQ0EsTUFBTUMsTUFBTSxHQUFHLE1BQU1DLGlCQUFPLENBQUNDLFVBQVU7TUFDckMsRUFBRUMsV0FBVyxFQUFFLEVBQUVDLEdBQUcsRUFBRUwsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3ZDLEVBQUVNLElBQUksRUFBRSxFQUFFQyxlQUFlLEVBQUVYLFlBQVksQ0FBQ1ksR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDOztJQUVEZCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxXQUFXTSxNQUFNLENBQUNRLGFBQWEsV0FBVyxDQUFDOztJQUV2RDtJQUNBLE1BQU1DLGVBQWUsR0FBRyxNQUFNUixpQkFBTyxDQUFDUyxJQUFJLENBQUMsRUFBRUosZUFBZSxFQUFFWCxZQUFZLENBQUNZLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDakZkLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDRCQUE0QixFQUFFZSxlQUFlLENBQUNFLEdBQUcsQ0FBQyxDQUFBQyxDQUFDLE1BQUs7TUFDbEVDLEVBQUUsRUFBRUQsQ0FBQyxDQUFDTCxHQUFHO01BQ1RPLElBQUksRUFBRUYsQ0FBQyxDQUFDVCxXQUFXO01BQ25CWSxRQUFRLEVBQUVILENBQUMsQ0FBQ047SUFDZCxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQUVKO0lBQ0EsTUFBTWxCLGlCQUFRLENBQUM0QixVQUFVLENBQUMsQ0FBQztJQUMzQnZCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDJCQUEyQixDQUFDO0VBQzFDLENBQUMsQ0FBQyxPQUFPdUIsS0FBSyxFQUFFO0lBQ2R4QixPQUFPLENBQUN3QixLQUFLLENBQUMsUUFBUSxFQUFFQSxLQUFLLENBQUM7RUFDaEM7QUFDRixDQUFDOztBQUVEOUIsdUJBQXVCLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==