"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.updateContact = exports.testEmailConfig = exports.replyToContact = exports.getContacts = exports.getContactById = exports.deleteContact = exports.createContact = void 0;
var _Contact = _interopRequireDefault(require("../Model/Contact.js"));
var _nodemailer = _interopRequireDefault(require("nodemailer"));
var _dotenv = _interopRequireDefault(require("dotenv"));
var _notificationService = require("../Services/notificationService.js");
var _adminModel = _interopRequireDefault(require("../Model/adminModel.js")); /* eslint-disable no-undef */

_dotenv.default.config();

// Get all contacts
const getContacts = async (req, res) => {
  try {
    const contacts = await _Contact.default.find().sort({ createdAt: -1 }); // Sắp xếp theo thời gian mới nhất
    res.status(200).json(contacts);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get a specific contact by ID
exports.getContacts = getContacts;const getContactById = async (req, res) => {
  try {
    const contact = await _Contact.default.findById(req.params.id);
    if (!contact) {
      return res.status(404).json({ message: "Contact not found" });
    }
    res.status(200).json(contact);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Create a new contact
exports.getContactById = getContactById;const createContact = async (req, res) => {
  try {
    const { name, email, message, phone } = req.body;

    if (!name || !email || !message) {
      return res.status(400).json({ message: "Please provide name, email and message" });
    }

    const newContact = new _Contact.default({
      name,
      email,
      message,
      phone,
      isRead: false,
      isReplied: false
    });

    const savedContact = await newContact.save();

    // Gửi thông báo cho admin về liên hệ mới
    try {
      // Tìm tất cả admin có đăng ký nhận thông báo
      const adminsToNotify = await _adminModel.default.find({
        'pushSubscriptions.0': { $exists: true }
      });

      if (adminsToNotify && adminsToNotify.length > 0) {
        const notificationPayload = {
          title: 'Liên hệ mới',
          body: `${name} đã gửi một liên hệ mới qua website.`,
          data: {
            url: '/admin/contacts',
            type: 'new_contact'
          }
        };

        // Gửi thông báo đến từng admin
        for (const admin of adminsToNotify) {
          for (const subscription of admin.pushSubscriptions) {
            (0, _notificationService.sendPushNotification)(admin._id, subscription, notificationPayload).
            catch((error) => console.error('Error sending contact notification to admin:', error));
          }
        }
        console.log(`Đã gửi thông báo liên hệ mới đến ${adminsToNotify.length} admins`);
      }
    } catch (notificationError) {
      console.error('Lỗi khi gửi thông báo liên hệ mới:', notificationError);
      // Không ảnh hưởng đến việc trả về response
    }

    res.status(201).json(savedContact);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Update a contact
exports.createContact = createContact;const updateContact = async (req, res) => {
  try {
    const updatedContact = await _Contact.default.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true }
    );

    if (!updatedContact) {
      return res.status(404).json({ message: "Contact not found" });
    }

    res.status(200).json(updatedContact);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Delete a contact
exports.updateContact = updateContact;const deleteContact = async (req, res) => {
  try {
    const deletedContact = await _Contact.default.findByIdAndDelete(req.params.id);

    if (!deletedContact) {
      return res.status(404).json({ message: "Contact not found" });
    }

    res.status(200).json({ message: "Contact deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Reply to a contact by sending an email
exports.deleteContact = deleteContact;const replyToContact = async (req, res) => {
  try {
    const { contactId, to, subject, message } = req.body;

    if (!contactId || !to || !subject || !message) {
      return res.status(400).json({ message: "Please provide contactId, to, subject and message" });
    }

    // Kiểm tra xem liên hệ có tồn tại không
    const contact = await _Contact.default.findById(contactId);
    if (!contact) {
      return res.status(404).json({ message: "Contact not found" });
    }

    // Lấy thông tin email từ biến môi trường
    const emailUsername = process.env.EMAIL_USERNAME;
    const emailPassword = process.env.EMAIL_PASSWORD;

    if (!emailUsername || !emailPassword) {
      return res.status(500).json({
        message: "Email configuration is missing",
        error: "Missing email credentials in server configuration"
      });
    }

    // Cấu hình nodemailer transporter
    const transporter = _nodemailer.default.createTransport({
      service: "gmail",
      auth: {
        user: emailUsername,
        pass: emailPassword
      },
      debug: true // Thêm để xem lỗi chi tiết hơn
    });

    console.log("Email configuration:", {
      emailUser: emailUsername ? "Set" : "Not set",
      emailPass: emailPassword ? "Set" : "Not set"
    });

    // Xác thực kết nối trước khi gửi
    try {
      await transporter.verify();
      console.log("Email transport verified successfully");
    } catch (verifyError) {
      console.error("Email transport verification failed:", verifyError);
      return res.status(500).json({
        message: "Email server configuration error",
        error: verifyError.message
      });
    }

    // Cấu hình email
    const mailOptions = {
      from: emailUsername,
      to: to,
      subject: subject,
      html: message.replace(/\n/g, '<br>')
    };

    // Gửi email
    const info = await transporter.sendMail(mailOptions);
    console.log("Email sent successfully:", info.messageId);

    // Cập nhật trạng thái liên hệ thành đã trả lời
    contact.isRead = true;
    contact.isReplied = true;
    await contact.save();

    res.status(200).json({
      message: "Reply sent successfully",
      messageId: info.messageId,
      deliveryStatus: info.response
    });
  } catch (error) {
    console.error("Error sending reply:", error);
    res.status(500).json({ message: "Failed to send reply", error: error.message });
  }
};

// Test email configuration
exports.replyToContact = replyToContact;const testEmailConfig = async (req, res) => {
  try {
    // Lấy thông tin cấu hình từ biến môi trường
    const emailUsername = process.env.EMAIL_USERNAME;
    const emailPassword = process.env.EMAIL_PASSWORD;

    if (!emailUsername || !emailPassword) {
      return res.status(400).json({
        success: false,
        message: "Email configuration is missing",
        config: {
          username: emailUsername ? "Set" : "Not set",
          password: emailPassword ? "Set" : "Not set"
        }
      });
    }

    // Cấu hình nodemailer transporter để kiểm tra
    const transporter = _nodemailer.default.createTransport({
      service: "gmail",
      auth: {
        user: emailUsername,
        pass: emailPassword
      }
    });

    // Kiểm tra kết nối
    await transporter.verify();

    res.status(200).json({
      success: true,
      message: "Email configuration is valid",
      email: emailUsername
    });
  } catch (error) {
    console.error("Error testing email config:", error);
    res.status(500).json({
      success: false,
      message: "Failed to verify email configuration",
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};exports.testEmailConfig = testEmailConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,