"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.updateBrand = exports.searchBrands = exports.getBrandById = exports.getAllBrands = exports.deleteBrand = exports.createBrand = void 0;var _Brand = _interopRequireDefault(require("../Model/Brand.js"));
var _asyncHandler = require("../Middleware/asyncHandler.js");function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

// @desc    Get all brands
// @route   GET /api/brands
// @access  Private/Admin
const getAllBrands = exports.getAllBrands = (0, _asyncHandler.asyncHandler)(async (req, res) => {
  const brands = await _Brand.default.find({}).sort({ createdAt: -1 });

  return res.status(200).json(brands);
});

// @desc    Get a single brand
// @route   GET /api/brands/:id
// @access  Private/Admin
const getBrandById = exports.getBrandById = (0, _asyncHandler.asyncHandler)(async (req, res) => {
  const brand = await _Brand.default.findById(req.params.id);

  if (!brand) {
    return res.status(404).json({
      success: false,
      message: "Không tìm thấy thương hiệu"
    });
  }

  return res.status(200).json(brand);
});

// @desc    Create a new brand
// @route   POST /api/brands
// @access  Private/Admin
const createBrand = exports.createBrand = (0, _asyncHandler.asyncHandler)(async (req, res) => {
  const { name } = req.body;
  let { code } = req.body;

  // Kiểm tra thông tin bắt buộc
  if (!name) {
    return res.status(400).json({
      success: false,
      message: "Vui lòng cung cấp tên thương hiệu"
    });
  }

  // Nếu không có mã, tự động tạo mã ngẫu nhiên 4 chữ cái viết tắt từ tên
  if (!code) {
    // Lấy chữ cái đầu của mỗi từ trong tên thương hiệu
    const words = name.split(" ");
    let generatedCode = "";
    for (let i = 0; i < Math.min(words.length, 4); i++) {
      if (words[i].length > 0) {
        generatedCode += words[i][0].toUpperCase();
      }
    }

    // Nếu code có ít hơn 4 ký tự, thêm chữ cái từ từ đầu tiên
    while (generatedCode.length < 4) {
      if (words[0].length > generatedCode.length - 1) {
        generatedCode += words[0][generatedCode.length].toUpperCase();
      } else {
        // Nếu từ đầu tiên không đủ ký tự, thêm số ngẫu nhiên
        generatedCode += Math.floor(Math.random() * 10).toString();
      }
    }

    code = generatedCode;
    req.body.code = code;
  }

  // Kiểm tra xem code đã tồn tại chưa
  const existingBrand = await _Brand.default.findOne({ code });
  if (existingBrand) {
    return res.status(400).json({
      success: false,
      message: "Mã thương hiệu đã tồn tại"
    });
  }

  // Thêm thông tin người tạo nếu có
  if (req.user && req.user._id) {
    req.body.createdBy = req.user._id;
  }

  const brand = await _Brand.default.create(req.body);

  return res.status(201).json({
    success: true,
    message: "Thêm thương hiệu thành công",
    brand
  });
});

// @desc    Update a brand
// @route   PUT /api/brands/:id
// @access  Private/Admin
const updateBrand = exports.updateBrand = (0, _asyncHandler.asyncHandler)(async (req, res) => {
  let brand = await _Brand.default.findById(req.params.id);

  if (!brand) {
    return res.status(404).json({
      success: false,
      message: "Không tìm thấy thương hiệu"
    });
  }

  // Kiểm tra thông tin bắt buộc
  if (!req.body.name) {
    return res.status(400).json({
      success: false,
      message: "Vui lòng cung cấp tên thương hiệu"
    });
  }

  // Nếu cập nhật mã thương hiệu (code), phải kiểm tra xem mã đã tồn tại chưa
  if (req.body.code && req.body.code !== brand.code) {
    const existingBrand = await _Brand.default.findOne({
      code: req.body.code,
      _id: { $ne: req.params.id }
    });

    if (existingBrand) {
      return res.status(400).json({
        success: false,
        message: "Mã thương hiệu đã tồn tại"
      });
    }
  }

  // Thêm thông tin người cập nhật nếu có
  if (req.user && req.user._id) {
    req.body.updatedBy = req.user._id;
  }

  brand = await _Brand.default.findByIdAndUpdate(req.params.id, req.body, {
    new: true,
    runValidators: true
  });

  return res.status(200).json({
    success: true,
    message: "Cập nhật thương hiệu thành công",
    brand
  });
});

// @desc    Delete a brand
// @route   DELETE /api/brands/:id
// @access  Private/Admin
const deleteBrand = exports.deleteBrand = (0, _asyncHandler.asyncHandler)(async (req, res) => {
  const brand = await _Brand.default.findById(req.params.id);

  if (!brand) {
    return res.status(404).json({
      success: false,
      message: "Không tìm thấy thương hiệu"
    });
  }

  await brand.deleteOne();

  return res.status(200).json({
    success: true,
    message: "Xóa thương hiệu thành công"
  });
});

// @desc    Search brands
// @route   GET /api/brands/search
// @access  Private/Admin
const searchBrands = exports.searchBrands = (0, _asyncHandler.asyncHandler)(async (req, res) => {
  const { query = "" } = req.query;

  const searchCondition = {
    $or: [
    { name: { $regex: query, $options: "i" } },
    { code: { $regex: query, $options: "i" } },
    { country: { $regex: query, $options: "i" } }]

  };

  const brands = await _Brand.default.find(searchCondition).sort({ createdAt: -1 });

  return res.status(200).json(brands);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQnJhbmQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY0hhbmRsZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJnZXRBbGxCcmFuZHMiLCJleHBvcnRzIiwiYXN5bmNIYW5kbGVyIiwicmVxIiwicmVzIiwiYnJhbmRzIiwiQnJhbmQiLCJmaW5kIiwic29ydCIsImNyZWF0ZWRBdCIsInN0YXR1cyIsImpzb24iLCJnZXRCcmFuZEJ5SWQiLCJicmFuZCIsImZpbmRCeUlkIiwicGFyYW1zIiwiaWQiLCJzdWNjZXNzIiwibWVzc2FnZSIsImNyZWF0ZUJyYW5kIiwibmFtZSIsImJvZHkiLCJjb2RlIiwid29yZHMiLCJzcGxpdCIsImdlbmVyYXRlZENvZGUiLCJpIiwiTWF0aCIsIm1pbiIsImxlbmd0aCIsInRvVXBwZXJDYXNlIiwiZmxvb3IiLCJyYW5kb20iLCJ0b1N0cmluZyIsImV4aXN0aW5nQnJhbmQiLCJmaW5kT25lIiwidXNlciIsIl9pZCIsImNyZWF0ZWRCeSIsImNyZWF0ZSIsInVwZGF0ZUJyYW5kIiwiJG5lIiwidXBkYXRlZEJ5IiwiZmluZEJ5SWRBbmRVcGRhdGUiLCJuZXciLCJydW5WYWxpZGF0b3JzIiwiZGVsZXRlQnJhbmQiLCJkZWxldGVPbmUiLCJzZWFyY2hCcmFuZHMiLCJxdWVyeSIsInNlYXJjaENvbmRpdGlvbiIsIiRvciIsIiRyZWdleCIsIiRvcHRpb25zIiwiY291bnRyeSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9Db250cm9sbGVyL2JyYW5kQ29udHJvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnJhbmQgZnJvbSBcIi4uL01vZGVsL0JyYW5kLmpzXCI7XHJcbmltcG9ydCB7IGFzeW5jSGFuZGxlciB9IGZyb20gXCIuLi9NaWRkbGV3YXJlL2FzeW5jSGFuZGxlci5qc1wiO1xyXG5cclxuLy8gQGRlc2MgICAgR2V0IGFsbCBicmFuZHNcclxuLy8gQHJvdXRlICAgR0VUIC9hcGkvYnJhbmRzXHJcbi8vIEBhY2Nlc3MgIFByaXZhdGUvQWRtaW5cclxuZXhwb3J0IGNvbnN0IGdldEFsbEJyYW5kcyA9IGFzeW5jSGFuZGxlcihhc3luYyAocmVxLCByZXMpID0+IHtcclxuICBjb25zdCBicmFuZHMgPSBhd2FpdCBCcmFuZC5maW5kKHt9KS5zb3J0KHsgY3JlYXRlZEF0OiAtMSB9KTtcclxuICBcclxuICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oYnJhbmRzKTtcclxufSk7XHJcblxyXG4vLyBAZGVzYyAgICBHZXQgYSBzaW5nbGUgYnJhbmRcclxuLy8gQHJvdXRlICAgR0VUIC9hcGkvYnJhbmRzLzppZFxyXG4vLyBAYWNjZXNzICBQcml2YXRlL0FkbWluXHJcbmV4cG9ydCBjb25zdCBnZXRCcmFuZEJ5SWQgPSBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgY29uc3QgYnJhbmQgPSBhd2FpdCBCcmFuZC5maW5kQnlJZChyZXEucGFyYW1zLmlkKTtcclxuICBcclxuICBpZiAoIWJyYW5kKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgbWVzc2FnZTogXCJLaMO0bmcgdMOsbSB0aOG6pXkgdGjGsMahbmcgaGnhu4d1XCIsXHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKGJyYW5kKTtcclxufSk7XHJcblxyXG4vLyBAZGVzYyAgICBDcmVhdGUgYSBuZXcgYnJhbmRcclxuLy8gQHJvdXRlICAgUE9TVCAvYXBpL2JyYW5kc1xyXG4vLyBAYWNjZXNzICBQcml2YXRlL0FkbWluXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVCcmFuZCA9IGFzeW5jSGFuZGxlcihhc3luYyAocmVxLCByZXMpID0+IHtcclxuICBjb25zdCB7IG5hbWUgfSA9IHJlcS5ib2R5O1xyXG4gIGxldCB7IGNvZGUgfSA9IHJlcS5ib2R5O1xyXG5cclxuICAvLyBLaeG7g20gdHJhIHRow7RuZyB0aW4gYuG6r3QgYnXhu5ljXHJcbiAgaWYgKCFuYW1lKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgbWVzc2FnZTogXCJWdWkgbMOybmcgY3VuZyBj4bqlcCB0w6puIHRoxrDGoW5nIGhp4buHdVwiLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBO4bq/dSBraMO0bmcgY8OzIG3DoywgdOG7sSDEkeG7mW5nIHThuqFvIG3DoyBuZ+G6q3Ugbmhpw6puIDQgY2jhu68gY8OhaSB2aeG6v3QgdOG6r3QgdOG7qyB0w6puXHJcbiAgaWYgKCFjb2RlKSB7XHJcbiAgICAvLyBM4bqleSBjaOG7ryBjw6FpIMSR4bqndSBj4bunYSBt4buXaSB04burIHRyb25nIHTDqm4gdGjGsMahbmcgaGnhu4d1XHJcbiAgICBjb25zdCB3b3JkcyA9IG5hbWUuc3BsaXQoXCIgXCIpO1xyXG4gICAgbGV0IGdlbmVyYXRlZENvZGUgPSBcIlwiO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLm1pbih3b3Jkcy5sZW5ndGgsIDQpOyBpKyspIHtcclxuICAgICAgaWYgKHdvcmRzW2ldLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBnZW5lcmF0ZWRDb2RlICs9IHdvcmRzW2ldWzBdLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gTuG6v3UgY29kZSBjw7Mgw610IGjGoW4gNCBrw70gdOG7sSwgdGjDqm0gY2jhu68gY8OhaSB04burIHThu6sgxJHhuqd1IHRpw6puXHJcbiAgICB3aGlsZSAoZ2VuZXJhdGVkQ29kZS5sZW5ndGggPCA0KSB7XHJcbiAgICAgIGlmICh3b3Jkc1swXS5sZW5ndGggPiBnZW5lcmF0ZWRDb2RlLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICBnZW5lcmF0ZWRDb2RlICs9IHdvcmRzWzBdW2dlbmVyYXRlZENvZGUubGVuZ3RoXS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIE7hur91IHThu6sgxJHhuqd1IHRpw6puIGtow7RuZyDEkeG7pyBrw70gdOG7sSwgdGjDqm0gc+G7kSBuZ+G6q3Ugbmhpw6puXHJcbiAgICAgICAgZ2VuZXJhdGVkQ29kZSArPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCkudG9TdHJpbmcoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb2RlID0gZ2VuZXJhdGVkQ29kZTtcclxuICAgIHJlcS5ib2R5LmNvZGUgPSBjb2RlO1xyXG4gIH1cclxuXHJcbiAgLy8gS2nhu4NtIHRyYSB4ZW0gY29kZSDEkcOjIHThu5NuIHThuqFpIGNoxrBhXHJcbiAgY29uc3QgZXhpc3RpbmdCcmFuZCA9IGF3YWl0IEJyYW5kLmZpbmRPbmUoeyBjb2RlIH0pO1xyXG4gIGlmIChleGlzdGluZ0JyYW5kKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgbWVzc2FnZTogXCJNw6MgdGjGsMahbmcgaGnhu4d1IMSRw6MgdOG7k24gdOG6oWlcIixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gVGjDqm0gdGjDtG5nIHRpbiBuZ8aw4budaSB04bqhbyBu4bq/dSBjw7NcclxuICBpZiAocmVxLnVzZXIgJiYgcmVxLnVzZXIuX2lkKSB7XHJcbiAgICByZXEuYm9keS5jcmVhdGVkQnkgPSByZXEudXNlci5faWQ7XHJcbiAgfVxyXG5cclxuICBjb25zdCBicmFuZCA9IGF3YWl0IEJyYW5kLmNyZWF0ZShyZXEuYm9keSk7XHJcblxyXG4gIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7XHJcbiAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgbWVzc2FnZTogXCJUaMOqbSB0aMawxqFuZyBoaeG7h3UgdGjDoG5oIGPDtG5nXCIsXHJcbiAgICBicmFuZCxcclxuICB9KTtcclxufSk7XHJcblxyXG4vLyBAZGVzYyAgICBVcGRhdGUgYSBicmFuZFxyXG4vLyBAcm91dGUgICBQVVQgL2FwaS9icmFuZHMvOmlkXHJcbi8vIEBhY2Nlc3MgIFByaXZhdGUvQWRtaW5cclxuZXhwb3J0IGNvbnN0IHVwZGF0ZUJyYW5kID0gYXN5bmNIYW5kbGVyKGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIGxldCBicmFuZCA9IGF3YWl0IEJyYW5kLmZpbmRCeUlkKHJlcS5wYXJhbXMuaWQpO1xyXG5cclxuICBpZiAoIWJyYW5kKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgbWVzc2FnZTogXCJLaMO0bmcgdMOsbSB0aOG6pXkgdGjGsMahbmcgaGnhu4d1XCIsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIEtp4buDbSB0cmEgdGjDtG5nIHRpbiBi4bqvdCBideG7mWNcclxuICBpZiAoIXJlcS5ib2R5Lm5hbWUpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiBcIlZ1aSBsw7JuZyBjdW5nIGPhuqVwIHTDqm4gdGjGsMahbmcgaGnhu4d1XCIsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIE7hur91IGPhuq1wIG5o4bqtdCBtw6MgdGjGsMahbmcgaGnhu4d1IChjb2RlKSwgcGjhuqNpIGtp4buDbSB0cmEgeGVtIG3DoyDEkcOjIHThu5NuIHThuqFpIGNoxrBhXHJcbiAgaWYgKHJlcS5ib2R5LmNvZGUgJiYgcmVxLmJvZHkuY29kZSAhPT0gYnJhbmQuY29kZSkge1xyXG4gICAgY29uc3QgZXhpc3RpbmdCcmFuZCA9IGF3YWl0IEJyYW5kLmZpbmRPbmUoe1xyXG4gICAgICBjb2RlOiByZXEuYm9keS5jb2RlLFxyXG4gICAgICBfaWQ6IHsgJG5lOiByZXEucGFyYW1zLmlkIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoZXhpc3RpbmdCcmFuZCkge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiTcOjIHRoxrDGoW5nIGhp4buHdSDEkcOjIHThu5NuIHThuqFpXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gVGjDqm0gdGjDtG5nIHRpbiBuZ8aw4budaSBj4bqtcCBuaOG6rXQgbuG6v3UgY8OzXHJcbiAgaWYgKHJlcS51c2VyICYmIHJlcS51c2VyLl9pZCkge1xyXG4gICAgcmVxLmJvZHkudXBkYXRlZEJ5ID0gcmVxLnVzZXIuX2lkO1xyXG4gIH1cclxuXHJcbiAgYnJhbmQgPSBhd2FpdCBCcmFuZC5maW5kQnlJZEFuZFVwZGF0ZShyZXEucGFyYW1zLmlkLCByZXEuYm9keSwge1xyXG4gICAgbmV3OiB0cnVlLFxyXG4gICAgcnVuVmFsaWRhdG9yczogdHJ1ZSxcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICBtZXNzYWdlOiBcIkPhuq1wIG5o4bqtdCB0aMawxqFuZyBoaeG7h3UgdGjDoG5oIGPDtG5nXCIsXHJcbiAgICBicmFuZCxcclxuICB9KTtcclxufSk7XHJcblxyXG4vLyBAZGVzYyAgICBEZWxldGUgYSBicmFuZFxyXG4vLyBAcm91dGUgICBERUxFVEUgL2FwaS9icmFuZHMvOmlkXHJcbi8vIEBhY2Nlc3MgIFByaXZhdGUvQWRtaW5cclxuZXhwb3J0IGNvbnN0IGRlbGV0ZUJyYW5kID0gYXN5bmNIYW5kbGVyKGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIGNvbnN0IGJyYW5kID0gYXdhaXQgQnJhbmQuZmluZEJ5SWQocmVxLnBhcmFtcy5pZCk7XHJcblxyXG4gIGlmICghYnJhbmQpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiBcIktow7RuZyB0w6xtIHRo4bqleSB0aMawxqFuZyBoaeG7h3VcIixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXdhaXQgYnJhbmQuZGVsZXRlT25lKCk7XHJcblxyXG4gIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgbWVzc2FnZTogXCJYw7NhIHRoxrDGoW5nIGhp4buHdSB0aMOgbmggY8O0bmdcIixcclxuICB9KTtcclxufSk7XHJcblxyXG4vLyBAZGVzYyAgICBTZWFyY2ggYnJhbmRzXHJcbi8vIEByb3V0ZSAgIEdFVCAvYXBpL2JyYW5kcy9zZWFyY2hcclxuLy8gQGFjY2VzcyAgUHJpdmF0ZS9BZG1pblxyXG5leHBvcnQgY29uc3Qgc2VhcmNoQnJhbmRzID0gYXN5bmNIYW5kbGVyKGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIGNvbnN0IHsgcXVlcnkgPSBcIlwiIH0gPSByZXEucXVlcnk7XHJcblxyXG4gIGNvbnN0IHNlYXJjaENvbmRpdGlvbiA9IHtcclxuICAgICRvcjogW1xyXG4gICAgICB7IG5hbWU6IHsgJHJlZ2V4OiBxdWVyeSwgJG9wdGlvbnM6IFwiaVwiIH0gfSxcclxuICAgICAgeyBjb2RlOiB7ICRyZWdleDogcXVlcnksICRvcHRpb25zOiBcImlcIiB9IH0sXHJcbiAgICAgIHsgY291bnRyeTogeyAkcmVnZXg6IHF1ZXJ5LCAkb3B0aW9uczogXCJpXCIgfSB9LFxyXG4gICAgXSxcclxuICB9O1xyXG5cclxuICBjb25zdCBicmFuZHMgPSBhd2FpdCBCcmFuZC5maW5kKHNlYXJjaENvbmRpdGlvbikuc29ydCh7IGNyZWF0ZWRBdDogLTEgfSk7XHJcblxyXG4gIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihicmFuZHMpO1xyXG59KTsgIl0sIm1hcHBpbmdzIjoieU5BQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFB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