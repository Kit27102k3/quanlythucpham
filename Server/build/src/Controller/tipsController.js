"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.updateTip = exports.likeTip = exports.getTipsByCategory = exports.getTipById = exports.getFeaturedTips = exports.getAllTips = exports.deleteTip = exports.createTip = void 0;var _Tips = _interopRequireDefault(require("../Model/Tips.js"));
var _cloudinary = _interopRequireDefault(require("../config/cloudinary.js"));
var _fs = _interopRequireDefault(require("fs"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

// Lấy tất cả mẹo hay
const getAllTips = async (req, res) => {
  try {
    const tips = await _Tips.default.find().sort({ createdAt: -1 });
    res.status(200).json(tips);
  } catch (error) {
    console.error("Lỗi khi lấy danh sách mẹo:", error);
    res.status(500).json({ message: "Lỗi khi lấy danh sách mẹo", error: error.message });
  }
};

// Lấy mẹo hay theo ID
exports.getAllTips = getAllTips;const getTipById = async (req, res) => {
  try {
    const { id } = req.params;
    const tip = await _Tips.default.findById(id);

    if (!tip) {
      return res.status(404).json({ message: "Không tìm thấy mẹo" });
    }

    res.status(200).json(tip);
  } catch (error) {
    console.error("Lỗi khi lấy chi tiết mẹo:", error);
    res.status(500).json({ message: "Lỗi khi lấy chi tiết mẹo", error: error.message });
  }
};

// Lấy mẹo hay theo danh mục
exports.getTipById = getTipById;const getTipsByCategory = async (req, res) => {
  try {
    const { category } = req.params;
    const tips = await _Tips.default.find({ category }).sort({ createdAt: -1 });

    res.status(200).json(tips);
  } catch (error) {
    console.error("Lỗi khi lấy mẹo theo danh mục:", error);
    res.status(500).json({ message: "Lỗi khi lấy mẹo theo danh mục", error: error.message });
  }
};

// Tạo mẹo hay mới
exports.getTipsByCategory = getTipsByCategory;const createTip = async (req, res) => {
  try {
    let imageUrl = "";

    // Xử lý upload ảnh nếu có
    if (req.file) {
      try {
        const result = await _cloudinary.default.uploader.upload(req.file.path, {
          folder: "tips",
          resource_type: "auto"
        });
        imageUrl = result.secure_url;
        // Xóa file tạm sau khi đã upload
        _fs.default.unlinkSync(req.file.path);
      } catch (uploadError) {
        console.error("Lỗi khi upload ảnh:", uploadError);
        if (_fs.default.existsSync(req.file.path)) {
          _fs.default.unlinkSync(req.file.path);
        }
        return res.status(500).json({ message: "Lỗi khi upload ảnh", error: uploadError.message });
      }
    }

    // Xử lý tags
    let tags = [];
    if (req.body.tags) {
      try {
        tags = Array.isArray(req.body.tags) ? req.body.tags : JSON.parse(req.body.tags);
      } catch {
        tags = req.body.tags.split(",").map((tag) => tag.trim());
      }
    }

    // Format ngày xuất bản
    let datePublished = req.body.datePublished ? new Date(req.body.datePublished) : new Date();

    const newTip = new _Tips.default({
      title: req.body.title,
      category: req.body.category,
      image: imageUrl || req.body.image,
      content: req.body.content,
      author: req.body.author,
      authorTitle: req.body.authorTitle,
      tags: tags,
      likes: req.body.likes || 0,
      datePublished: datePublished,
      isFeatured: req.body.isFeatured === "true"
    });

    const savedTip = await newTip.save();
    res.status(201).json(savedTip);
  } catch (error) {
    console.error("Lỗi khi tạo mẹo mới:", error);
    // Xóa file tạm nếu có lỗi xảy ra
    if (req.file && _fs.default.existsSync(req.file.path)) {
      _fs.default.unlinkSync(req.file.path);
    }
    res.status(500).json({ message: "Lỗi khi tạo mẹo mới", error: error.message });
  }
};

// Cập nhật mẹo hay
exports.createTip = createTip;const updateTip = async (req, res) => {
  try {
    const { id } = req.params;

    // Kiểm tra mẹo có tồn tại không
    const existingTip = await _Tips.default.findById(id);
    if (!existingTip) {
      return res.status(404).json({ message: "Không tìm thấy mẹo" });
    }

    // Xử lý upload ảnh mới nếu có
    let imageUrl = existingTip.image;
    if (req.file) {
      try {
        const result = await _cloudinary.default.uploader.upload(req.file.path, {
          folder: "tips",
          resource_type: "auto"
        });
        imageUrl = result.secure_url;
        // Xóa file tạm sau khi đã upload
        _fs.default.unlinkSync(req.file.path);
      } catch (uploadError) {
        console.error("Lỗi khi upload ảnh:", uploadError);
        if (_fs.default.existsSync(req.file.path)) {
          _fs.default.unlinkSync(req.file.path);
        }
        return res.status(500).json({ message: "Lỗi khi upload ảnh", error: uploadError.message });
      }
    } else if (req.body.image) {
      // Nếu có image URL trong request body
      imageUrl = req.body.image;
    }

    // Xử lý tags
    let tags = existingTip.tags;
    if (req.body.tags) {
      try {
        tags = Array.isArray(req.body.tags) ? req.body.tags : JSON.parse(req.body.tags);
      } catch {
        tags = req.body.tags.split(",").map((tag) => tag.trim());
      }
    }

    // Format ngày xuất bản
    let datePublished = existingTip.datePublished;
    if (req.body.datePublished) {
      datePublished = new Date(req.body.datePublished);
    }

    const updatedTip = await _Tips.default.findByIdAndUpdate(
      id,
      {
        title: req.body.title || existingTip.title,
        category: req.body.category || existingTip.category,
        image: imageUrl,
        content: req.body.content || existingTip.content,
        author: req.body.author || existingTip.author,
        authorTitle: req.body.authorTitle || existingTip.authorTitle,
        tags: tags,
        likes: req.body.likes !== undefined ? req.body.likes : existingTip.likes,
        datePublished: datePublished,
        isFeatured: req.body.isFeatured !== undefined ?
        req.body.isFeatured === "true" || req.body.isFeatured === true :
        existingTip.isFeatured
      },
      { new: true }
    );

    res.status(200).json(updatedTip);
  } catch (error) {
    console.error("Lỗi khi cập nhật mẹo:", error);
    // Xóa file tạm nếu có lỗi xảy ra
    if (req.file && _fs.default.existsSync(req.file.path)) {
      _fs.default.unlinkSync(req.file.path);
    }
    res.status(500).json({ message: "Lỗi khi cập nhật mẹo", error: error.message });
  }
};

// Xóa mẹo hay
exports.updateTip = updateTip;const deleteTip = async (req, res) => {
  try {
    const { id } = req.params;

    const tip = await _Tips.default.findByIdAndDelete(id);

    if (!tip) {
      return res.status(404).json({ message: "Không tìm thấy mẹo" });
    }

    res.status(200).json({ message: "Xóa mẹo thành công" });
  } catch (error) {
    console.error("Lỗi khi xóa mẹo:", error);
    res.status(500).json({ message: "Lỗi khi xóa mẹo", error: error.message });
  }
};

// Tăng likes cho mẹo hay
exports.deleteTip = deleteTip;const likeTip = async (req, res) => {
  try {
    const { id } = req.params;

    const tip = await _Tips.default.findById(id);

    if (!tip) {
      return res.status(404).json({ message: "Không tìm thấy mẹo" });
    }

    tip.likes += 1;
    await tip.save();

    res.status(200).json({ likes: tip.likes });
  } catch (error) {
    console.error("Lỗi khi tăng like:", error);
    res.status(500).json({ message: "Lỗi khi tăng like", error: error.message });
  }
};

// Lấy các mẹo nổi bật
exports.likeTip = likeTip;const getFeaturedTips = async (req, res) => {
  try {
    const featuredTips = await _Tips.default.find({ isFeatured: true }).sort({ datePublished: -1 });

    res.status(200).json(featuredTips);
  } catch (error) {
    console.error("Lỗi khi lấy mẹo nổi bật:", error);
    res.status(500).json({ message: "Lỗi khi lấy mẹo nổi bật", error: error.message });
  }
};exports.getFeaturedTips = getFeaturedTips;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVGlwcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2Nsb3VkaW5hcnkiLCJfZnMiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJnZXRBbGxUaXBzIiwicmVxIiwicmVzIiwidGlwcyIsIlRpcCIsImZpbmQiLCJzb3J0IiwiY3JlYXRlZEF0Iiwic3RhdHVzIiwianNvbiIsImVycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJleHBvcnRzIiwiZ2V0VGlwQnlJZCIsImlkIiwicGFyYW1zIiwidGlwIiwiZmluZEJ5SWQiLCJnZXRUaXBzQnlDYXRlZ29yeSIsImNhdGVnb3J5IiwiY3JlYXRlVGlwIiwiaW1hZ2VVcmwiLCJmaWxlIiwicmVzdWx0IiwiY2xvdWRpbmFyeSIsInVwbG9hZGVyIiwidXBsb2FkIiwicGF0aCIsImZvbGRlciIsInJlc291cmNlX3R5cGUiLCJzZWN1cmVfdXJsIiwiZnMiLCJ1bmxpbmtTeW5jIiwidXBsb2FkRXJyb3IiLCJleGlzdHNTeW5jIiwidGFncyIsImJvZHkiLCJBcnJheSIsImlzQXJyYXkiLCJKU09OIiwicGFyc2UiLCJzcGxpdCIsIm1hcCIsInRhZyIsInRyaW0iLCJkYXRlUHVibGlzaGVkIiwiRGF0ZSIsIm5ld1RpcCIsInRpdGxlIiwiaW1hZ2UiLCJjb250ZW50IiwiYXV0aG9yIiwiYXV0aG9yVGl0bGUiLCJsaWtlcyIsImlzRmVhdHVyZWQiLCJzYXZlZFRpcCIsInNhdmUiLCJ1cGRhdGVUaXAiLCJleGlzdGluZ1RpcCIsInVwZGF0ZWRUaXAiLCJmaW5kQnlJZEFuZFVwZGF0ZSIsInVuZGVmaW5lZCIsIm5ldyIsImRlbGV0ZVRpcCIsImZpbmRCeUlkQW5kRGVsZXRlIiwibGlrZVRpcCIsImdldEZlYXR1cmVkVGlwcyIsImZlYXR1cmVkVGlwcyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9Db250cm9sbGVyL3RpcHNDb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUaXAgZnJvbSBcIi4uL01vZGVsL1RpcHMuanNcIjtcclxuaW1wb3J0IGNsb3VkaW5hcnkgZnJvbSBcIi4uL2NvbmZpZy9jbG91ZGluYXJ5LmpzXCI7XHJcbmltcG9ydCBmcyBmcm9tIFwiZnNcIjtcclxuXHJcbi8vIEzhuqV5IHThuqV0IGPhuqMgbeG6uW8gaGF5XHJcbmV4cG9ydCBjb25zdCBnZXRBbGxUaXBzID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHRpcHMgPSBhd2FpdCBUaXAuZmluZCgpLnNvcnQoeyBjcmVhdGVkQXQ6IC0xIH0pO1xyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24odGlwcyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCBt4bq5bzpcIiwgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIG3hurlvXCIsIGVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIEzhuqV5IG3hurlvIGhheSB0aGVvIElEXHJcbmV4cG9ydCBjb25zdCBnZXRUaXBCeUlkID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XHJcbiAgICBjb25zdCB0aXAgPSBhd2FpdCBUaXAuZmluZEJ5SWQoaWQpO1xyXG4gICAgXHJcbiAgICBpZiAoIXRpcCkge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiBcIktow7RuZyB0w6xtIHRo4bqleSBt4bq5b1wiIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih0aXApO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiTOG7l2kga2hpIGzhuqV5IGNoaSB0aeG6v3QgbeG6uW86XCIsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJM4buXaSBraGkgbOG6pXkgY2hpIHRp4bq/dCBt4bq5b1wiLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9KTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBM4bqleSBt4bq5byBoYXkgdGhlbyBkYW5oIG3hu6VjXHJcbmV4cG9ydCBjb25zdCBnZXRUaXBzQnlDYXRlZ29yeSA9IGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IGNhdGVnb3J5IH0gPSByZXEucGFyYW1zO1xyXG4gICAgY29uc3QgdGlwcyA9IGF3YWl0IFRpcC5maW5kKHsgY2F0ZWdvcnkgfSkuc29ydCh7IGNyZWF0ZWRBdDogLTEgfSk7XHJcbiAgICBcclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHRpcHMpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiTOG7l2kga2hpIGzhuqV5IG3hurlvIHRoZW8gZGFuaCBt4bulYzpcIiwgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBcIkzhu5dpIGtoaSBs4bqleSBt4bq5byB0aGVvIGRhbmggbeG7pWNcIiwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gVOG6oW8gbeG6uW8gaGF5IG3hu5tpXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVUaXAgPSBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICB0cnkge1xyXG4gICAgbGV0IGltYWdlVXJsID0gXCJcIjtcclxuICAgIFxyXG4gICAgLy8gWOG7rSBsw70gdXBsb2FkIOG6o25oIG7hur91IGPDs1xyXG4gICAgaWYgKHJlcS5maWxlKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2xvdWRpbmFyeS51cGxvYWRlci51cGxvYWQocmVxLmZpbGUucGF0aCwge1xyXG4gICAgICAgICAgZm9sZGVyOiBcInRpcHNcIixcclxuICAgICAgICAgIHJlc291cmNlX3R5cGU6IFwiYXV0b1wiLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGltYWdlVXJsID0gcmVzdWx0LnNlY3VyZV91cmw7XHJcbiAgICAgICAgLy8gWMOzYSBmaWxlIHThuqFtIHNhdSBraGkgxJHDoyB1cGxvYWRcclxuICAgICAgICBmcy51bmxpbmtTeW5jKHJlcS5maWxlLnBhdGgpO1xyXG4gICAgICB9IGNhdGNoICh1cGxvYWRFcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJM4buXaSBraGkgdXBsb2FkIOG6o25oOlwiLCB1cGxvYWRFcnJvcik7XHJcbiAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMocmVxLmZpbGUucGF0aCkpIHtcclxuICAgICAgICAgIGZzLnVubGlua1N5bmMocmVxLmZpbGUucGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IFwiTOG7l2kga2hpIHVwbG9hZCDhuqNuaFwiLCBlcnJvcjogdXBsb2FkRXJyb3IubWVzc2FnZSB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBY4butIGzDvSB0YWdzXHJcbiAgICBsZXQgdGFncyA9IFtdO1xyXG4gICAgaWYgKHJlcS5ib2R5LnRhZ3MpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0YWdzID0gQXJyYXkuaXNBcnJheShyZXEuYm9keS50YWdzKSA/IHJlcS5ib2R5LnRhZ3MgOiBKU09OLnBhcnNlKHJlcS5ib2R5LnRhZ3MpO1xyXG4gICAgICB9IGNhdGNoIHtcclxuICAgICAgICB0YWdzID0gcmVxLmJvZHkudGFncy5zcGxpdChcIixcIikubWFwKHRhZyA9PiB0YWcudHJpbSgpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBGb3JtYXQgbmfDoHkgeHXhuqV0IGLhuqNuXHJcbiAgICBsZXQgZGF0ZVB1Ymxpc2hlZCA9IHJlcS5ib2R5LmRhdGVQdWJsaXNoZWQgPyBuZXcgRGF0ZShyZXEuYm9keS5kYXRlUHVibGlzaGVkKSA6IG5ldyBEYXRlKCk7XHJcbiAgICBcclxuICAgIGNvbnN0IG5ld1RpcCA9IG5ldyBUaXAoe1xyXG4gICAgICB0aXRsZTogcmVxLmJvZHkudGl0bGUsXHJcbiAgICAgIGNhdGVnb3J5OiByZXEuYm9keS5jYXRlZ29yeSxcclxuICAgICAgaW1hZ2U6IGltYWdlVXJsIHx8IHJlcS5ib2R5LmltYWdlLFxyXG4gICAgICBjb250ZW50OiByZXEuYm9keS5jb250ZW50LFxyXG4gICAgICBhdXRob3I6IHJlcS5ib2R5LmF1dGhvcixcclxuICAgICAgYXV0aG9yVGl0bGU6IHJlcS5ib2R5LmF1dGhvclRpdGxlLFxyXG4gICAgICB0YWdzOiB0YWdzLFxyXG4gICAgICBsaWtlczogcmVxLmJvZHkubGlrZXMgfHwgMCxcclxuICAgICAgZGF0ZVB1Ymxpc2hlZDogZGF0ZVB1Ymxpc2hlZCxcclxuICAgICAgaXNGZWF0dXJlZDogcmVxLmJvZHkuaXNGZWF0dXJlZCA9PT0gXCJ0cnVlXCJcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCBzYXZlZFRpcCA9IGF3YWl0IG5ld1RpcC5zYXZlKCk7XHJcbiAgICByZXMuc3RhdHVzKDIwMSkuanNvbihzYXZlZFRpcCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJM4buXaSBraGkgdOG6oW8gbeG6uW8gbeG7m2k6XCIsIGVycm9yKTtcclxuICAgIC8vIFjDs2EgZmlsZSB04bqhbSBu4bq/dSBjw7MgbOG7l2kgeOG6o3kgcmFcclxuICAgIGlmIChyZXEuZmlsZSAmJiBmcy5leGlzdHNTeW5jKHJlcS5maWxlLnBhdGgpKSB7XHJcbiAgICAgIGZzLnVubGlua1N5bmMocmVxLmZpbGUucGF0aCk7XHJcbiAgICB9XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IFwiTOG7l2kga2hpIHThuqFvIG3hurlvIG3hu5tpXCIsIGVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIEPhuq1wIG5o4bqtdCBt4bq5byBoYXlcclxuZXhwb3J0IGNvbnN0IHVwZGF0ZVRpcCA9IGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xyXG4gICAgXHJcbiAgICAvLyBLaeG7g20gdHJhIG3hurlvIGPDsyB04buTbiB04bqhaSBraMO0bmdcclxuICAgIGNvbnN0IGV4aXN0aW5nVGlwID0gYXdhaXQgVGlwLmZpbmRCeUlkKGlkKTtcclxuICAgIGlmICghZXhpc3RpbmdUaXApIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogXCJLaMO0bmcgdMOsbSB0aOG6pXkgbeG6uW9cIiB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gWOG7rSBsw70gdXBsb2FkIOG6o25oIG3hu5tpIG7hur91IGPDs1xyXG4gICAgbGV0IGltYWdlVXJsID0gZXhpc3RpbmdUaXAuaW1hZ2U7XHJcbiAgICBpZiAocmVxLmZpbGUpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbG91ZGluYXJ5LnVwbG9hZGVyLnVwbG9hZChyZXEuZmlsZS5wYXRoLCB7XHJcbiAgICAgICAgICBmb2xkZXI6IFwidGlwc1wiLFxyXG4gICAgICAgICAgcmVzb3VyY2VfdHlwZTogXCJhdXRvXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaW1hZ2VVcmwgPSByZXN1bHQuc2VjdXJlX3VybDtcclxuICAgICAgICAvLyBYw7NhIGZpbGUgdOG6oW0gc2F1IGtoaSDEkcOjIHVwbG9hZFxyXG4gICAgICAgIGZzLnVubGlua1N5bmMocmVxLmZpbGUucGF0aCk7XHJcbiAgICAgIH0gY2F0Y2ggKHVwbG9hZEVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkzhu5dpIGtoaSB1cGxvYWQg4bqjbmg6XCIsIHVwbG9hZEVycm9yKTtcclxuICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhyZXEuZmlsZS5wYXRoKSkge1xyXG4gICAgICAgICAgZnMudW5saW5rU3luYyhyZXEuZmlsZS5wYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJM4buXaSBraGkgdXBsb2FkIOG6o25oXCIsIGVycm9yOiB1cGxvYWRFcnJvci5tZXNzYWdlIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHJlcS5ib2R5LmltYWdlKSB7XHJcbiAgICAgIC8vIE7hur91IGPDsyBpbWFnZSBVUkwgdHJvbmcgcmVxdWVzdCBib2R5XHJcbiAgICAgIGltYWdlVXJsID0gcmVxLmJvZHkuaW1hZ2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFjhu60gbMO9IHRhZ3NcclxuICAgIGxldCB0YWdzID0gZXhpc3RpbmdUaXAudGFncztcclxuICAgIGlmIChyZXEuYm9keS50YWdzKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGFncyA9IEFycmF5LmlzQXJyYXkocmVxLmJvZHkudGFncykgPyByZXEuYm9keS50YWdzIDogSlNPTi5wYXJzZShyZXEuYm9keS50YWdzKTtcclxuICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgdGFncyA9IHJlcS5ib2R5LnRhZ3Muc3BsaXQoXCIsXCIpLm1hcCh0YWcgPT4gdGFnLnRyaW0oKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gRm9ybWF0IG5nw6B5IHh14bqldCBi4bqjblxyXG4gICAgbGV0IGRhdGVQdWJsaXNoZWQgPSBleGlzdGluZ1RpcC5kYXRlUHVibGlzaGVkO1xyXG4gICAgaWYgKHJlcS5ib2R5LmRhdGVQdWJsaXNoZWQpIHtcclxuICAgICAgZGF0ZVB1Ymxpc2hlZCA9IG5ldyBEYXRlKHJlcS5ib2R5LmRhdGVQdWJsaXNoZWQpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCB1cGRhdGVkVGlwID0gYXdhaXQgVGlwLmZpbmRCeUlkQW5kVXBkYXRlKFxyXG4gICAgICBpZCxcclxuICAgICAge1xyXG4gICAgICAgIHRpdGxlOiByZXEuYm9keS50aXRsZSB8fCBleGlzdGluZ1RpcC50aXRsZSxcclxuICAgICAgICBjYXRlZ29yeTogcmVxLmJvZHkuY2F0ZWdvcnkgfHwgZXhpc3RpbmdUaXAuY2F0ZWdvcnksXHJcbiAgICAgICAgaW1hZ2U6IGltYWdlVXJsLFxyXG4gICAgICAgIGNvbnRlbnQ6IHJlcS5ib2R5LmNvbnRlbnQgfHwgZXhpc3RpbmdUaXAuY29udGVudCxcclxuICAgICAgICBhdXRob3I6IHJlcS5ib2R5LmF1dGhvciB8fCBleGlzdGluZ1RpcC5hdXRob3IsXHJcbiAgICAgICAgYXV0aG9yVGl0bGU6IHJlcS5ib2R5LmF1dGhvclRpdGxlIHx8IGV4aXN0aW5nVGlwLmF1dGhvclRpdGxlLFxyXG4gICAgICAgIHRhZ3M6IHRhZ3MsXHJcbiAgICAgICAgbGlrZXM6IHJlcS5ib2R5Lmxpa2VzICE9PSB1bmRlZmluZWQgPyByZXEuYm9keS5saWtlcyA6IGV4aXN0aW5nVGlwLmxpa2VzLFxyXG4gICAgICAgIGRhdGVQdWJsaXNoZWQ6IGRhdGVQdWJsaXNoZWQsXHJcbiAgICAgICAgaXNGZWF0dXJlZDogcmVxLmJvZHkuaXNGZWF0dXJlZCAhPT0gdW5kZWZpbmVkID8gXHJcbiAgICAgICAgICByZXEuYm9keS5pc0ZlYXR1cmVkID09PSBcInRydWVcIiB8fCByZXEuYm9keS5pc0ZlYXR1cmVkID09PSB0cnVlIDogXHJcbiAgICAgICAgICBleGlzdGluZ1RpcC5pc0ZlYXR1cmVkXHJcbiAgICAgIH0sXHJcbiAgICAgIHsgbmV3OiB0cnVlIH1cclxuICAgICk7XHJcbiAgICBcclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHVwZGF0ZWRUaXApO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiTOG7l2kga2hpIGPhuq1wIG5o4bqtdCBt4bq5bzpcIiwgZXJyb3IpO1xyXG4gICAgLy8gWMOzYSBmaWxlIHThuqFtIG7hur91IGPDsyBs4buXaSB44bqjeSByYVxyXG4gICAgaWYgKHJlcS5maWxlICYmIGZzLmV4aXN0c1N5bmMocmVxLmZpbGUucGF0aCkpIHtcclxuICAgICAgZnMudW5saW5rU3luYyhyZXEuZmlsZS5wYXRoKTtcclxuICAgIH1cclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJM4buXaSBraGkgY+G6rXAgbmjhuq10IG3hurlvXCIsIGVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIFjDs2EgbeG6uW8gaGF5XHJcbmV4cG9ydCBjb25zdCBkZWxldGVUaXAgPSBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcclxuICAgIFxyXG4gICAgY29uc3QgdGlwID0gYXdhaXQgVGlwLmZpbmRCeUlkQW5kRGVsZXRlKGlkKTtcclxuICAgIFxyXG4gICAgaWYgKCF0aXApIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogXCJLaMO0bmcgdMOsbSB0aOG6pXkgbeG6uW9cIiB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyBtZXNzYWdlOiBcIljDs2EgbeG6uW8gdGjDoG5oIGPDtG5nXCIgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJM4buXaSBraGkgeMOzYSBt4bq5bzpcIiwgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBcIkzhu5dpIGtoaSB4w7NhIG3hurlvXCIsIGVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIFTEg25nIGxpa2VzIGNobyBt4bq5byBoYXlcclxuZXhwb3J0IGNvbnN0IGxpa2VUaXAgPSBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcclxuICAgIFxyXG4gICAgY29uc3QgdGlwID0gYXdhaXQgVGlwLmZpbmRCeUlkKGlkKTtcclxuICAgIFxyXG4gICAgaWYgKCF0aXApIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogXCJLaMO0bmcgdMOsbSB0aOG6pXkgbeG6uW9cIiB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdGlwLmxpa2VzICs9IDE7XHJcbiAgICBhd2FpdCB0aXAuc2F2ZSgpO1xyXG4gICAgXHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IGxpa2VzOiB0aXAubGlrZXMgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJM4buXaSBraGkgdMSDbmcgbGlrZTpcIiwgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBcIkzhu5dpIGtoaSB0xINuZyBsaWtlXCIsIGVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIEzhuqV5IGPDoWMgbeG6uW8gbuG7lWkgYuG6rXRcclxuZXhwb3J0IGNvbnN0IGdldEZlYXR1cmVkVGlwcyA9IGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBmZWF0dXJlZFRpcHMgPSBhd2FpdCBUaXAuZmluZCh7IGlzRmVhdHVyZWQ6IHRydWUgfSkuc29ydCh7IGRhdGVQdWJsaXNoZWQ6IC0xIH0pO1xyXG4gICAgXHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbihmZWF0dXJlZFRpcHMpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiTOG7l2kga2hpIGzhuqV5IG3hurlvIG7hu5VpIGLhuq10OlwiLCBlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IFwiTOG7l2kga2hpIGzhuqV5IG3hurlvIG7hu5VpIGLhuq10XCIsIGVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gIH1cclxufTsgIl0sIm1hcHBpbmdzIjoiZ1FBQUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsR0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBLFFBQW9CLFNBQUFELHVCQUFBSSxDQUFBLFVBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBOztBQUVwQjtBQUNPLE1BQU1HLFVBQVUsR0FBRyxNQUFBQSxDQUFPQyxHQUFHLEVBQUVDLEdBQUcsS0FBSztFQUM1QyxJQUFJO0lBQ0YsTUFBTUMsSUFBSSxHQUFHLE1BQU1DLGFBQUcsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEVBQUVDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckRMLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUNOLElBQUksQ0FBQztFQUM1QixDQUFDLENBQUMsT0FBT08sS0FBSyxFQUFFO0lBQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLDRCQUE0QixFQUFFQSxLQUFLLENBQUM7SUFDbERSLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUMsRUFBRUcsT0FBTyxFQUFFLDJCQUEyQixFQUFFRixLQUFLLEVBQUVBLEtBQUssQ0FBQ0UsT0FBTyxDQUFDLENBQUMsQ0FBQztFQUN0RjtBQUNGLENBQUM7O0FBRUQ7QUFBQUMsT0FBQSxDQUFBYixVQUFBLEdBQUFBLFVBQUEsQ0FDTyxNQUFNYyxVQUFVLEdBQUcsTUFBQUEsQ0FB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