"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = exports.customerLogController = void 0;var _CustomerLog = _interopRequireDefault(require("../Model/CustomerLog.js"));

/**
 * Controller for customer log operations
 */
const customerLogController = exports.customerLogController = {
  /**
   * Get all logs with pagination and filtering
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  getAllLogs: async (req, res) => {
    try {
      const {
        page = 1,
        limit = 20,
        action,
        status,
        startDate,
        endDate,
        customerId,
        customerEmail,
        sort = 'timestamp',
        order = -1
      } = req.query;

      // Build filter
      const filter = {};

      if (action) filter.action = action;
      if (status) filter.status = status;
      if (customerId) filter.customerId = customerId;
      if (customerEmail) filter.customerEmail = { $regex: customerEmail, $options: 'i' };

      // Date range filter
      if (startDate || endDate) {
        filter.timestamp = {};
        if (startDate) filter.timestamp.$gte = new Date(startDate);
        if (endDate) filter.timestamp.$lte = new Date(endDate);
      }

      // Calculate pagination
      const skip = (parseInt(page) - 1) * parseInt(limit);

      // Sort options
      const sortOptions = {};
      sortOptions[sort] = parseInt(order);

      // Get logs
      const logs = await _CustomerLog.default.find(filter).
      sort(sortOptions).
      skip(skip).
      limit(parseInt(limit)).
      exec();

      // Get total count for pagination
      const total = await _CustomerLog.default.countDocuments(filter);

      return res.status(200).json({
        success: true,
        data: logs,
        pagination: {
          total,
          page: parseInt(page),
          limit: parseInt(limit),
          pages: Math.ceil(total / parseInt(limit))
        }
      });
    } catch (error) {
      console.error('Error getting logs:', error);
      return res.status(500).json({
        success: false,
        message: 'Error retrieving logs',
        error: error.message
      });
    }
  },

  /**
   * Get logs for a specific customer
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  getCustomerLogs: async (req, res) => {
    try {
      const { customerId } = req.params;
      const { page = 1, limit = 20, action, status } = req.query;

      // Build filter
      const filter = { customerId };
      if (action) filter.action = action;
      if (status) filter.status = status;

      // Calculate pagination
      const skip = (parseInt(page) - 1) * parseInt(limit);

      // Get logs
      const logs = await _CustomerLog.default.find(filter).
      sort({ timestamp: -1 }).
      skip(skip).
      limit(parseInt(limit)).
      exec();

      // Get total count for pagination
      const total = await _CustomerLog.default.countDocuments(filter);

      return res.status(200).json({
        success: true,
        data: logs,
        pagination: {
          total,
          page: parseInt(page),
          limit: parseInt(limit),
          pages: Math.ceil(total / parseInt(limit))
        }
      });
    } catch (error) {
      console.error('Error getting customer logs:', error);
      return res.status(500).json({
        success: false,
        message: 'Error retrieving customer logs',
        error: error.message
      });
    }
  },

  /**
   * Get logs by action type
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  getLogsByAction: async (req, res) => {
    try {
      const { action } = req.params;
      const { page = 1, limit = 20, status } = req.query;

      // Build filter
      const filter = { action };
      if (status) filter.status = status;

      // Calculate pagination
      const skip = (parseInt(page) - 1) * parseInt(limit);

      // Get logs
      const logs = await _CustomerLog.default.find(filter).
      sort({ timestamp: -1 }).
      skip(skip).
      limit(parseInt(limit)).
      exec();

      // Get total count for pagination
      const total = await _CustomerLog.default.countDocuments(filter);

      return res.status(200).json({
        success: true,
        data: logs,
        pagination: {
          total,
          page: parseInt(page),
          limit: parseInt(limit),
          pages: Math.ceil(total / parseInt(limit))
        }
      });
    } catch (error) {
      console.error('Error getting logs by action:', error);
      return res.status(500).json({
        success: false,
        message: 'Error retrieving logs by action',
        error: error.message
      });
    }
  },

  /**
   * Get logs by status
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  getLogsByStatus: async (req, res) => {
    try {
      const { status } = req.params;
      const { page = 1, limit = 20, action } = req.query;

      // Build filter
      const filter = { status };
      if (action) filter.action = action;

      // Calculate pagination
      const skip = (parseInt(page) - 1) * parseInt(limit);

      // Get logs
      const logs = await _CustomerLog.default.find(filter).
      sort({ timestamp: -1 }).
      skip(skip).
      limit(parseInt(limit)).
      exec();

      // Get total count for pagination
      const total = await _CustomerLog.default.countDocuments(filter);

      return res.status(200).json({
        success: true,
        data: logs,
        pagination: {
          total,
          page: parseInt(page),
          limit: parseInt(limit),
          pages: Math.ceil(total / parseInt(limit))
        }
      });
    } catch (error) {
      console.error('Error getting logs by status:', error);
      return res.status(500).json({
        success: false,
        message: 'Error retrieving logs by status',
        error: error.message
      });
    }
  },

  /**
   * Get log statistics
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  getLogStats: async (req, res) => {
    try {
      const { startDate, endDate } = req.query;

      // Date range filter
      const dateFilter = {};
      if (startDate || endDate) {
        dateFilter.timestamp = {};
        if (startDate) dateFilter.timestamp.$gte = new Date(startDate);
        if (endDate) dateFilter.timestamp.$lte = new Date(endDate);
      }

      // Get statistics
      const stats = await Promise.all([
      // Total logs
      _CustomerLog.default.countDocuments(dateFilter),

      // Logs by action
      _CustomerLog.default.aggregate([
      { $match: dateFilter },
      { $group: { _id: '$action', count: { $sum: 1 } } },
      { $sort: { count: -1 } }]
      ),

      // Logs by status
      _CustomerLog.default.aggregate([
      { $match: dateFilter },
      { $group: { _id: '$status', count: { $sum: 1 } } },
      { $sort: { count: -1 } }]
      ),

      // Failed login attempts
      _CustomerLog.default.countDocuments({
        ...dateFilter,
        action: 'login',
        status: 'failed'
      }),

      // Successful logins
      _CustomerLog.default.countDocuments({
        ...dateFilter,
        action: 'login',
        status: 'success'
      })]
      );

      return res.status(200).json({
        success: true,
        data: {
          total: stats[0],
          byAction: stats[1],
          byStatus: stats[2],
          failedLogins: stats[3],
          successfulLogins: stats[4]
        }
      });
    } catch (error) {
      console.error('Error getting log statistics:', error);
      return res.status(500).json({
        success: false,
        message: 'Error retrieving log statistics',
        error: error.message
      });
    }
  },

  /**
   * Delete logs older than a certain date
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  deleteOldLogs: async (req, res) => {
    try {
      const { olderThan } = req.body;

      if (!olderThan) {
        return res.status(400).json({
          success: false,
          message: 'Missing olderThan parameter'
        });
      }

      const date = new Date(olderThan);

      if (isNaN(date.getTime())) {
        return res.status(400).json({
          success: false,
          message: 'Invalid date format'
        });
      }

      const result = await _CustomerLog.default.deleteMany({
        timestamp: { $lt: date }
      });

      return res.status(200).json({
        success: true,
        message: `Deleted ${result.deletedCount} logs older than ${date.toISOString()}`,
        deletedCount: result.deletedCount
      });
    } catch (error) {
      console.error('Error deleting old logs:', error);
      return res.status(500).json({
        success: false,
        message: 'Error deleting old logs',
        error: error.message
      });
    }
  }
};var _default = exports.default =

customerLogController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,