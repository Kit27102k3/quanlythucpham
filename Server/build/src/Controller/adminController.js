"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.updateRolePermissions = exports.updateAdmin = exports.getAllAdmins = exports.getAdminProfile = exports.getAdminById = exports.deleteAdmin = exports.createAdmin = exports.adminLogin = void 0;
var _adminModel = _interopRequireDefault(require("../Model/adminModel.js"));
var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));
var _bcryptjs = _interopRequireDefault(require("bcryptjs"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };} // File: adminAuthController.js

const adminLogin = async (req, res) => {
  try {
    const { userName, password } = req.body;

    // Kiểm tra admin tồn tại
    const admin = await _adminModel.default.findOne({ userName });
    if (!admin) {
      return res.status(404).json({ message: "Tài khoản không tồn tại" });
    }

    // Kiểm tra mật khẩu
    const isMatch = await admin.comparePassword(password);
    if (!isMatch) {
      return res.status(400).json({ message: "Mật khẩu không chính xác" });
    }

    // Kiểm tra tài khoản có active không
    if (!admin.isActive) {
      return res.status(403).json({ message: "Tài khoản đã bị vô hiệu hóa" });
    }

    // Tạo token
    const accessToken = _jsonwebtoken.default.sign(
      {
        id: admin._id,
        role: admin.role,
        permissions: admin.permissions
      },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    const refreshToken = _jsonwebtoken.default.sign(
      { id: admin._id },
      process.env.JWT_REFRESH_SECRET,
      { expiresIn: "7d" }
    );

    // Cập nhật last login
    admin.lastLogin = new Date();
    await admin.save();

    res.status(200).json({
      accessToken,
      refreshToken,
      userId: admin._id,
      role: admin.role,
      permissions: admin.permissions,
      fullName: admin.fullName
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};exports.adminLogin = adminLogin;

const getAdminProfile = async (req, res) => {
  try {
    const admin = await _adminModel.default.findById(req.user.id).select("-password");
    if (!admin) {
      return res.status(404).json({ message: "Admin không tồn tại" });
    }
    res.status(200).json(admin);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Hàm helper để lấy quyền mặc định theo role
exports.getAdminProfile = getAdminProfile;const getDefaultPermissions = (role) => {
  switch (role) {
    case "admin":
      return [
      "Thêm",
      "Xem",
      "Sửa",
      "Xóa",
      "Quản lý người dùng",
      "Quản lý sản phẩm",
      "Quản lý đơn hàng",
      "Quản lý danh mục",
      "Quản lý cài đặt"];

    case "manager":
      return [
      "Thêm",
      "Xem",
      "Sửa",
      "Quản lý sản phẩm",
      "Quản lý đơn hàng",
      "Quản lý danh mục"];

    case "staff":
      return [
      "Xem",
      "Thêm",
      "Sửa",
      "Quản lý sản phẩm"];

    default:
      return ["Xem"];
  }
};

const createAdmin = async (req, res) => {
  try {
    const { userName, password, fullName, email, phone, birthday, role } = req.body;

    // Kiểm tra email đã tồn tại
    const existingEmail = await _adminModel.default.findOne({ email });
    if (existingEmail) {
      return res.status(400).json({ message: "Email đã được sử dụng" });
    }

    // Kiểm tra username đã tồn tại
    const existingUsername = await _adminModel.default.findOne({ userName });
    if (existingUsername) {
      return res.status(400).json({ message: "Tên đăng nhập đã được sử dụng" });
    }

    // Tạo admin mới
    const newAdmin = new _adminModel.default({
      userName,
      password,
      fullName,
      email,
      phone,
      birthday,
      role,
      permissions: getDefaultPermissions(role)
    });

    const admin = await newAdmin.save();
    res.status(201).json(admin);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};exports.createAdmin = createAdmin;

const getAllAdmins = async (req, res) => {
  try {
    const admins = await _adminModel.default.find().select('-password');
    res.status(200).json(admins);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};exports.getAllAdmins = getAllAdmins;

const updateAdmin = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = { ...req.body };

    // Nếu có thay đổi mật khẩu, hash mật khẩu mới
    if (updateData.password) {
      const salt = await _bcryptjs.default.genSalt(10);
      updateData.password = await _bcryptjs.default.hash(updateData.password, salt);
    }

    // Cập nhật quyền nếu thay đổi role
    if (updateData.role) {
      updateData.permissions = getDefaultPermissions(updateData.role);
    }

    const admin = await _adminModel.default.findByIdAndUpdate(
      id,
      updateData,
      { new: true }
    ).select('-password');

    if (!admin) {
      return res.status(404).json({ message: "Không tìm thấy admin" });
    }

    res.status(200).json(admin);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};exports.updateAdmin = updateAdmin;

const deleteAdmin = async (req, res) => {
  try {
    const { id } = req.params;
    const admin = await _adminModel.default.findByIdAndDelete(id);

    if (!admin) {
      return res.status(404).json({ message: "Không tìm thấy admin" });
    }

    res.status(200).json({ message: "Xóa admin thành công" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};exports.deleteAdmin = deleteAdmin;

const getAdminById = async (req, res) => {
  try {
    const { id } = req.params;
    const admin = await _adminModel.default.findById(id).select('-password');

    if (!admin) {
      return res.status(404).json({ message: "Không tìm thấy admin" });
    }

    res.status(200).json(admin);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};exports.getAdminById = getAdminById;

const updateRolePermissions = async (req, res) => {
  try {
    const { roleKey } = req.params;
    const { permissions } = req.body;

    // Kiểm tra xem mảng permissions có hợp lệ không
    if (!Array.isArray(permissions)) {
      return res.status(400).json({ message: "Permissions phải là một mảng" });
    }

    // Tìm tất cả admin/manager/employee với roleKey và cập nhật quyền
    const result = await _adminModel.default.updateMany(
      { role: roleKey },
      { $set: { permissions: permissions } }
    );

    // Optional: Log số lượng documents đã được cập nhật
    console.log(`Updated permissions for ${result.modifiedCount} users with role ${roleKey}`);

    res.status(200).json({
      success: true,
      message: `Cập nhật quyền cho vai trò ${roleKey} thành công.`, // Message tiếng Việt
      modifiedCount: result.modifiedCount
    });
  } catch (error) {
    console.error("Error updating role permissions:", error);
    res.status(500).json({ message: "Lỗi server khi cập nhật quyền vai trò" });
  }
};exports.updateRolePermissions = updateRolePermissions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,