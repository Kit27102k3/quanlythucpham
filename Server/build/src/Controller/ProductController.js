"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.getLowStockProducts = exports.getBestSellingProducts = void 0;var _BestSellingProduct = _interopRequireDefault(require("../Model/BestSellingProduct.js"));
var _Products = _interopRequireDefault(require("../Model/Products.js"));
// Get best selling products
const getBestSellingProducts = async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 4;
    const period = req.query.period || 'month'; // Default to monthly best sellers

    // Get best selling products
    const bestSellers = await _BestSellingProduct.default.getBestSellers(limit, period);

    // Map to ensure we have the complete product data
    const products = bestSellers.map((item) => {
      if (item.productId) {
        return {
          _id: item.productId._id,
          productName: item.productId.productName,
          productPrice: item.productId.productPrice,
          productStatus: item.productId.productStatus,
          productImages: item.productId.productImages,
          productCategory: item.productCategory,
          productDiscount: item.productId.productDiscount || 0,
          soldCount: item.soldCount
        };
      }
      return null;
    }).filter(Boolean); // Remove any null entries

    return res.status(200).json(products);
  } catch (error) {
    console.error("Error retrieving best selling products:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};exports.getBestSellingProducts = getBestSellingProducts;

const getLowStockProducts = async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 5;
    const criticalStock = parseInt(req.query.criticalStock) || 20;

    console.log(`Fetching ${limit} products with stock under ${criticalStock}`);

    const products = await _Products.default.find({
      productStock: {
        $lt: criticalStock,
        $gt: 0 // Exclude products with zero stock
      }
    }).
    sort({ productStock: 1 }) // Sort by stock ascending (lowest first)
    .limit(limit).
    select('productName productCategory productStock productImages').
    lean();

    if (!products || products.length === 0) {
      console.log('No low stock products found');
      return res.json([]);
    }

    // Transform the data for frontend
    const result = products.map((product) => ({
      id: product._id,
      name: product.productName,
      category: product.productCategory || 'Không phân loại',
      stock: product.productStock,
      image: product.productImages && product.productImages.length > 0 ? product.productImages[0] : null,
      status: product.productStock <= 5 ? 'Sắp hết' : product.productStock <= 10 ? 'Cảnh báo' : 'Thấp'
    }));

    console.log('Found low stock products:', result);
    res.json(result);
  } catch (error) {
    console.error('Error fetching low stock products:', error);
    res.status(500).json({
      message: 'Đã xảy ra lỗi khi lấy sản phẩm tồn kho thấp',
      error: error.message
    });
  }
};exports.getLowStockProducts = getLowStockProducts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQmVzdFNlbGxpbmdQcm9kdWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfUHJvZHVjdHMiLCJnZXRCZXN0U2VsbGluZ1Byb2R1Y3RzIiwicmVxIiwicmVzIiwibGltaXQiLCJwYXJzZUludCIsInF1ZXJ5IiwicGVyaW9kIiwiYmVzdFNlbGxlcnMiLCJCZXN0U2VsbGluZ1Byb2R1Y3QiLCJnZXRCZXN0U2VsbGVycyIsInByb2R1Y3RzIiwibWFwIiwiaXRlbSIsInByb2R1Y3RJZCIsIl9pZCIsInByb2R1Y3ROYW1lIiwicHJvZHVjdFByaWNlIiwicHJvZHVjdFN0YXR1cyIsInByb2R1Y3RJbWFnZXMiLCJwcm9kdWN0Q2F0ZWdvcnkiLCJwcm9kdWN0RGlzY291bnQiLCJzb2xkQ291bnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJleHBvcnRzIiwiZ2V0TG93U3RvY2tQcm9kdWN0cyIsImNyaXRpY2FsU3RvY2siLCJsb2ciLCJQcm9kdWN0IiwiZmluZCIsInByb2R1Y3RTdG9jayIsIiRsdCIsIiRndCIsInNvcnQiLCJzZWxlY3QiLCJsZWFuIiwibGVuZ3RoIiwicmVzdWx0IiwicHJvZHVjdCIsImlkIiwibmFtZSIsImNhdGVnb3J5Iiwic3RvY2siLCJpbWFnZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9Db250cm9sbGVyL1Byb2R1Y3RDb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCZXN0U2VsbGluZ1Byb2R1Y3QgZnJvbSBcIi4uL01vZGVsL0Jlc3RTZWxsaW5nUHJvZHVjdC5qc1wiO1xuaW1wb3J0IFByb2R1Y3QgZnJvbSBcIi4uL01vZGVsL1Byb2R1Y3RzLmpzXCI7XG4vLyBHZXQgYmVzdCBzZWxsaW5nIHByb2R1Y3RzXG5leHBvcnQgY29uc3QgZ2V0QmVzdFNlbGxpbmdQcm9kdWN0cyA9IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGxpbWl0ID0gcGFyc2VJbnQocmVxLnF1ZXJ5LmxpbWl0KSB8fCA0O1xuICAgIGNvbnN0IHBlcmlvZCA9IHJlcS5xdWVyeS5wZXJpb2QgfHwgJ21vbnRoJzsgLy8gRGVmYXVsdCB0byBtb250aGx5IGJlc3Qgc2VsbGVyc1xuICAgIFxuICAgIC8vIEdldCBiZXN0IHNlbGxpbmcgcHJvZHVjdHNcbiAgICBjb25zdCBiZXN0U2VsbGVycyA9IGF3YWl0IEJlc3RTZWxsaW5nUHJvZHVjdC5nZXRCZXN0U2VsbGVycyhsaW1pdCwgcGVyaW9kKTtcbiAgICBcbiAgICAvLyBNYXAgdG8gZW5zdXJlIHdlIGhhdmUgdGhlIGNvbXBsZXRlIHByb2R1Y3QgZGF0YVxuICAgIGNvbnN0IHByb2R1Y3RzID0gYmVzdFNlbGxlcnMubWFwKGl0ZW0gPT4ge1xuICAgICAgaWYgKGl0ZW0ucHJvZHVjdElkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgX2lkOiBpdGVtLnByb2R1Y3RJZC5faWQsXG4gICAgICAgICAgcHJvZHVjdE5hbWU6IGl0ZW0ucHJvZHVjdElkLnByb2R1Y3ROYW1lLFxuICAgICAgICAgIHByb2R1Y3RQcmljZTogaXRlbS5wcm9kdWN0SWQucHJvZHVjdFByaWNlLFxuICAgICAgICAgIHByb2R1Y3RTdGF0dXM6IGl0ZW0ucHJvZHVjdElkLnByb2R1Y3RTdGF0dXMsXG4gICAgICAgICAgcHJvZHVjdEltYWdlczogaXRlbS5wcm9kdWN0SWQucHJvZHVjdEltYWdlcyxcbiAgICAgICAgICBwcm9kdWN0Q2F0ZWdvcnk6IGl0ZW0ucHJvZHVjdENhdGVnb3J5LFxuICAgICAgICAgIHByb2R1Y3REaXNjb3VudDogaXRlbS5wcm9kdWN0SWQucHJvZHVjdERpc2NvdW50IHx8IDAsXG4gICAgICAgICAgc29sZENvdW50OiBpdGVtLnNvbGRDb3VudFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSkuZmlsdGVyKEJvb2xlYW4pOyAvLyBSZW1vdmUgYW55IG51bGwgZW50cmllc1xuICAgIFxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihwcm9kdWN0cyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHJldHJpZXZpbmcgYmVzdCBzZWxsaW5nIHByb2R1Y3RzOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIiB9KTtcbiAgfVxufTsgXG5cbmV4cG9ydCBjb25zdCBnZXRMb3dTdG9ja1Byb2R1Y3RzID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgbGltaXQgPSBwYXJzZUludChyZXEucXVlcnkubGltaXQpIHx8IDU7XG4gICAgY29uc3QgY3JpdGljYWxTdG9jayA9IHBhcnNlSW50KHJlcS5xdWVyeS5jcml0aWNhbFN0b2NrKSB8fCAyMDtcblxuICAgIGNvbnNvbGUubG9nKGBGZXRjaGluZyAke2xpbWl0fSBwcm9kdWN0cyB3aXRoIHN0b2NrIHVuZGVyICR7Y3JpdGljYWxTdG9ja31gKTtcblxuICAgIGNvbnN0IHByb2R1Y3RzID0gYXdhaXQgUHJvZHVjdC5maW5kKHsgXG4gICAgICBwcm9kdWN0U3RvY2s6IHsgXG4gICAgICAgICRsdDogY3JpdGljYWxTdG9jayxcbiAgICAgICAgJGd0OiAwIC8vIEV4Y2x1ZGUgcHJvZHVjdHMgd2l0aCB6ZXJvIHN0b2NrXG4gICAgICB9IFxuICAgIH0pXG4gICAgLnNvcnQoeyBwcm9kdWN0U3RvY2s6IDEgfSkgLy8gU29ydCBieSBzdG9jayBhc2NlbmRpbmcgKGxvd2VzdCBmaXJzdClcbiAgICAubGltaXQobGltaXQpXG4gICAgLnNlbGVjdCgncHJvZHVjdE5hbWUgcHJvZHVjdENhdGVnb3J5IHByb2R1Y3RTdG9jayBwcm9kdWN0SW1hZ2VzJylcbiAgICAubGVhbigpO1xuXG4gICAgaWYgKCFwcm9kdWN0cyB8fCBwcm9kdWN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCdObyBsb3cgc3RvY2sgcHJvZHVjdHMgZm91bmQnKTtcbiAgICAgIHJldHVybiByZXMuanNvbihbXSk7XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBmcm9udGVuZFxuICAgIGNvbnN0IHJlc3VsdCA9IHByb2R1Y3RzLm1hcChwcm9kdWN0ID0+ICh7XG4gICAgICBpZDogcHJvZHVjdC5faWQsXG4gICAgICBuYW1lOiBwcm9kdWN0LnByb2R1Y3ROYW1lLFxuICAgICAgY2F0ZWdvcnk6IHByb2R1Y3QucHJvZHVjdENhdGVnb3J5IHx8ICdLaMO0bmcgcGjDom4gbG/huqFpJyxcbiAgICAgIHN0b2NrOiBwcm9kdWN0LnByb2R1Y3RTdG9jayxcbiAgICAgIGltYWdlOiBwcm9kdWN0LnByb2R1Y3RJbWFnZXMgJiYgcHJvZHVjdC5wcm9kdWN0SW1hZ2VzLmxlbmd0aCA+IDAgPyBwcm9kdWN0LnByb2R1Y3RJbWFnZXNbMF0gOiBudWxsLFxuICAgICAgc3RhdHVzOiBwcm9kdWN0LnByb2R1Y3RTdG9jayA8PSA1ID8gJ1Phuq9wIGjhur90JyA6IChwcm9kdWN0LnByb2R1Y3RTdG9jayA8PSAxMCA/ICdD4bqjbmggYsOhbycgOiAnVGjhuqVwJylcbiAgICB9KSk7XG5cbiAgICBjb25zb2xlLmxvZygnRm91bmQgbG93IHN0b2NrIHByb2R1Y3RzOicsIHJlc3VsdCk7XG4gICAgcmVzLmpzb24ocmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBsb3cgc3RvY2sgcHJvZHVjdHM6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgXG4gICAgICBtZXNzYWdlOiAnxJDDoyB44bqjeSByYSBs4buXaSBraGkgbOG6pXkgc+G6o24gcGjhuqltIHThu5NuIGtobyB0aOG6pXAnLFxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UgXG4gICAgfSk7XG4g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