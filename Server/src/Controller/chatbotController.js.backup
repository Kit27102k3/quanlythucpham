/* eslint-disable no-useless-escape */
/* eslint-disable no-empty */
/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */

import axios from 'axios';
import Product from "../Model/Products.js";
import dotenv from 'dotenv';
import { spawn } from 'child_process';
import path from 'path';
import fs from 'fs';

// Load environment variables
dotenv.config();

// Định nghĩa các pattern và từ khóa cho các intent
const intents = {
  price: {
    patterns: [
      "giá", "giá cả", "bao nhiêu tiền", "giá bao nhiêu", "chi phí", 
      "giá sản phẩm", "giá của sản phẩm", "giá của", "giá bao nhiêu", 
      "bao nhiêu", "giá thế nào", "giá như thế nào", "giá hiện tại", "phí"
    ],
    response: (product) => `Giá sản phẩm ${product.productName} là ${formatCurrency(product.productPrice)}${product.productDiscount > 0 ? `. Hiện đang giảm giá ${product.productDiscount}%, giá sau giảm còn ${formatCurrency(product.productPromoPrice || product.productPrice * (1 - product.productDiscount/100))}` : ''}`,
  },
  info: {
    patterns: [
      "thông tin", "chi tiết", "mô tả", "thế nào", "thông tin sản phẩm", 
      "thông tin chi tiết", "thông tin về", "thông tin của", "thông tin gì", 
      "cho tôi biết", "kể cho tôi", "nói cho tôi", "giới thiệu", "giới thiệu về",
      "là gì", "nói về", "biết về"
    ],
    response: (product) => {
      let response = `${product.productName}:`;
      
      if (product.productInfo) {
        response += `\n${product.productInfo}`;
      }
      
      if (product.productDetails) {
        response += `\n\nChi tiết: ${product.productDetails}`;
      }
      
      if (product.productOrigin) {
        response += `\n\nXuất xứ: ${product.productOrigin}`;
      }
      
      if (product.productWeight) {
        response += `\n\nKhối lượng: ${product.productWeight}g`;
      }
      
      return response;
    },
  },
  usage: {
    patterns: [
      "công dụng", "tác dụng", "dùng để", "dùng làm gì", "sử dụng", 
      "công dụng gì", "tác dụng gì", "dùng để làm gì", "sử dụng để làm gì", 
      "công dụng của", "tác dụng của", "dùng để làm", "sử dụng để làm", 
      "công dụng như thế nào", "tác dụng như thế nào", "có tác dụng gì",
      "ích lợi", "lợi ích", "tốt gì", "hiệu quả"
    ],
    response: (product) => {
      const usageInfo = product.productInfo || product.productDetails || "Không có thông tin chi tiết về công dụng";
      return `Công dụng của ${product.productName}:\n${usageInfo}`;
    },
  },
  origin: {
    patterns: [
      "xuất xứ", "sản xuất", "nước nào", "ở đâu", "nhà sản xuất", 
      "xuất xứ từ đâu", "sản xuất ở đâu", "sản xuất tại đâu", "sản xuất bởi", 
      "nhà sản xuất nào", "công ty nào", "thương hiệu nào", "thương hiệu", 
      "xuất xứ của", "sản xuất của", "nhà sản xuất của", "nguồn gốc", "đến từ đâu",
      "từ nước nào", "từ đâu"
    ],
    response: (product) => `Sản phẩm ${product.productName} có xuất xứ từ ${product.productOrigin || "chưa có thông tin"}`,
  },
  ingredients: {
    patterns: [
      "thành phần", "nguyên liệu", "chứa gì", "có gì", "thành phần gì", 
      "nguyên liệu gì", "chứa những gì", "có những gì", "thành phần của", 
      "nguyên liệu của", "chứa những thành phần gì", "có những thành phần gì", 
      "thành phần như thế nào", "nguyên liệu như thế nào", "được làm từ",
      "làm từ gì", "thành phần chính", "hỗn hợp", "chứa đựng", "bao gồm"
    ],
    response: (product) => `Thành phần của ${product.productName}:\n${product.ingredients || product.productDetails || "Chưa có thông tin chi tiết về thành phần"}`,
  },
  howToUse: {
    patterns: [
      "cách dùng", "hướng dẫn", "sử dụng như thế nào", "dùng thế nào", "dùng như nào", 
      "cách sử dụng", "hướng dẫn sử dụng", "dùng như thế nào", "sử dụng thế nào", 
      "cách dùng như thế nào", "hướng dẫn dùng", "cách sử dụng như thế nào", 
      "dùng như thế nào", "sử dụng như thế nào", "cách dùng của", "hướng dẫn của",
      "dùng sao", "sử dụng sao", "ăn thế nào", "uống thế nào", "chế biến ra sao",
      "làm sao để", "cách thức", "làm thế nào", "bảo quản", "dùng đúng cách"
    ],
    response: (product) => {
      const usageGuide = product.howToUse || product.productDetails || product.productInfo || "Chưa có thông tin chi tiết về cách sử dụng";
      return `Hướng dẫn sử dụng ${product.productName}:\n${usageGuide}`;
    },
  },
  relatedProducts: {
    patterns: [
      "sản phẩm liên quan", "sản phẩm tương tự", "sản phẩm khác", "các sản phẩm liên quan", 
      "sản phẩm giống", "sản phẩm tương tự", "sản phẩm cùng loại", "sản phẩm cùng danh mục", 
      "sản phẩm khác trong cùng danh mục", "sản phẩm khác trong cùng loại", 
      "sản phẩm khác trong cùng nhóm", "có sản phẩm nào khác", "các nước uống liên quan",
      "nước uống liên quan", "các nước uống tương tự", "nước uống tương tự", 
      "có nước uống nào khác"
    ],
    response: async (product) => {
      try {
        console.log("Tìm sản phẩm liên quan cho product:", product ? 
          { id: product._id, name: product.productName, category: product.productCategory } 
          : "Không có thông tin sản phẩm");
        
        // Nếu không có product, trả về thông báo lỗi
        if (!product) {
          console.log("Không có product, trả về thông báo lỗi");
          return "Vui lòng truy cập trang chi tiết sản phẩm để xem sản phẩm liên quan.";
        }
        
        // Sử dụng trường category hoặc productCategory (tùy theo schema)
        const categoryField = product.productCategory ? 'productCategory' : 'category';
        const categoryValue = product.productCategory || product.category;
        
        console.log(`Danh mục sản phẩm: field=${categoryField}, value=${categoryValue}`);
        
        // Kiểm tra nếu là nước uống, tìm theo từ khóa trong tên
        let query = { _id: { $ne: product._id } };
        
        if (product.productName.toLowerCase().includes('nước') || 
            product.productName.toLowerCase().includes('pepsi') || 
            product.productName.toLowerCase().includes('cocacola') ||
            product.productName.toLowerCase().includes('strongbow')) {
          // Nếu là nước uống, tìm các sản phẩm cùng loại nước uống
          console.log("Sản phẩm thuộc danh mục đồ uống, tìm kiếm đồ uống tương tự");
          query.$or = [
            { productName: { $regex: 'nước', $options: 'i' } },
            { productName: { $regex: 'pepsi', $options: 'i' } },
            { productName: { $regex: 'coca', $options: 'i' } },
            { productName: { $regex: 'strongbow', $options: 'i' } },
            { productName: { $regex: 'chai', $options: 'i' } },
            { productName: { $regex: 'lon', $options: 'i' } },
            { productName: { $regex: 'lốc', $options: 'i' } }
          ];
        } else if (categoryValue) {
          // Sử dụng category nếu có
          console.log(`Tìm kiếm sản phẩm theo category: ${categoryField}=${categoryValue}`);
          query[categoryField] = categoryValue;
        } else {
          // Nếu không có category, tìm sản phẩm có tên tương tự
          console.log("Không có thông tin danh mục, tìm kiếm theo tên sản phẩm tương tự");
          const words = product.productName.split(' ').filter(word => word.length > 3);
          if (words.length > 0) {
            const regexPatterns = words.map(word => new RegExp(word, 'i'));
            query.productName = { $in: regexPatterns };
          }
        }
        
        console.log("Query tìm sản phẩm liên quan:", JSON.stringify(query));
        
        // Tìm sản phẩm liên quan với query đã xây dựng
        const relatedProducts = await Product.find(query).limit(4);
        console.log(`Đã tìm thấy ${relatedProducts.length} sản phẩm liên quan`);

        if (relatedProducts.length === 0) {
          // Nếu không tìm thấy sản phẩm liên quan, thử tìm bất kỳ sản phẩm nào
          console.log("Không tìm thấy sản phẩm liên quan, tìm kiếm sản phẩm ngẫu nhiên");
          const randomProducts = await Product.find({ _id: { $ne: product._id } }).limit(4);
          
          if (randomProducts.length === 0) {
            console.log("Không tìm thấy sản phẩm nào, trả về thông báo");
            return "Hiện tại chưa có sản phẩm liên quan nào.";
          }
          
          // Tạo phản hồi với sản phẩm ngẫu nhiên
          const productElements = randomProducts.map(p => {
            const imageUrl = p.productImages && p.productImages.length > 0 
              ? p.productImages[0] 
              : "default-product.jpg";
              
            return {
              type: "product",
              id: p._id,
              name: p.productName,
              price: p.productPrice,
              image: imageUrl,
              slug: createSlug(p.productName),
              category: p.productCategory || p.category || "Không xác định"
            };
          });
          
          return {
            text: `Các sản phẩm khác bạn có thể quan tâm:\n\n`,
            products: productElements,
            type: "relatedProducts",
            nameCategory: "Các sản phẩm đề xuất"
          };
        }

        // Tạo tiêu đề hiển thị cho danh mục
        const categoryDisplayName = categoryValue || "Sản phẩm tương tự";
        console.log("Tên danh mục hiển thị:", categoryDisplayName);
        
        // Tạo phản hồi dạng HTML với hình ảnh và link
        let responseHtml = `Các sản phẩm liên quan thuộc danh mục ${categoryDisplayName}:\n\n`;
        
        // Thêm thẻ HTML cho các sản phẩm liên quan
        const productElements = relatedProducts.map(p => {
          // Lấy URL hình ảnh đầu tiên từ mảng productImages nếu có
          const imageUrl = p.productImages && p.productImages.length > 0 
            ? p.productImages[0] 
            : "default-product.jpg";
          
          return {
            type: "product",
            id: p._id,
            name: p.productName,
            price: p.productPrice,
            image: imageUrl,
            slug: createSlug(p.productName),
            category: p.productCategory || p.category || "Không xác định"
          };
        });
        
        console.log("Trả về danh sách sản phẩm liên quan với tên danh mục:", categoryDisplayName);
        return {
          text: responseHtml,
          products: productElements,
          type: "relatedProducts",
          nameCategory: categoryDisplayName
        };
      } catch (error) {
        console.error("Lỗi khi tìm sản phẩm liên quan:", error);
        return "Xin lỗi, tôi không thể tìm thấy sản phẩm liên quan lúc này.";
      }
    }
  },
  mostExpensiveProduct: {
    patterns: [
      "sản phẩm nào đắt nhất", "sản phẩm đắt nhất", "sản phẩm nào đắt nhất trong cửa hàng", 
      "sản phẩm đắt nhất trong cửa hàng", "đắt nhất", "giá cao nhất", "sản phẩm giá cao nhất"
    ],
    response: async () => {
      try {
        const mostExpensiveProduct = await Product.findOne().sort({ productPrice: -1 }).limit(1);
        if (!mostExpensiveProduct) {
          return "Hiện tại chưa có thông tin về sản phẩm đắt nhất.";
        }
        return `Sản phẩm đắt nhất hiện tại là: ${mostExpensiveProduct.productName} với giá ${formatCurrency(mostExpensiveProduct.productPrice)}`;
      } catch (error) {
        return "Xin lỗi, tôi không thể tìm thấy thông tin về sản phẩm đắt nhất lúc này.";
      }
    }
  },
  cheapestProduct: {
    patterns: [
      "sản phẩm nào rẻ nhất", "sản phẩm rẻ nhất", "sản phẩm nào rẻ nhất trong cửa hàng", 
      "sản phẩm rẻ nhất trong cửa hàng", "rẻ nhất", "giá thấp nhất", "sản phẩm giá thấp nhất"
    ],
    response: async () => {
      try {
        const cheapestProduct = await Product.findOne().sort({ productPrice: 1 }).limit(1);
        if (!cheapestProduct) {
          return "Hiện tại chưa có thông tin về sản phẩm rẻ nhất.";
        }
        return `Sản phẩm rẻ nhất hiện tại là: ${cheapestProduct.productName} với giá ${formatCurrency(cheapestProduct.productPrice)}`;
      } catch (error) {
        return "Xin lỗi, tôi không thể tìm thấy thông tin về sản phẩm rẻ nhất lúc này.";
      }
    }
  },
  storeAddress: {
    patterns: [
      "địa chỉ", "cửa hàng ở đâu", "cửa hàng nằm ở đâu", "địa chỉ cửa hàng", 
      "vị trí cửa hàng", "cửa hàng ở chỗ nào", "cửa hàng nằm ở chỗ nào", 
      "tìm cửa hàng", "mua ở đâu", "mua tại đâu", "mua trực tiếp ở đâu"
    ],
    response: () => "Cửa hàng của chúng tôi nằm tại: 273 An Dương Vương, Phường 3, Quận 5, TP. Hồ Chí Minh.\n\nGiờ mở cửa: 8h00 - 22h00 các ngày trong tuần."
  },
  orderStatus: {
    patterns: [
      "tình trạng đơn hàng", "trạng thái đơn hàng", "đơn hàng của tôi", 
      "theo dõi đơn hàng", "kiểm tra đơn hàng", "đơn hàng đến đâu rồi", 
      "đơn hàng khi nào đến", "khi nào nhận được hàng"
    ],
    response: () => "Để kiểm tra tình trạng đơn hàng, vui lòng đăng nhập vào tài khoản và truy cập mục 'Đơn hàng của tôi'. Hoặc bạn có thể cung cấp mã đơn hàng để chúng tôi kiểm tra giúp bạn."
  },
  contactInfo: {
    patterns: [
      "liên hệ", "số điện thoại", "email", "hotline", "gọi cho ai", 
      "liên hệ với ai", "thông tin liên hệ", "liên lạc", "liên hệ như thế nào"
    ],
    response: () => "Thông tin liên hệ của chúng tôi:\n- Hotline: 1900 6789\n- Email: support@chuoikoicho.com\n- Địa chỉ: 273 An Dương Vương, Phường 3, Quận 5, TP. Hồ Chí Minh"
  },
  greeting: {
    patterns: [
      "xin chào", "hello", "hi", "chào", "chào bạn", "chào bot", "chào chatbot", 
      "xin chào bot", "xin chào chatbot", "chào buổi sáng", "chào buổi tối", 
      "chào buổi chiều", "chào buổi trưa", "chào buổi tối", "chào buổi sáng", 
      "chào buổi chiều", "chào buổi trưa"
    ],
    response: () => "Xin chào! Tôi có thể giúp gì cho bạn?",
  },
  thanks: {
    patterns: [
      "cảm ơn", "thank", "thanks", "cám ơn", "cảm ơn bạn", "cảm ơn bot", 
      "cảm ơn chatbot", "cảm ơn nhiều", "cảm ơn rất nhiều", "cảm ơn vì đã giúp", 
      "cảm ơn vì đã trả lời", "cảm ơn vì đã hỗ trợ", "cảm ơn vì đã tư vấn", 
      "cảm ơn vì đã giải đáp", "cảm ơn vì đã hướng dẫn"
    ],
    response: () => "Rất vui được giúp đỡ bạn! Bạn cần hỗ trợ gì thêm không?",
  },
  bye: {
    patterns: [
      "tạm biệt", "bye", "goodbye", "chào tạm biệt", "hẹn gặp lại", 
      "gặp lại sau", "tôi đi đây", "tôi phải đi"
    ],
    response: () => "Chào tạm biệt! Cảm ơn bạn đã trò chuyện. Hẹn gặp lại bạn sau!",
  },
  buyingMethods: {
    patterns: [
      "mua sản phẩm như nào", "mua sản phẩm thế nào", "mua như thế nào", "làm thế nào để mua", 
      "làm sao để mua", "cách mua", "cách đặt hàng", "đặt hàng như thế nào", 
      "cách thức mua", "có thể mua ở đâu", "mua online được không", "đặt hàng", 
      "đặt hàng làm sao", "muốn đặt hàng", "muốn mua", "tôi muốn đặt", "tôi muốn mua",
      "mua hàng", "đặt mua", "order", "đặt online", "mua online", "mua ở đâu",
      "đặt như thế nào", "làm sao để đặt", "làm thế nào để đặt", "tôi muốn mua hàng",
      "tôi muốn đặt hàng", "cách đặt", "cách order", "thủ tục mua", "thủ tục đặt",
      "mua ở trang này như thế nào", "đặt hàng trên trang này", "quy trình đặt hàng"
    ],
    response: () => "Để mua sản phẩm, bạn có thể:\n1. Đặt hàng trực tiếp trên website này bằng cách thêm vào giỏ hàng\n2. Mua tại cửa hàng: 273 An Dương Vương, Phường 3, Quận 5, TP. Hồ Chí Minh\n3. Đặt hàng qua hotline: 1900 6789\n\nSau khi đặt hàng, bạn sẽ nhận được xác nhận qua email và có thể theo dõi trạng thái đơn hàng trong tài khoản của mình."
  },
  paymentMethods: {
    patterns: [
      "thanh toán", "cách thanh toán", "phương thức thanh toán", "hình thức thanh toán",
      "trả tiền", "làm sao để thanh toán", "trả tiền bằng gì", "trả tiền như thế nào",
      "có mấy hình thức thanh toán", "có những hình thức thanh toán nào", 
      "thanh toán qua đâu", "có thanh toán online không", "hỗ trợ thanh toán gì",
      "có thể thanh toán bằng", "có trả góp", "trả góp", "thanh toán qua thẻ",
      "thanh toán bằng tiền mặt", "thanh toán qua ví điện tử", "thanh toán qua ngân hàng",
      "thanh toán khi nhận hàng", "ship cod", "cod", "atm", "credit", "debit",
      "banking", "chuyển khoản", "internet banking", "mobile banking"
    ],
    response: () => "Chúng tôi hỗ trợ 2 phương thức thanh toán sau:\n1. Thanh toán khi nhận hàng (COD)\n2. Thanh toán qua SePay\n\nBạn có thể chọn phương thức thanh toán phù hợp khi tiến hành đặt hàng."
  },
  foodSafety: {
    patterns: [
      "thực phẩm sạch", "đảm bảo an toàn", "an toàn thực phẩm", "thực phẩm có an toàn không", 
      "nguồn gốc thực phẩm", "chứng nhận an toàn", "kiểm định", "tiêu chuẩn an toàn",
      "thực phẩm có sạch không", "đảm bảo vệ sinh", "thực phẩm organic", "hữu cơ", 
      "không hóa chất", "không thuốc trừ sâu", "không chất bảo quản", "độ tin cậy",
      "thực phẩm có nguồn gốc rõ ràng không", "rau sạch", "thịt sạch", "trái cây sạch",
      "rau an toàn", "thịt an toàn", "trái cây an toàn", "chất lượng thực phẩm"
    ],
    response: () => "Thực phẩm tại siêu thị chúng tôi đều được đảm bảo an toàn với tiêu chuẩn VietGAP và GlobalGAP. Tất cả sản phẩm đều có nguồn gốc xuất xứ rõ ràng, được kiểm định nghiêm ngặt về chất lượng và an toàn vệ sinh thực phẩm trước khi đưa đến tay người tiêu dùng. Mỗi sản phẩm đều có mã QR để khách hàng có thể truy xuất nguồn gốc và thông tin sản phẩm một cách minh bạch."
  },
  organicFood: {
    patterns: [
      "thực phẩm hữu cơ", "organic", "thực phẩm organic", "rau hữu cơ", "trái cây hữu cơ", 
      "rau organic", "thịt hữu cơ", "trứng hữu cơ", "sản phẩm organic", "hữu cơ là gì", 
      "organic là gì", "lợi ích của thực phẩm hữu cơ", "giá thực phẩm hữu cơ", 
      "chứng nhận hữu cơ", "organic có tốt không", "có bán thực phẩm hữu cơ không",
      "có bán đồ organic không", "mua thực phẩm hữu cơ ở đâu"
    ],
    response: () => "Siêu thị chúng tôi cung cấp đa dạng các sản phẩm hữu cơ (organic) được chứng nhận, bao gồm rau củ, trái cây, thịt, trứng và các sản phẩm chế biến. Thực phẩm hữu cơ được canh tác và chăn nuôi không sử dụng hóa chất, thuốc trừ sâu, hormone tăng trưởng hay kháng sinh, đảm bảo an toàn cho sức khỏe và thân thiện với môi trường. Mặc dù giá thành cao hơn thực phẩm thông thường, nhưng chúng mang lại giá trị dinh dưỡng và độ an toàn cao hơn."
  },
  deliveryInfo: {
    patterns: [
      "giao hàng", "phí giao hàng", "thời gian giao hàng", "ship", "freeship", "miễn phí giao hàng", 
      "giao hàng mất bao lâu", "giao hàng bao nhiêu tiền", "phí vận chuyển", "cước vận chuyển", 
      "giao hàng đến đâu", "khu vực giao hàng", "có giao hàng không", "có ship không", 
      "giao hàng tận nhà", "giao hàng nhanh", "giao hàng trong ngày", "ship cod", 
      "vận chuyển", "đơn vị vận chuyển", "dịch vụ giao hàng", "hình thức giao hàng"
    ],
    response: () => "Chúng tôi cung cấp dịch vụ giao hàng tận nhà trên toàn quốc với các chính sách sau:\n\n- Nội thành TP.HCM: Giao hàng trong 2-4 giờ, miễn phí giao hàng cho đơn từ 300.000đ\n- Các tỉnh thành khác: Giao hàng trong 1-3 ngày tùy khu vực, miễn phí giao hàng cho đơn từ 500.000đ\n- Phí giao hàng tiêu chuẩn: 20.000đ - 40.000đ tùy khu vực\n- Đơn hàng trên 1.000.000đ: Miễn phí giao hàng toàn quốc\n\nĐặc biệt, chúng tôi có dịch vụ giao hàng nhanh trong 2 giờ cho khu vực nội thành TP.HCM với các sản phẩm tươi sống."
  },
  returnPolicy: {
    patterns: [
      "đổi trả", "chính sách đổi trả", "trả hàng", "đổi hàng", "hoàn tiền", "chính sách hoàn tiền", 
      "có được đổi trả không", "làm sao để đổi trả", "thời gian đổi trả", "điều kiện đổi trả", 
      "quy định đổi trả", "quy định hoàn tiền", "đổi sản phẩm", "trả sản phẩm",
      "đổi trả như thế nào", "có được trả hàng không", "đổi trả miễn phí", "bảo hành", 
      "hàng lỗi", "hàng hỏng", "hàng không đúng"
    ],
    response: () => "Chính sách đổi trả của siêu thị thực phẩm sạch chúng tôi:\n\n- Thời hạn đổi trả: Trong vòng 24 giờ kể từ khi nhận hàng\n- Điều kiện đổi trả:\n  + Sản phẩm còn nguyên bao bì, tem nhãn\n  + Có hóa đơn mua hàng\n  + Sản phẩm bị lỗi, hỏng, không đúng mô tả, không đảm bảo chất lượng\n  + Đối với thực phẩm tươi sống: đổi trả ngay khi giao hàng nếu phát hiện không đạt chất lượng\n\n- Hình thức đổi trả:\n  + Đổi sản phẩm mới cùng loại\n  + Hoàn tiền 100% nếu không có sản phẩm thay thế\n\nVui lòng liên hệ hotline 1900 6789 để được hướng dẫn quy trình đổi trả."
  },
  membershipProgram: {
    patterns: [
      "thành viên", "chương trình thành viên", "khách hàng thân thiết", "hội viên", "tích điểm", 
      "thẻ thành viên", "đăng ký thành viên", "ưu đãi thành viên", "quyền lợi thành viên", 
      "điểm thưởng", "điểm thành viên", "quà tặng thành viên", "hạng thành viên", 
      "đặc quyền thành viên", "đăng ký tài khoản", "tạo tài khoản", "đăng ký hội viên"
    ],
    response: () => "Chương trình thành viên tại siêu thị thực phẩm sạch của chúng tôi mang lại nhiều đặc quyền:\n\n- Tích lũy điểm: 1.000đ = 1 điểm\n- Quy đổi điểm: 10 điểm = 10.000đ khi mua hàng\n- Các hạng thành viên và ưu đãi:\n  + Thành viên Bạc (chi tiêu 2-5 triệu/năm): Giảm 3% mọi đơn hàng\n  + Thành viên Vàng (chi tiêu 5-10 triệu/năm): Giảm 5% mọi đơn hàng, ưu tiên giao hàng\n  + Thành viên Kim Cương (chi tiêu trên 10 triệu/năm): Giảm 7% mọi đơn hàng, miễn phí giao hàng, quà tặng sinh nhật\n\nĐăng ký miễn phí tại quầy thu ngân hoặc trên website của chúng tôi."
  },
  freshFood: {
    patterns: [
      "thực phẩm tươi", "rau tươi", "thịt tươi", "cá tươi", "hải sản tươi", "trái cây tươi", 
      "đồ tươi sống", "thực phẩm tươi sống", "bảo quản thực phẩm tươi", "độ tươi", 
      "thực phẩm tươi ngon", "thực phẩm tươi mới", "rau củ tươi", "sản phẩm tươi",
      "có bán đồ tươi sống không", "nguồn gốc thực phẩm tươi", "đảm bảo độ tươi"
    ],
    response: () => "Siêu thị chúng tôi cung cấp đa dạng thực phẩm tươi sống chất lượng cao:\n\n- Rau củ: Thu hoạch trong ngày từ các trang trại đối tác, đảm bảo độ tươi ngon và giàu dinh dưỡng\n- Thịt tươi: Thịt heo, bò, gà được kiểm dịch nghiêm ngặt, bảo quản trong điều kiện lý tưởng\n- Hải sản: Nhập trực tiếp từ các vùng biển sạch, đánh bắt trong ngày\n- Trái cây: Đa dạng trái cây trong nước và nhập khẩu, đảm bảo tươi ngon\n\nTất cả sản phẩm tươi sống được bảo quản ở nhiệt độ thích hợp và được kiểm tra chất lượng hàng ngày để đảm bảo độ tươi tối đa khi đến tay khách hàng."
  },
  importedFood: {
    patterns: [
      "thực phẩm nhập khẩu", "sản phẩm nhập khẩu", "hàng nhập khẩu", "đồ nhập ngoại", 
      "hàng ngoại", "thực phẩm ngoại", "trái cây nhập khẩu", "thực phẩm từ nước ngoài", 
      "thực phẩm quốc tế", "sản phẩm quốc tế", "đồ ngoại nhập", "sản phẩm ngoại nhập",
      "từ nước nào", "nhập từ đâu", "nguồn gốc nhập khẩu"
    ],
    response: () => "Siêu thị thực phẩm sạch của chúng tôi cung cấp nhiều loại thực phẩm nhập khẩu chất lượng cao:\n\n- Trái cây: Táo Mỹ, Lê Hàn Quốc, Cherry Úc, Kiwi New Zealand...\n- Thịt: Bò Úc, Bò Mỹ, Cừu New Zealand...\n- Hải sản: Cá hồi Na Uy, Tôm Canada...\n- Các sản phẩm khác: Sữa Úc, Phô mai Pháp, Rượu vang Ý...\n\nTất cả sản phẩm nhập khẩu đều có giấy chứng nhận xuất xứ rõ ràng, đảm bảo nguồn gốc và được nhập khẩu theo đúng quy định về an toàn thực phẩm của Việt Nam."
  },
  vegetarianFood: {
    patterns: [
      "thực phẩm chay", "đồ chay", "món chay", "ăn chay", "thực phẩm thuần chay", "vegan", 
      "sản phẩm chay", "đồ ăn chay", "rau củ chay", "thực phẩm không thịt", "thuần chay", 
      "không động vật", "chế độ ăn chay", "có bán đồ chay không"
    ],
    response: () => "Siêu thị chúng tôi có khu vực riêng dành cho thực phẩm chay và thuần chay (vegan) với đa dạng sản phẩm:\n\n- Rau củ quả hữu cơ đa dạng\n- Các sản phẩm thay thế thịt: đậu hũ, tempeh, seitan...\n- Sữa thực vật: sữa hạnh nhân, sữa đậu nành, sữa yến mạch...\n- Các loại hạt và ngũ cốc\n- Thực phẩm chay đông lạnh: chả chay, há cảo chay...\n- Gia vị và sốt chay\n\nTất cả sản phẩm chay đều được dán nhãn rõ ràng và được bố trí riêng biệt để dễ dàng tìm kiếm."
  },
  storeLocation: {
    patterns: [
      "chi nhánh", "cửa hàng", "địa điểm", "vị trí", "cơ sở", "bao nhiêu chi nhánh", 
      "có mấy cửa hàng", "danh sách cửa hàng", "hệ thống cửa hàng", "siêu thị ở đâu", 
      "địa chỉ các chi nhánh", "tìm chi nhánh", "tìm cửa hàng gần nhất",
      "chi nhánh gần nhất", "cửa hàng gần đây", "cửa hàng ở đâu", "cửa hàng gần nhà"
    ],
    response: () => "Hệ thống siêu thị thực phẩm sạch của chúng tôi hiện có các chi nhánh sau:\n\n1. Chi nhánh Quận 1: 273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Quận 1 2.5km)\n2. Chi nhánh Quận 2: 18 Trần Não, Phường Bình An, Quận 2, TP. HCM\n3. Chi nhánh Quận 7: 1060 Nguyễn Văn Linh, Phường Tân Phong, Quận 7, TP. HCM\n4. Chi nhánh Quận 9: 54 Lê Văn Việt, Phường Hiệp Phú, Quận 9, TP. HCM\n5. Chi nhánh Hà Nội: 85 Láng Hạ, Quận Đống Đa, Hà Nội\n\nGiờ mở cửa: 8h00 - 22h00 các ngày trong tuần.\n\nBạn có thể sử dụng tính năng 'Tìm cửa hàng gần nhất' trên website hoặc ứng dụng của chúng tôi để tìm chi nhánh gần bạn nhất."
  },
  promotions: {
    patterns: [
      "khuyến mãi", "ưu đãi", "giảm giá", "quà tặng", "chương trình khuyến mãi", 
      "chương trình ưu đãi", "khuyến mại", "mã giảm giá", "voucher", "coupon", 
      "sale", "đang giảm giá", "đang khuyến mãi", "ưu đãi đặc biệt", "có khuyến mãi gì",
      "có giảm giá không", "khuyến mãi hôm nay"
    ],
    response: () => "Các chương trình khuyến mãi hiện tại tại siêu thị thực phẩm sạch của chúng tôi:\n\n- SALE CUỐI TUẦN: Giảm 10-20% cho rau củ quả tươi vào thứ 7 và Chủ nhật\n- MUA 2 TẶNG 1: Áp dụng cho các sản phẩm đóng gói\n- GIẢM 15% CHO ĐƠN HÀNG ĐẦU TIÊN: Khi đăng ký thành viên mới\n- FREESHIP: Miễn phí giao hàng cho đơn từ 300.000đ (nội thành) và 500.000đ (toàn quốc)\n- HAPPY HOUR: Giảm 15% từ 19h-21h hàng ngày cho thực phẩm tươi sống\n\nĐể cập nhật các chương trình khuyến mãi mới nhất, vui lòng theo dõi website, fanpage hoặc đăng ký nhận thông báo qua email của chúng tôi."
  },
  mobileApp: {
    patterns: [
      "ứng dụng", "app", "mobile app", "tải app", "download app", "cài đặt app", 
      "ứng dụng di động", "phần mềm", "app trên điện thoại", "ứng dụng trên điện thoại", 
      "có app không", "có ứng dụng không", "app ios", "app android", "tính năng app"
    ],
    response: () => "Ứng dụng di động của siêu thị thực phẩm sạch chúng tôi có nhiều tính năng tiện lợi:\n\n- Đặt hàng trực tuyến nhanh chóng\n- Theo dõi tình trạng đơn hàng\n- Quét mã QR để xem thông tin sản phẩm\n- Tích lũy và sử dụng điểm thành viên\n- Nhận thông báo về khuyến mãi, sản phẩm mới\n- Tra cứu thông tin dinh dưỡng và công thức nấu ăn\n- Thanh toán đa dạng\n\nỨng dụng khả dụng trên cả iOS và Android. Bạn có thể tải về miễn phí tại:\n- App Store: tìm 'Thực Phẩm Sạch Online'\n- Google Play: tìm 'Thực Phẩm Sạch Online'"
  },
  nutritionAdvice: {
    patterns: [
      "dinh dưỡng", "tư vấn dinh dưỡng", "chế độ ăn", "thực đơn", "ăn uống lành mạnh", 
      "thực phẩm tốt cho sức khỏe", "ăn gì tốt", "thực phẩm dinh dưỡng", "dinh dưỡng hợp lý", 
      "thực phẩm tốt cho", "ăn gì để", "thực phẩm giàu", "chế độ dinh dưỡng", 
      "tư vấn ăn uống", "cân bằng dinh dưỡng", "thực phẩm bổ dưỡng"
    ],
    response: () => "Siêu thị thực phẩm sạch chúng tôi cung cấp dịch vụ tư vấn dinh dưỡng miễn phí với các chuyên gia dinh dưỡng có chứng chỉ. Một số lời khuyên dinh dưỡng cơ bản:\n\n- Ưu tiên thực phẩm tươi sống, ít qua chế biến\n- Đa dạng hóa chế độ ăn với đủ 4 nhóm: tinh bột, protein, rau củ và trái cây\n- Ưu tiên protein nạc từ cá, thịt gia cầm, đậu và các loại hạt\n- Tăng cường rau xanh và trái cây theo mùa\n- Hạn chế thực phẩm chứa nhiều đường, muối và chất béo bão hòa\n\nBạn có thể đặt lịch tư vấn dinh dưỡng cá nhân tại cửa hàng hoặc trực tuyến qua website của chúng tôi."
  },
  discountedProducts: {
    patterns: [
      "sản phẩm giảm giá", "sản phẩm đang giảm giá", "giảm giá", 
      "sản phẩm nào đang giảm giá", "sản phẩm khuyến mãi", "khuyến mãi",
      "đang giảm giá", "đang khuyến mãi", "tìm sản phẩm giảm giá",
      "có sản phẩm nào đang giảm giá không", "có sản phẩm nào đang khuyến mãi không"
    ],
    response: async () => {
      try {
        // Tìm các sản phẩm có khuyến mãi (productDiscount > 0)
        const discountedProducts = await Product.find({ 
          productDiscount: { $gt: 0 },
          productStatus: { $ne: "Hết hàng" }
        }).sort({ productDiscount: -1 }).limit(6);
        
        if (!discountedProducts || discountedProducts.length === 0) {
          return "Hiện tại cửa hàng không có sản phẩm nào đang giảm giá.";
        }
        
        // Tạo danh sách sản phẩm để hiển thị
        const productElements = discountedProducts.map(product => {
          return {
            id: product._id,
            name: product.productName,
            price: product.productPrice,
            promotionalPrice: product.productPromoPrice || product.productPrice * (1 - product.productDiscount/100),
            discount: product.productDiscount,
            image: product.productImages && product.productImages.length > 0 
              ? product.productImages[0] 
              : "default-product.jpg",
            slug: createSlug(product.productName)
          };
        });
        
        return {
          type: "discountedProducts",
          text: "Đây là các sản phẩm đang giảm giá tại cửa hàng:",
          products: productElements
        };
      } catch (error) {
        console.error("Lỗi khi tìm sản phẩm giảm giá:", error);
        return "Xin lỗi, tôi không thể tìm thấy thông tin về sản phẩm đang giảm giá lúc này.";
      }
    }
  },
  userInfo: {
    patterns: [
      "tên của tôi là gì", "tên tôi", "thông tin của tôi", "thông tin tài khoản của tôi",
      "tôi là ai", "thông tin cá nhân của tôi", "tài khoản của tôi", "hồ sơ của tôi",
      "cho tôi biết tên của tôi", "nói tên tôi", "tên người dùng của tôi"
    ],
    response: (userId) => {
      if (!userId) {
        return "Bạn chưa đăng nhập. Vui lòng đăng nhập để xem thông tin cá nhân.";
      }
      
      return "Để xem thông tin cá nhân của bạn, vui lòng truy cập vào trang Tài khoản.";
    }
  },
  priceRange: {
    patterns: [
      "sản phẩm dưới", "sản phẩm từ", "giá từ", "giá dưới", 
      "dưới 100", "dưới 100k", "dưới 100.000", "dưới 100 nghìn",
      "dưới 200", "dưới 200k", "dưới 200.000", "dưới 200 nghìn",
      "dưới 50", "dưới 50k", "dưới 50.000", "dưới 50 nghìn",
      "dưới 20", "dưới 20k", "dưới 20.000", "dưới 20 nghìn",
      "từ 100 đến 200", "từ 100k đến 200k", "từ 100.000 đến 200.000",
      "từ 50 đến 100", "từ 50k đến 100k", "từ 50.000 đến 100.000",
      "từ 200 đến 500", "từ 200k đến 500k", "từ 200.000 đến 500.000",
      "tìm sản phẩm theo giá", "tìm theo giá", "tìm sản phẩm giá", "tìm hàng giá",
      "sản phẩm giá rẻ", "sản phẩm rẻ", "giá tốt", "hàng giá tốt"
    ],
    response: async (message) => {
      try {
        // Phân tích nội dung tin nhắn để xác định khoảng giá
        const priceRanges = extractPriceRanges(message);
        if (!priceRanges) {
          return "Vui lòng chỉ rõ khoảng giá bạn muốn tìm kiếm, ví dụ: dưới 100k, từ 100k đến 200k, v.v.";
        }

        const { minPrice, maxPrice } = priceRanges;
        
        // Tạo query để tìm sản phẩm trong khoảng giá
        let query = {};
        
        if (minPrice !== null && maxPrice !== null) {
          // Khoảng giá từ min đến max
          query = {
            $and: [
              { productPrice: { $gte: minPrice } },
              { productPrice: { $lte: maxPrice } }
            ]
          };
        } else if (minPrice !== null) {
          // Chỉ có giá tối thiểu
          query = { productPrice: { $gte: minPrice } };
        } else if (maxPrice !== null) {
          // Chỉ có giá tối đa
          query = { productPrice: { $lte: maxPrice } };
        } else {
          // Mặc định tìm sản phẩm có giá dưới 100k nếu không xác định được khoảng giá
          query = { productPrice: { $lte: 100000 } };
        }
        
        // Tìm sản phẩm trong khoảng giá
        const products = await Product.find(query).limit(6);
        
        if (products.length === 0) {
          return `Không tìm thấy sản phẩm nào ${minPrice !== null && maxPrice !== null ? `trong khoảng giá từ ${formatCurrency(minPrice)} đến ${formatCurrency(maxPrice)}` : 
                                              maxPrice !== null ? `có giá dưới ${formatCurrency(maxPrice)}` : 
                                              minPrice !== null ? `có giá từ ${formatCurrency(minPrice)}` : 
                                              "trong khoảng giá bạn yêu cầu"}.`;
        }
        
        // Tạo phản hồi với danh sách sản phẩm
        const productElements = products.map(p => {
          const imageUrl = p.productImages && p.productImages.length > 0 
            ? p.productImages[0] 
            : "default-product.jpg";
          
          // Tạo slug từ tên sản phẩm
          const slug = createSlug(p.productName);
          
          return {
            type: "product",
            id: p._id,
            name: p.productName,
            price: p.productPrice,
            promotionalPrice: p.productDiscount > 0 ? p.productPrice * (1 - p.productDiscount/100) : null,
            discount: p.productDiscount > 0 ? p.productDiscount : null,
            image: imageUrl,
            slug: slug
          };
        });
        
        // Trả về dữ liệu sản phẩm dạng đặc biệt cho frontend
        return {
          text: `Tôi đã tìm thấy ${products.length} sản phẩm ${minPrice !== null && maxPrice !== null ? `trong khoảng giá từ ${formatCurrency(minPrice)} đến ${formatCurrency(maxPrice)}` : 
                                    maxPrice !== null ? `có giá dưới ${formatCurrency(maxPrice)}` : 
                                    minPrice !== null ? `có giá từ ${formatCurrency(minPrice)}` : 
                                    "phù hợp với yêu cầu của bạn"}:`,
          products: productElements,
          type: "priceRangeProducts"
        };
      } catch (error) {
        console.error("Lỗi khi tìm sản phẩm theo khoảng giá:", error);
        return "Xin lỗi, đã xảy ra lỗi khi tìm kiếm sản phẩm theo khoảng giá.";
      }
    }
  },
  categorySearch: {
    patterns: [
      "tìm rau", "các loại rau", "hiển thị rau", "rau gì", "rau nào", 
      "tìm trái cây", "các loại trái cây", "hiển thị trái cây", "trái cây gì", "trái cây nào",
      "tìm thịt", "các loại thịt", "hiển thị thịt", "thịt gì", "thịt nào",
      "tìm theo danh mục", "hiển thị danh mục", "sản phẩm của danh mục"
    ],
    response: async (categoryName) => {
      try {
        // Tìm sản phẩm thuộc danh mục được chỉ định
        const products = await Product.find({
          productCategory: { $regex: categoryName, $options: 'i' }
        }).limit(5);
        
        if (products.length > 0) {
          let response = `Chúng tôi có các sản phẩm ${categoryName} sau:\n`;
          products.forEach((product, index) => {
            response += `${index + 1}. ${product.productName} - ${formatCurrency(product.productPrice)}\n`;
          });
          response += 'Bạn có thể hỏi thêm thông tin cụ thể về sản phẩm bạn quan tâm.';
          
          return {
            text: response,
            products: products.map(p => ({
              _id: p._id,
              productName: p.productName,
              productPrice: p.productPrice
            }))
          };
        } else {
          return `Hiện tại chúng tôi không có sản phẩm ${categoryName} nào. Bạn có thể xem các sản phẩm khác như trái cây, rau củ, thịt hoặc đồ uống.`;
        }
      } catch (error) {
        console.error(`Lỗi khi tìm kiếm danh mục ${categoryName}:`, error);
        return `Xin lỗi, đã xảy ra lỗi khi tìm kiếm sản phẩm ${categoryName}. Vui lòng thử lại sau.`;
      }
    },
  },
  
  productSearch: {
    patterns: [
      "tìm sản phẩm", "tìm", "tìm kiếm", "tìm giúp", "tìm cho tôi", 
      "tìm cho mình", "kiếm", "kiếm giúp", "kiếm cho tôi", "kiếm cho mình",
      "tìm hiểu", "tìm hiểu về", "tìm hiểu sản phẩm", "tìm hiểu về sản phẩm",
      "sản phẩm", "có sản phẩm", "có sản phẩm nào", "sản phẩm gì",
      "tìm mối đề nhậu", "tìm đồ nhậu", "tìm đồ ăn", "tìm thức ăn", "tìm nước uống",
      "tìm món ăn", "tìm món", "tìm đồ", "tìm thức", "tìm nước",
      // Thêm các mẫu câu hỏi mới
      "cửa hàng có", "có bán", "mua được", "bán không", "có không", 
      "bán gì", "có gì", "tôi muốn mua", "muốn mua", "bán ở đâu",
      "cung cấp", "cho mình hỏi", "cho tôi hỏi", "ngon không", "loại nào ngon",
      "loại nào tốt", "loại nào", "hãng nào", "hàng nào", "chất lượng",
      "giới thiệu", "mua ở đâu", "đặt hàng", "order", "mua online"
    ],
    response: async (message) => {
      try {
        const productName = extractProductNameFromMessage(message);
        
        if (!productName) {
          return "Bạn muốn tìm sản phẩm gì? Vui lòng cung cấp tên hoặc mô tả sản phẩm cụ thể.";
        }
        
        console.log(`Đang tìm kiếm sản phẩm: "${productName}"`);
        
        // Sử dụng hàm searchProducts để tìm sản phẩm
        const products = await searchProducts(productName);
        
        if (products.length > 0) {
          // Tạo phản hồi với sản phẩm tìm thấy
          const productElements = products.map(p => {
            const imageUrl = p.productImages && p.productImages.length > 0 
              ? p.productImages[0] 
              : "default-product.jpg";
            
            return {
              type: "product",
              id: p._id,
              name: p.productName,
              price: p.productPrice,
              image: imageUrl,
              discount: p.productDiscount,
              promotionalPrice: p.productDiscount ? Math.round(p.productPrice * (1 - p.productDiscount / 100)) : p.productPrice,
              description: p.productInfo || p.productDetails || p.productDescription || ""
            };
          });
          
          return {
            text: `Tôi đã tìm thấy ${products.length} sản phẩm "${productName}" cho bạn:`,
            products: productElements,
            type: "productSearch"
          };
        } else {
          return `Xin lỗi, tôi không tìm thấy sản phẩm nào với từ khóa "${productName}". Bạn có thể thử tìm kiếm với từ khóa khác.`;
        }
      } catch (error) {
        console.error("Lỗi khi tìm kiếm sản phẩm:", error);
        return "Xin lỗi, đã xảy ra lỗi khi tìm kiếm sản phẩm. Vui lòng thử lại sau.";
      }
    }
  },
  productExpiry: {
    patterns: [
      "hạn sử dụng", "hsd", "date", "hạn dùng", "hết hạn", "còn hạn", 
      "hạn sử dụng của", "hsd của", "bao lâu thì hết hạn", "sử dụng trong bao lâu",
      "dùng được bao lâu", "sử dụng trong", "tươi trong bao lâu", "còn tươi không",
      "hạn sử dụng còn bao lâu", "hạn sử dụng đến khi nào",
      "sản phẩm sử dụng được bao lâu"
    ],
    response: (product) => {
      if (!product) {
        return "Vui lòng cho biết bạn muốn biết hạn sử dụng của sản phẩm nào?";
      }
      
      if (product.productExpiry) {
        return `Hạn sử dụng của ${product.productName} là ${product.productExpiry}.`;
      } else if (product.expiryDate) {
        return `Hạn sử dụng của ${product.productName} là ${product.expiryDate}.`;
      } else {
        return `Hạn sử dụng cụ thể của ${product.productName} được in trên bao bì sản phẩm. Thông thường, sản phẩm này có thể sử dụng từ 6-12 tháng kể từ ngày sản xuất tùy thuộc vào điều kiện bảo quản.`;
      }
    }
  },
  
  productAvailability: {
    patterns: [
      "còn hàng", "hết hàng", "còn sản phẩm", "còn bán", "có sẵn", 
      "sản phẩm còn không", "còn sản phẩm không", "còn không", 
      "tình trạng hàng", "đang có hàng", "hàng còn không", 
      "có sẵn hàng", "còn bao nhiêu", "còn mấy cái", "còn mấy sản phẩm",
      "hiện còn", "hàng sẵn", "còn tồn", "còn kinh doanh", "còn được bán",
      "hiện đang có", "hiện còn bán", "có bán không"
    ],
    response: (product) => {
      if (!product) {
        return "Vui lòng cho biết bạn muốn kiểm tra tình trạng của sản phẩm nào?";
      }
      
      if (product.productStatus === "Hết hàng") {
        return `Rất tiếc, sản phẩm ${product.productName} hiện đã hết hàng. Bạn có thể đăng ký nhận thông báo khi có hàng hoặc xem các sản phẩm tương tự khác.`;
      } else if (product.productQuantity !== undefined && product.productQuantity <= 0) {
        return `Rất tiếc, sản phẩm ${product.productName} hiện đã hết hàng. Bạn có thể đăng ký nhận thông báo khi có hàng hoặc xem các sản phẩm tương tự khác.`;
      } else if (product.productQuantity !== undefined) {
        return `Sản phẩm ${product.productName} hiện còn ${product.productQuantity} trong kho.`;
      } else {
        return `Sản phẩm ${product.productName} hiện đang có sẵn để mua tại cửa hàng và trên website.`;
      }
    }
  },
  productCategories: {
    patterns: [
      "có những loại", "danh mục sản phẩm", "phân loại", "các loại", 
      "các danh mục", "các nhóm", "các ngành hàng", "các mặt hàng",
      "phân chia sản phẩm", "chia nhóm", "sản phẩm được chia",
      "loại sản phẩm", "dòng sản phẩm", "kiểu sản phẩm", "nhóm sản phẩm",
      "có mấy loại", "có bao nhiêu loại", "có bao nhiêu dòng",
      "có những gì", "có những danh mục nào", "có những nhóm nào",
      "liệt kê các loại", "danh sách các loại", "xem các loại"
    ],
    response: async (categoryQuery) => {
      try {
        // Nếu người dùng nhắc đến một danh mục cụ thể
        let specificCategory = null;
        
        // Xác định categoryQuery - nếu không có tham số, gọi như một general intent
        if (!categoryQuery || typeof categoryQuery !== 'string') {
          // Danh sách các danh mục phổ biến
          const topCategories = await Product.aggregate([
            { $group: { _id: "$productCategory", count: { $sum: 1 } } },
            { $match: { _id: { $ne: null } } },
            { $match: { _id: { $ne: "" } } },
            { $sort: { count: -1 } },
            { $limit: 10 }
          ]);
          
          if (topCategories && topCategories.length > 0) {
            const categories = topCategories.map(cat => cat._id).filter(Boolean);
            return `Chúng tôi có các danh mục sản phẩm chính sau đây: ${categories.join(', ')}. Bạn có thể hỏi chi tiết về từng danh mục để biết thêm thông tin.`;
          }
          
          return "Chúng tôi có nhiều danh mục sản phẩm khác nhau như thực phẩm tươi sống, đồ uống, hàng đông lạnh, hóa mỹ phẩm, đồ dùng gia đình và nhiều mặt hàng khác. Bạn quan tâm đến danh mục nào?";
        } else {
          // Nếu người dùng hỏi về một nhóm sản phẩm cụ thể
          const message = categoryQuery.toLowerCase();
          
          // Kiểm tra xem người dùng đang hỏi về nhóm sản phẩm nào
          const categoryKeywords = {
            "nước giải khát": ["nước", "giải khát", "đồ uống", "nước uống", "nước ngọt", "thức uống"],
            "đồ cho bé": ["bé", "trẻ em", "trẻ nhỏ", "em bé", "sơ sinh", "bé yêu", "con nít"],
            "thực phẩm hữu cơ": ["hữu cơ", "organic", "sạch", "không hóa chất"],
            "đồ ăn": ["thực phẩm", "đồ ăn", "món ăn", "thức ăn"],
            "giá rẻ": ["giá rẻ", "rẻ", "phải chăng", "bình dân", "tiết kiệm", "giảm giá"]
          };
          
          // Tìm xem người dùng đang hỏi về nhóm nào
          for (const [category, keywords] of Object.entries(categoryKeywords)) {
            if (keywords.some(keyword => message.includes(keyword))) {
              specificCategory = category;
              break;
            }
          }
          
          // Xử lý câu hỏi theo từng nhóm cụ thể
          if (specificCategory === "nước giải khát") {
            // Tìm các loại nước giải khát
            const beverages = await Product.find({
              $or: [
                { productCategory: { $regex: 'đồ uống', $options: 'i' } },
                { productCategory: { $regex: 'nước', $options: 'i' } },
                { productCategory: { $regex: 'giải khát', $options: 'i' } },
                { productName: { $regex: 'nước', $options: 'i' } },
                { productName: { $regex: 'chai', $options: 'i' } },
                { productName: { $regex: 'lon', $options: 'i' } }
              ]
            }).distinct('productName').limit(20);
            
            if (beverages && beverages.length > 0) {
              return `Chúng tôi có các loại nước giải khát như: ${beverages.slice(0, 10).join(', ')} và nhiều loại khác. Bạn muốn tìm hiểu về loại nào cụ thể?`;
            }
            
            return "Chúng tôi có nhiều loại nước giải khát như nước có gas, nước ép trái cây, nước khoáng, trà đóng chai, cà phê đóng chai, nước tăng lực và nhiều loại khác. Bạn quan tâm đến loại nào?";
          }
          
          if (specificCategory === "thực phẩm hữu cơ") {
            return "Chúng tôi có nhiều loại thực phẩm hữu cơ (organic) bao gồm rau củ hữu cơ, trái cây hữu cơ, ngũ cốc hữu cơ, các sản phẩm từ sữa hữu cơ, và thịt hữu cơ. Tất cả đều được chứng nhận theo tiêu chuẩn hữu cơ và không sử dụng hóa chất trong quá trình sản xuất.";
          }
          
          if (specificCategory === "đồ cho bé") {
            return "Chúng tôi có đa dạng sản phẩm dành cho bé bao gồm: thực phẩm dinh dưỡng cho bé (sữa, bột ăn dặm, bánh ăn dặm), đồ dùng cho bé (bình sữa, ty ngậm, khăn sữa), tã bỉm các loại, đồ chơi an toàn cho bé, và các sản phẩm chăm sóc da cho bé. Bạn cần tìm sản phẩm cụ thể nào cho bé?";
          }
          
          // Xử lý trường hợp lọc theo giá
          if (specificCategory === "giá rẻ" || message.includes("theo giá") || message.includes("lọc sản phẩm")) {
            return "Bạn có thể lọc sản phẩm theo giá trên website bằng cách sử dụng thanh trượt giá ở phần bộ lọc bên trái, hoặc bạn có thể nói với tôi khoảng giá bạn muốn tìm (ví dụ: 'tìm sản phẩm dưới 100k', 'sản phẩm từ 100k đến 200k').";
          }
          
          // Trường hợp chung nếu không nhận diện được category cụ thể
          return `Chúng tôi có nhiều danh mục sản phẩm khác nhau. Bạn có thể cho tôi biết cụ thể hơn bạn đang tìm kiếm loại sản phẩm nào không?`;
        }
      } catch (error) {
        console.error("Lỗi khi lấy thông tin danh mục sản phẩm:", error);
        return "Xin lỗi, đã xảy ra lỗi khi lấy thông tin danh mục sản phẩm. Vui lòng thử lại sau.";
      }
    }
  },
  
  productFiltering: {
    patterns: [
      "lọc sản phẩm", "sắp xếp sản phẩm", "tìm theo", "lọc theo", 
      "tìm sản phẩm theo", "sắp xếp theo", "tìm sản phẩm",
      "tìm đồ theo", "tìm hàng theo", "lọc đồ theo", "lọc hàng theo",
      "phân loại theo", "sắp theo", "tìm theo giá", "lọc theo giá",
      "sắp xếp theo giá", "sắp xếp theo thương hiệu", "tìm theo nhãn hiệu"
    ],
    response: (message) => {
      if (!message) {
        return "Bạn có thể lọc sản phẩm theo nhiều tiêu chí như giá, thương hiệu, danh mục, khuyến mãi, đánh giá và nhiều tiêu chí khác. Bạn muốn lọc sản phẩm theo tiêu chí nào?";
      }
      
      const normalizedMessage = message.toLowerCase();
      
      if (normalizedMessage.includes("giá") || normalizedMessage.includes("tiền")) {
        return "Bạn có thể lọc sản phẩm theo giá bằng cách sử dụng thanh trượt giá ở phần bộ lọc bên trái trên trang danh sách sản phẩm. Hoặc bạn có thể nói với tôi khoảng giá bạn muốn tìm (ví dụ: 'tìm sản phẩm dưới 100k', 'sản phẩm từ 100k đến 200k').";
      }
      
      if (normalizedMessage.includes("thương hiệu") || normalizedMessage.includes("nhãn hiệu") || normalizedMessage.includes("brand")) {
        return "Bạn có thể lọc sản phẩm theo thương hiệu bằng cách chọn các thương hiệu mong muốn ở phần bộ lọc bên trái trên trang danh sách sản phẩm. Hoặc bạn có thể nói với tôi thương hiệu bạn quan tâm (ví dụ: 'tìm sản phẩm của Vinamilk', 'sản phẩm thương hiệu Pepsi').";
      }
      
      if (normalizedMessage.includes("khuyến mãi") || normalizedMessage.includes("giảm giá") || normalizedMessage.includes("sale")) {
        return "Bạn có thể xem các sản phẩm đang khuyến mãi bằng cách vào mục 'Khuyến mãi' trên menu chính hoặc chọn bộ lọc 'Đang giảm giá' trên trang danh sách sản phẩm. Hoặc bạn có thể hỏi tôi 'Các sản phẩm đang giảm giá' để xem danh sách.";
      }
      
      if (normalizedMessage.includes("đánh giá") || normalizedMessage.includes("rating") || normalizedMessage.includes("sao")) {
        return "Bạn có thể lọc sản phẩm theo đánh giá bằng cách chọn số sao (từ 1-5) ở phần bộ lọc bên trái trên trang danh sách sản phẩm. Các sản phẩm có đánh giá cao thường được nhiều khách hàng ưa chuộng.";
      }
      
      return "Bạn có thể lọc sản phẩm theo nhiều tiêu chí khác nhau như giá, thương hiệu, danh mục, khuyến mãi, đánh giá và nhiều tiêu chí khác trên trang danh sách sản phẩm. Bạn muốn tìm sản phẩm có tiêu chí cụ thể nào không?";
    }
  },
  nearestStore: {
    patterns: [
      "chi nhánh gần nhất", "cửa hàng gần nhất", "cửa hàng gần đây", "chi nhánh gần đây",
      "cửa hàng gần tôi", "chi nhánh gần tôi", "cửa hàng gần nhà", "chi nhánh gần nhà",
      "tìm cửa hàng gần nhất", "tìm chi nhánh gần nhất", "cửa hàng nào gần nhất",
      "gần nơi tôi ở", "gần chỗ tôi", "gần vị trí của tôi", "từ vị trí của tôi",
      "cửa hàng gần khu vực", "chi nhánh khu vực", "tìm cửa hàng gần"
    ],
    response: (location) => {
      if (!location) {
        return "Để tìm cửa hàng gần nhất, vui lòng cho tôi biết khu vực bạn đang ở (ví dụ: quận, huyện, hoặc địa chỉ cụ thể). Hoặc bạn có thể sử dụng tính năng 'Tìm cửa hàng gần nhất' trên website để tự động định vị.";
      }
      
      // Xử lý nếu có vị trí được cung cấp
      const locationLower = location.toLowerCase();
      
      // Danh sách cửa hàng mẫu theo khu vực
      const storesByDistrict = {
        "quận 1": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Quận 1 2.5km)"],
        "quận 2": ["18 Trần Não, Phường Bình An, Quận 2, TP. HCM"],
        "quận 3": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Quận 3 1.8km)"],
        "quận 4": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Quận 4 2.3km)"],
        "quận 5": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM"],
        "quận 6": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Quận 6 1.5km)"],
        "quận 7": ["1060 Nguyễn Văn Linh, Phường Tân Phong, Quận 7, TP. HCM"],
        "quận 8": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Quận 8 2.7km)"],
        "quận 9": ["54 Lê Văn Việt, Phường Hiệp Phú, Quận 9, TP. HCM"],
        "quận 10": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Quận 10 1.9km)"],
        "quận 11": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Quận 11 1.3km)"],
        "quận 12": ["54 Lê Văn Việt, Phường Hiệp Phú, Quận 9, TP. HCM (cách Quận 12 5.6km)"],
        "thủ đức": ["54 Lê Văn Việt, Phường Hiệp Phú, Quận 9, TP. HCM (cách Thủ Đức 3.4km)"],
        "bình thạnh": ["18 Trần Não, Phường Bình An, Quận 2, TP. HCM (cách Bình Thạnh 2.8km)"],
        "phú nhuận": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Phú Nhuận 3.7km)"],
        "tân bình": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Tân Bình 4.2km)"],
        "tân phú": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Tân Phú 3.9km)"],
        "gò vấp": ["54 Lê Văn Việt, Phường Hiệp Phú, Quận 9, TP. HCM (cách Gò Vấp 7.3km)"],
        "bình tân": ["273 An Dương Vương, Phường 3, Quận 5, TP. HCM (cách Bình Tân 5.1km)"],
        "hà nội": ["85 Láng Hạ, Quận Đống Đa, Hà Nội"]
      };
      
      // Tìm khu vực phù hợp
      for (const [district, stores] of Object.entries(storesByDistrict)) {
        if (locationLower.includes(district)) {
          return `Cửa hàng gần khu vực ${district} nhất là: ${stores[0]}. Giờ mở cửa: 8h00 - 22h00 các ngày trong tuần.`;
        }
      }
      
      // Nếu không tìm thấy khu vực cụ thể
      return `Chúng tôi chưa thể xác định chính xác cửa hàng gần khu vực "${location}". Hiện tại chúng tôi có các chi nhánh tại Quận 2, Quận 5, Quận 7, Quận 9 và Hà Nội. Bạn có thể truy cập trang web hoặc liên hệ hotline 1900 6789 để được hỗ trợ tìm cửa hàng gần nhất.`;
    }
  },
  
  storeCount: {
    patterns: [
      "bao nhiêu chi nhánh", "có mấy chi nhánh", "có mấy cửa hàng", "bao nhiêu cửa hàng",
      "có bao nhiêu chi nhánh", "có bao nhiêu cửa hàng", "tổng số chi nhánh",
      "tổng số cửa hàng", "bao nhiêu điểm bán", "có mấy điểm bán",
      "số lượng cửa hàng", "số lượng chi nhánh", "số cửa hàng", "số chi nhánh",
      "hệ thống bao nhiêu", "có mạng lưới", "số điểm bán"
    ],
    response: (location) => {
      if (!location) {
        return "Hiện nay, chúng tôi có tổng cộng 5 chi nhánh trên toàn quốc, trong đó có 4 chi nhánh tại TP.HCM (Quận 2, Quận 5, Quận 7, Quận 9) và 1 chi nhánh tại Hà Nội (Quận Đống Đa). Bạn có thể xem chi tiết địa chỉ các chi nhánh trên website của chúng tôi.";
      }
      
      const locationLower = location.toLowerCase();
      
      if (locationLower.includes("hcm") || locationLower.includes("hồ chí minh") || locationLower.includes("tphcm") || locationLower.includes("tp.hcm") || locationLower.includes("sài gòn")) {
        return "Tại TP.HCM, chúng tôi hiện có 4 chi nhánh, đặt tại Quận 2, Quận 5, Quận 7 và Quận 9. Mỗi chi nhánh đều có đầy đủ các mặt hàng và cung cấp dịch vụ giao hàng trong phạm vi 5km.";
      }
      
      if (locationLower.includes("hà nội") || locationLower.includes("hanoi") || locationLower.includes("hn")) {
        return "Tại Hà Nội, chúng tôi hiện có 1 chi nhánh đặt tại 85 Láng Hạ, Quận Đống Đa. Chi nhánh này cung cấp đầy đủ các mặt hàng và dịch vụ giao hàng trong phạm vi 7km.";
      }
      
      return `Chúng tôi chưa có thông tin về số lượng chi nhánh tại ${location}. Hiện tại, chúng tôi có tổng cộng 5 chi nhánh, trong đó có 4 chi nhánh tại TP.HCM và 1 chi nhánh tại Hà Nội. Dự kiến sẽ mở rộng hệ thống sang các tỉnh thành khác trong thời gian tới.`;
    }
  },
  
  storeHours: {
    patterns: [
      "mở cửa mấy giờ", "đóng cửa mấy giờ", "giờ mở cửa", "giờ đóng cửa",
      "giờ hoạt động", "thời gian mở cửa", "thời gian hoạt động", "mở đến mấy giờ",
      "mở cửa đến khi nào", "mở cửa lúc nào", "đóng cửa lúc nào", "mở cửa từ mấy giờ",
      "mấy giờ mở cửa", "mấy giờ đóng cửa", "hoạt động từ mấy giờ", "hoạt động đến mấy giờ",
      "mở cửa sớm nhất", "đóng cửa muộn nhất", "mở đến đêm không", "mở đến tối không"
    ],
    response: (location) => {
      if (!location) {
        return "Giờ hoạt động chung của tất cả các chi nhánh là từ 8h00 đến 22h00, các ngày trong tuần kể cả Chủ nhật và ngày lễ. Tuy nhiên, trong các dịp lễ tết đặc biệt, thời gian có thể thay đổi, vui lòng theo dõi thông báo trên website hoặc fanpage của chúng tôi.";
      }
      
      const locationLower = location.toLowerCase();
      
      if (locationLower.includes("quận 7")) {
        return "Chi nhánh Quận 7 tại 1060 Nguyễn Văn Linh, Phường Tân Phong hoạt động từ 7h30 đến 22h30 các ngày trong tuần, kể cả Chủ nhật và ngày lễ.";
      }
      
      // Trường hợp chung cho các địa điểm khác
      return "Giờ hoạt động của chi nhánh tại khu vực này là từ 8h00 đến 22h00, các ngày trong tuần kể cả Chủ nhật và ngày lễ. Trong các dịp lễ tết đặc biệt, thời gian có thể thay đổi, vui lòng theo dõi thông báo trên website hoặc fanpage của chúng tôi.";
    }
  },
  
  openAllDay: {
    patterns: [
      "mở cửa 24/7", "mở cả ngày", "mở xuyên đêm", "mở 24 giờ", "hoạt động 24 giờ",
      "hoạt động 24/7", "mở cửa xuyên suốt", "mở cửa suốt ngày đêm", "mở cửa 24h",
      "hoạt động 24h", "24/7", "24h", "24 giờ", "24 tiếng", "xuyên đêm",
      "suốt đêm", "cả đêm", "nửa đêm", "khuya", "quá khuya"
    ],
    response: () => {
      return "Hiện tại, các chi nhánh của chúng tôi chưa hoạt động 24/7. Giờ mở cửa thông thường là từ 8h00 đến 22h00 các ngày trong tuần, kể cả Chủ nhật và ngày lễ. Nếu bạn cần mua sắm khẩn cấp ngoài giờ này, vui lòng sử dụng dịch vụ đặt hàng online trên website, đơn hàng sẽ được xử lý vào sáng hôm sau.";
    }
  },
  
  sundayOpen: {
    patterns: [
      "mở cửa chủ nhật", "hoạt động chủ nhật", "làm việc chủ nhật", "nghỉ chủ nhật",
      "đóng cửa chủ nhật", "chủ nhật có mở", "chủ nhật có đóng", "cuối tuần có mở",
      "cuối tuần có đóng", "mở cửa ngày nghỉ", "mở cửa cuối tuần", "đóng cửa cuối tuần",
      "nghỉ cuối tuần", "thứ 7 chủ nhật", "cuối tuần", "ngày nghỉ"
    ],
    response: () => {
      return "Vâng, tất cả các chi nhánh của chúng tôi đều mở cửa vào Chủ nhật và các ngày cuối tuần với giờ hoạt động bình thường từ 8h00 đến 22h00. Bạn có thể thoải mái mua sắm vào cuối tuần mà không cần lo lắng về lịch nghỉ.";
    }
  },
  
  howToOrder: {
    patterns: [
      "cách đặt hàng", "đặt hàng như thế nào", "làm sao để đặt hàng", "mua hàng như thế nào",
      "mua sản phẩm", "đặt mua", "order", "đặt online", "mua online", "mua ở đâu",
      "đặt như thế nào", "làm sao để đặt", "làm thế nào để đặt", "tôi muốn mua hàng",
      "tôi muốn đặt hàng", "cách đặt", "cách order", "thủ tục mua", "thủ tục đặt",
      "mua ở trang này như thế nào", "đặt hàng trên trang này", "quy trình đặt hàng"
    ],
    response: () => {
      return "Để đặt hàng, bạn có thể thực hiện theo các bước sau:\n\n" +
             "1. Trên website/ứng dụng:\n" +
             "- Chọn sản phẩm và thêm vào giỏ hàng\n" +
             "- Nhấn 'Thanh toán'\n" +
             "- Điền thông tin giao hàng\n" +
             "- Chọn phương thức thanh toán\n" +
             "- Xác nhận đặt hàng\n\n" +
             "2. Qua điện thoại:\n" +
             "- Gọi hotline 1900 6789\n" +
             "- Cung cấp thông tin sản phẩm và địa chỉ\n\n" +
             "Sau khi đặt hàng, bạn sẽ nhận được email xác nhận và có thể theo dõi đơn hàng trong tài khoản của mình.";
    }
  },
  
  deliveryTime: {
    patterns: [
      "bao lâu nhận được hàng", "thời gian giao hàng", "giao hàng mất bao lâu",
      "khi nào nhận được hàng", "bao lâu để giao", "mấy ngày nhận được",
      "mất mấy hôm", "mấy tiếng", "bao nhiêu tiếng", "bao nhiêu ngày",
      "thời gian vận chuyển", "vận chuyển mất", "ship mất", "ship bao lâu",
      "giao nhanh không", "giao trong ngày", "giao hỏa tốc", "giao nhanh",
      "giao chậm", "giao standard", "giao tiêu chuẩn", "nhận nhanh không"
    ],
    response: (location) => {
      if (!location) {
        return "Thời gian nhận hàng phụ thuộc vào khu vực giao hàng và loại hình giao hàng bạn chọn:\n\n- Nội thành TP.HCM: 2-4 giờ (giao nhanh) hoặc trong ngày (giao tiêu chuẩn)\n- Ngoại thành TP.HCM: 1-2 ngày\n- Các tỉnh thành khác: 2-5 ngày tùy khu vực\n\nBạn có thể theo dõi tình trạng đơn hàng trong tài khoản hoặc qua SMS/email.";
      }
      
      const locationLower = location.toLowerCase();
      
      if (locationLower.includes("hcm") || locationLower.includes("hồ chí minh") || locationLower.includes("sài gòn") || 
          locationLower.includes("quận 1") || locationLower.includes("quận 2") || locationLower.includes("quận 3") || 
          locationLower.includes("quận 4") || locationLower.includes("quận 5") || locationLower.includes("quận 6") || 
          locationLower.includes("quận 7") || locationLower.includes("quận 8") || locationLower.includes("quận 9") || 
          locationLower.includes("quận 10") || locationLower.includes("quận 11") || locationLower.includes("quận 12") || 
          locationLower.includes("thủ đức") || locationLower.includes("bình thạnh") || locationLower.includes("phú nhuận") || 
          locationLower.includes("tân bình") || locationLower.includes("tân phú") || locationLower.includes("gò vấp") || 
          locationLower.includes("bình tân")) {
        return "Đối với khu vực nội thành TP.HCM, thời gian nhận hàng như sau:\n\n- Giao hàng nhanh: 2-4 giờ sau khi đặt hàng (áp dụng từ 8h00-18h00)\n- Giao hàng tiêu chuẩn: Trong ngày nếu đặt trước 15h00, hoặc ngày hôm sau nếu đặt sau 15h00\n- Giao hàng hẹn giờ: Bạn có thể chọn khung giờ giao hàng cụ thể (có phụ phí)\n\nLưu ý: Thời gian giao hàng có thể bị ảnh hưởng bởi điều kiện giao thông, thời tiết hoặc trong các dịp cao điểm.";
      }
      
      if (locationLower.includes("hà nội") || locationLower.includes("hanoi") || locationLower.includes("hn")) {
        return "Đối với khu vực Hà Nội, thời gian nhận hàng như sau:\n\n- Giao hàng nhanh: 2-6 giờ sau khi đặt hàng (áp dụng từ 8h00-18h00 cho khu vực nội thành)\n- Giao hàng tiêu chuẩn: Trong ngày nếu đặt trước 14h00, hoặc ngày hôm sau nếu đặt sau 14h00\n- Khu vực ngoại thành: 1-2 ngày\n\nBạn có thể theo dõi tình trạng đơn hàng trong tài khoản hoặc qua SMS/email.";
      }
      
      if (locationLower.includes("đà nẵng") || locationLower.includes("danang") || locationLower.includes("đn")) {
        return "Đối với khu vực Đà Nẵng, thời gian giao hàng dự kiến là 3-5 ngày kể từ khi đặt hàng, tùy thuộc vào tình trạng hàng hóa và dịch vụ vận chuyển. Hiện tại chúng tôi đang sử dụng dịch vụ chuyển phát của các đối tác như GHN, GHTK, Viettel Post để phục vụ khu vực này.";
      }
      
      // Các tỉnh thành khác
      return `Đối với khu vực ${location}, thời gian giao hàng dự kiến là 3-7 ngày làm việc kể từ khi đặt hàng. Thời gian cụ thể phụ thuộc vào khoảng cách và dịch vụ vận chuyển có sẵn tại địa phương. Bạn sẽ nhận được thông báo khi đơn hàng được giao cho đơn vị vận chuyển và có thể theo dõi hành trình giao hàng qua SMS hoặc email.`;
    }
  },
  
  codPayment: {
    patterns: [
      "thanh toán khi nhận hàng", "cod", "ship cod", "giao hàng cod", "trả tiền khi nhận",
      "trả tiền mặt khi nhận", "thanh toán tại nhà", "nhận hàng rồi trả tiền",
      "thanh toán sau khi nhận", "thanh toán tiền mặt", "tiền mặt khi nhận",
      "trả sau", "trả sau khi nhận", "có cod không", "có thanh toán khi nhận không",
      "có giao cod không", "có ship cod không", "có cho thanh toán khi nhận không"
    ],
    response: () => {
      return "Vâng, chúng tôi có hỗ trợ phương thức thanh toán khi nhận hàng (COD). Bạn chỉ cần chọn phương thức này khi tiến hành thanh toán và trả tiền cho nhân viên giao hàng khi nhận được sản phẩm. Lưu ý một số điều kiện áp dụng:\n\n- Áp dụng cho đơn hàng có giá trị dưới 5 triệu đồng\n- Khách hàng cần xuất trình CMND/CCCD khi nhận hàng giá trị cao\n- Một số khu vực vùng sâu vùng xa có thể không hỗ trợ COD\n\nBạn có thể kiểm tra sản phẩm trước khi thanh toán để đảm bảo chất lượng.";
    }
  },
  shippingFee: {
    patterns: [
      "phí ship", "phí giao hàng", "phí vận chuyển", "cước vận chuyển", "cước phí",
      "ship bao nhiêu", "giao hàng bao nhiêu", "vận chuyển bao nhiêu", "phí ship bao nhiêu",
      "tốn bao nhiêu tiền ship", "tiền ship", "chi phí giao", "chi phí ship",
      "free ship", "freeship", "miễn phí giao", "miễn phí ship", "miễn phí vận chuyển",
      "giao miễn phí", "ship miễn phí", "không tốn phí", "mất phí không"
    ],
    response: (location) => {
      if (!location) {
        return "Phí giao hàng được tính dựa trên khoảng cách và giá trị đơn hàng:\n\n- Nội thành TP.HCM: 20.000đ - 30.000đ (miễn phí cho đơn hàng từ 300.000đ)\n- Các tỉnh thành khác: 30.000đ - 50.000đ (miễn phí cho đơn hàng từ 500.000đ)\n- Đơn hàng trên 1.000.000đ: Miễn phí giao hàng toàn quốc\n\nBạn cũng có thể xem chính xác phí giao hàng khi tiến hành thanh toán trên website hoặc ứng dụng.";
      }
      
      const locationLower = location.toLowerCase();
      
      if (locationLower.includes("hcm") || locationLower.includes("hồ chí minh") || locationLower.includes("sài gòn") || 
          locationLower.includes("quận 1") || locationLower.includes("quận 2") || locationLower.includes("quận 3") || 
          locationLower.includes("quận 4") || locationLower.includes("quận 5") || locationLower.includes("quận 6") || 
          locationLower.includes("quận 7") || locationLower.includes("quận 8") || locationLower.includes("quận 9") || 
          locationLower.includes("quận 10") || locationLower.includes("quận 11") || locationLower.includes("quận 12") || 
          locationLower.includes("thủ đức") || locationLower.includes("bình thạnh") || locationLower.includes("phú nhuận") || 
          locationLower.includes("tân bình") || locationLower.includes("tân phú") || locationLower.includes("gò vấp") || 
          locationLower.includes("bình tân")) {
        return "Phí giao hàng tại TP.HCM:\n\n- Nội thành (các quận trung tâm): 20.000đ\n- Ngoại thành: 30.000đ\n- Miễn phí giao hàng cho đơn hàng từ 300.000đ\n- Giao nhanh trong 2 giờ: Phụ thu 15.000đ\n\nĐặc biệt, đơn hàng thực phẩm tươi sống trên 500.000đ luôn được miễn phí giao hàng trong khu vực nội thành.";
      }
      
      if (locationLower.includes("hà nội") || locationLower.includes("hanoi") || locationLower.includes("hn")) {
        return "Phí giao hàng tại Hà Nội:\n\n- Nội thành: 25.000đ\n- Ngoại thành: 35.000đ\n- Miễn phí giao hàng cho đơn hàng từ 350.000đ\n- Giao nhanh trong 2 giờ (chỉ áp dụng cho một số quận nội thành): Phụ thu 20.000đ\n\nBạn có thể xem phí giao hàng chính xác khi tiến hành thanh toán trên website hoặc ứng dụng.";
      }
      
      if (locationLower.includes("bình dương") || locationLower.includes("binh duong") || locationLower.includes("bd")) {
        return "Chúng tôi có giao hàng đến Bình Dương với phí giao hàng là 40.000đ. Đơn hàng từ 500.000đ sẽ được miễn phí giao hàng. Thời gian giao hàng dự kiến là 1-2 ngày làm việc kể từ khi đặt hàng.";
      }
      
      // Các tỉnh thành khác
      return `Phí giao hàng đến ${location} dao động từ 40.000đ đến 60.000đ tùy thuộc vào khu vực cụ thể và trọng lượng đơn hàng. Đơn hàng từ 500.000đ sẽ được miễn phí giao hàng. Thời gian giao hàng dự kiến là 3-5 ngày làm việc. Bạn có thể xem phí chính xác khi tiến hành thanh toán.`;
    }
  },
  shippingDestination: {
    patterns: [
      "có giao hàng đến", "có ship đến", "có gửi đến", "có vận chuyển đến",
      "ship đến được không", "giao đến được không", "có giao hàng tới",
      "giao hàng đến đâu", "ship đến đâu", "khu vực giao hàng", "vùng giao hàng",
      "giao hàng toàn quốc không", "ship ra nước ngoài", "giao ra nước ngoài",
      "giao hàng quốc tế", "ship quốc tế", "giao đến tỉnh", "ship đến các tỉnh",
      "giao đến huyện", "giao xa", "vùng sâu vùng xa", "phạm vi giao hàng"
    ],
    response: (location) => {
      if (!location) {
        return "Chúng tôi giao hàng đến tất cả các tỉnh thành trên toàn quốc. Tuy nhiên, một số khu vực vùng sâu vùng xa có thể mất thêm thời gian và phí giao hàng. Hiện tại chúng tôi chưa hỗ trợ giao hàng quốc tế. Bạn vui lòng cung cấp khu vực cụ thể để chúng tôi kiểm tra khả năng giao hàng.";
      }
      
      const locationLower = location.toLowerCase();
      
      // Một số khu vực cụ thể
      if (locationLower.includes("côn đảo") || locationLower.includes("con dao") || 
          locationLower.includes("phú quốc") || locationLower.includes("phu quoc") || 
          locationLower.includes("trường sa") || locationLower.includes("truong sa") || 
          locationLower.includes("hoàng sa") || locationLower.includes("hoang sa")) {
        return `Chúng tôi có thể giao hàng đến ${location}, tuy nhiên sẽ mất thêm thời gian (5-10 ngày làm việc) và phí giao hàng cao hơn. Đối với những khu vực đảo xa, việc giao hàng còn phụ thuộc vào lịch trình tàu/phà và điều kiện thời tiết. Vui lòng liên hệ hotline 1900 6789 để được tư vấn cụ thể.`;
      }
      
      if (locationLower.includes("nước ngoài") || locationLower.includes("quốc tế") || 
          locationLower.includes("international") || locationLower.includes("ngoài việt nam") || 
          locationLower.includes("overseas")) {
        return "Hiện tại chúng tôi chưa hỗ trợ giao hàng quốc tế. Dịch vụ giao hàng của chúng tôi chỉ áp dụng trong phạm vi lãnh thổ Việt Nam. Mong bạn thông cảm.";
      }
      
      // Trường hợp chung cho các tỉnh thành khác
      return `Vâng, chúng tôi có giao hàng đến ${location}. Thời gian giao hàng dự kiến là 3-7 ngày làm việc tùy thuộc vào khu vực cụ thể. Phí giao hàng sẽ được tính dựa trên khoảng cách và trọng lượng đơn hàng, thường dao động từ 30.000đ đến 60.000đ. Đơn hàng từ 500.000đ sẽ được miễn phí giao hàng.`;
    }
  },
  paymentOptions: {
    patterns: [
      "thanh toán bằng gì", "phương thức thanh toán", "cách thanh toán", "hình thức thanh toán",
      "trả tiền kiểu gì", "trả tiền bằng gì", "có những cách thanh toán nào",
      "thanh toán như thế nào", "thanh toán qua đâu", "có thể thanh toán bằng",
      "chấp nhận thanh toán", "hỗ trợ thanh toán", "payment methods", "payment",
      "thanh toán online", "thanh toán trực tuyến", "trả qua thẻ", "trả qua app",
      "ví điện tử", "e-wallet", "chuyển khoản", "banking", "ngân hàng"
    ],
    response: () => {
      return "Chúng tôi chấp nhận các phương thức thanh toán sau:\n\n1. Thanh toán khi nhận hàng (COD)\n2. Thẻ tín dụng/ghi nợ (Visa, MasterCard, JCB)\n3. Chuyển khoản ngân hàng\n4. Ví điện tử (MoMo, ZaloPay, ShopeePay, VNPay)\n5. QR Code\n6. Thẻ thành viên (sử dụng điểm tích lũy)\n\nKhi thanh toán online, hệ thống sẽ chuyển bạn đến cổng thanh toán an toàn để hoàn tất giao dịch.";
    }
  },
  installmentPayment: {
    patterns: [
      "trả góp", "góp", "installment", "thanh toán trả góp", "mua trả góp",
      "hỗ trợ trả góp", "có trả góp không", "có hỗ trợ trả góp không",
      "trả góp 0%", "trả góp không lãi suất", "góp hàng tháng", "góp mỗi tháng",
      "trả dần", "trả từng đợt", "trả theo kỳ", "0% lãi suất", "lãi suất 0%",
      "không lãi suất", "mua trước trả sau", "buy now pay later", "bnpl",
      "trả sau", "mua ngay trả sau", "góp mỗi tháng bao nhiêu", "trả góp qua thẻ"
    ],
    response: () => {
      return "Chúng tôi có hỗ trợ thanh toán trả góp cho các đơn hàng từ 3 triệu đồng trở lên, áp dụng cho một số sản phẩm nhất định như thiết bị điện tử, điện lạnh và đồ gia dụng lớn. Các hình thức trả góp hiện có:\n\n1. Trả góp qua thẻ tín dụng: kỳ hạn 3-12 tháng, lãi suất từ 0-2% tùy ngân hàng\n2. Trả góp qua công ty tài chính: Home Credit, FE Credit với kỳ hạn 6-12 tháng\n3. Trả góp 0% lãi suất cho đơn hàng từ 5 triệu đồng với một số đối tác ngân hàng\n\nLưu ý: Để đăng ký trả góp, bạn cần chuẩn bị CMND/CCCD, hộ khẩu/KT3, bằng lái xe và chứng minh thu nhập (tùy trường hợp). Vui lòng liên hệ nhân viên tư vấn để biết thêm chi tiết.";
    }
  },
  momoPayment: {
    patterns: [
      "momo", "thanh toán momo", "trả tiền momo", "ví momo", "ví điện tử momo",
      "quét mã momo", "quét momo", "quét qr momo", "liên kết momo",
      "có chấp nhận momo không", "có nhận momo không", "có thanh toán bằng momo không",
      "có trả bằng momo được không", "momo được không", "dùng momo được không",
      "có cho thanh toán momo không", "có ship cod không"
    ],
    response: () => {
      return "Vâng, chúng tôi có chấp nhận thanh toán qua ví MoMo. Bạn có thể thanh toán bằng MoMo thông qua các cách sau:\n\n1. Trên website: Chọn phương thức thanh toán MoMo khi thanh toán, sau đó quét QR hoặc xác nhận trên ứng dụng MoMo của bạn\n2. Tại cửa hàng: Quét mã QR tại quầy thanh toán hoặc cung cấp số điện thoại đăng ký MoMo\n\nViệc thanh toán qua MoMo rất nhanh chóng, an toàn và đôi khi còn có ưu đãi giảm giá từ MoMo.";
    }
  },
  cardPayment: {
    patterns: [
      "thanh toán thẻ", "trả bằng thẻ", "dùng thẻ", "thẻ tín dụng", "thẻ ghi nợ",
      "visa", "mastercard", "jcb", "credit card", "debit card", "atm card", "thẻ atm",
      "có chấp nhận thẻ không", "có thanh toán bằng thẻ không", "có dùng thẻ được không",
      "dùng visa được không", "dùng mastercard được không", "quẹt thẻ", "chạm thẻ",
      "tapcard", "tap to pay", "thanh toán không tiếp xúc", "contactless payment"
    ],
    response: () => {
      return "Vâng, chúng tôi chấp nhận thanh toán bằng tất cả các loại thẻ phổ biến bao gồm:\n\n- Thẻ tín dụng (Visa, MasterCard, JCB, American Express)\n- Thẻ ghi nợ quốc tế\n- Thẻ ATM nội địa có kích hoạt thanh toán online\n\nHỗ trợ cả thanh toán không tiếp xúc (Contactless payment) và thanh toán qua thiết bị di động (Apple Pay, Samsung Pay, Google Pay). Giao dịch qua thẻ được bảo mật theo tiêu chuẩn PCI DSS.";
    }
  },
  contactDetails: {
    patterns: [
      "liên hệ", "liên lạc", "thông tin liên hệ", "số điện thoại", "email", "hotline",
      "tổng đài", "gọi cho ai", "gọi số nào", "liên hệ với ai", "liên hệ như thế nào",
      "liên hệ tại đâu", "liên lạc với ai", "liên lạc thế nào", "customer service",
      "dịch vụ khách hàng", "đường dây nóng", "contact", "cần hỗ trợ", "cần giúp đỡ",
      "cần tư vấn", "tư vấn viên", "nhân viên tư vấn", "nhân viên hỗ trợ"
    ],
    response: () => {
      return "Thông tin liên hệ của chúng tôi:\n\n- Hotline: 1900 6789 (8h00 - 22h00 hàng ngày, phí cuộc gọi: 1.000đ/phút)\n- Email hỗ trợ: support@chuoikoicho.com\n- Địa chỉ: 273 An Dương Vương, Phường 3, Quận 5, TP. Hồ Chí Minh\n- Fanpage: Facebook.com/FoodChain\n- Zalo OA: ChuoiKoiCho\n\nBạn cũng có thể sử dụng tính năng chat trực tuyến trên website hoặc ứng dụng di động để được hỗ trợ nhanh chóng.";
    }
  },
  exchangeReturn: {
    patterns: [
      "đổi trả", "hoàn trả", "trả lại", "đổi hàng", "trả hàng", "hoàn tiền",
      "refund", "exchange", "return", "chính sách đổi trả", "quy định đổi trả",
      "muốn đổi", "muốn trả", "làm sao để đổi", "làm sao để trả", "cách đổi",
      "cách trả", "thủ tục đổi", "thủ tục trả", "điều kiện đổi", "điều kiện trả",
      "thời hạn đổi", "thời hạn trả", "được đổi không", "được trả không"
    ],
    response: () => {
      return "Chính sách đổi trả của chúng tôi như sau:\n\n- Thời hạn đổi trả: Trong vòng 7 ngày kể từ khi nhận hàng\n- Điều kiện đổi trả:\n  + Sản phẩm còn nguyên bao bì, tem nhãn, chưa qua sử dụng\n  + Có hóa đơn mua hàng\n  + Sản phẩm không thuộc danh mục không được đổi trả (thực phẩm tươi sống, hàng đã qua sử dụng...)\n\n- Các trường hợp được đổi trả:\n  + Sản phẩm bị lỗi do nhà sản xuất\n  + Sản phẩm không đúng như mô tả hoặc hình ảnh\n  + Giao nhầm sản phẩm hoặc thiếu sản phẩm\n\nĐể đổi trả, bạn có thể liên hệ hotline 1900 6789 hoặc mang sản phẩm đến trực tiếp cửa hàng cùng với hóa đơn mua hàng.";
    }
  },
  chatWithStaff: {
    patterns: [
      "chat với nhân viên", "nói chuyện với nhân viên", "chat trực tiếp", "chat trực tuyến",
      "live chat", "nhắn tin cho nhân viên", "nói chuyện trực tiếp", "tư vấn trực tiếp",
      "tư vấn online", "hỗ trợ trực tuyến", "hỗ trợ online", "gặp nhân viên", "gặp tư vấn viên",
      "tìm người hỗ trợ", "có nhân viên hỗ trợ không", "có nhân viên tư vấn không",
      "chat với người thật", "chat với con người", "chat với bot", "đang chat với ai"
    ],
    response: () => {
      return "Bạn có thể chat với nhân viên tư vấn của chúng tôi thông qua các kênh sau:\n\n1. Website: Nhấn vào biểu tượng chat ở góc phải màn hình\n2. Ứng dụng di động: Vào mục 'Hỗ trợ' và chọn 'Chat với nhân viên'\n3. Fanpage Facebook: Nhắn tin trực tiếp qua Facebook Messenger\n4. Zalo OA: Chat qua Zalo Official Account 'ChuoiKoiCho'\n\nGiờ làm việc của nhân viên tư vấn: 8h00 - 22h00 hàng ngày. Ngoài giờ làm việc, bạn vẫn có thể để lại tin nhắn và sẽ được phản hồi vào giờ làm việc tiếp theo.";
    }
  },
  missingItems: {
    patterns: [
      "thiếu hàng", "thiếu sản phẩm", "thiếu đồ", "không đủ sản phẩm", "không đủ hàng",
      "nhận thiếu", "giao thiếu", "không đúng số lượng", "sai số lượng", "thiếu mất",
      "bị thiếu", "chưa đủ", "chưa đủ số lượng", "thiếu món", "thiếu mặt hàng",
      "nhận được thiếu", "đơn hàng thiếu", "đơn thiếu", "đếm thiếu", "thiếu so với đơn"
    ],
    response: () => {
      return "Rất tiếc về sự bất tiện này! Nếu bạn nhận được đơn hàng bị thiếu sản phẩm, vui lòng thực hiện theo các bước sau:\n\n1. Chụp ảnh đơn hàng và sản phẩm đã nhận\n2. Liên hệ ngay với chúng tôi qua hotline 1900 6789 hoặc email support@chuoikoicho.com\n3. Cung cấp mã đơn hàng và mô tả sản phẩm bị thiếu\n\nChúng tôi sẽ xác minh thông tin và giải quyết trong vòng 24 giờ làm việc bằng cách giao bổ sung sản phẩm thiếu hoặc hoàn tiền cho sản phẩm đó. Xin lỗi vì sự bất tiện này!";
    }
  },
  
  damagedProducts: {
    patterns: [
      "hàng hỏng", "sản phẩm hỏng", "hàng bị hỏng", "sản phẩm bị hỏng", "hàng lỗi", "sản phẩm lỗi",
      "hàng bị lỗi", "sản phẩm bị lỗi", "hư hỏng", "bị hư", "bị vỡ", "bị bể", "bị nát",
      "không nguyên vẹn", "bị rách", "bị vỡ gãy", "bị ẩm mốc", "bị hết hạn", "bị biến chất",
      "bị hỏng dập", "bị méo mó", "bị móp", "bị trầy xước", "bị bẩn", "bị ố", "bị mốc"
    ],
    response: () => {
      return "Chúng tôi rất tiếc về trải nghiệm không tốt của bạn. Đối với sản phẩm bị hỏng, lỗi hoặc không đạt chất lượng, vui lòng:\n\n1. Chụp ảnh tình trạng sản phẩm bị hỏng/lỗi\n2. Liên hệ chúng tôi trong vòng 24 giờ kể từ khi nhận hàng qua hotline 1900 6789\n3. Cung cấp mã đơn hàng và mô tả vấn đề bạn gặp phải\n\nChúng tôi sẽ tiến hành đổi mới sản phẩm hoặc hoàn tiền 100% tùy theo lựa chọn của bạn. Với thực phẩm tươi sống, vui lòng báo cáo ngay khi nhận hàng để được hỗ trợ tốt nhất.";
    }
  },
  
  qualityComplaints: {
    patterns: [
      "không hài lòng", "chất lượng kém", "chất lượng không tốt", "không đạt chất lượng",
      "chưa đạt yêu cầu", "không như mong đợi", "thất vọng", "chất lượng thấp",
      "không đúng cam kết", "không đúng mô tả", "sai mô tả", "khác mô tả",
      "không như hình", "không giống hình", "sai so với hình", "không đúng với hình",
      "không như quảng cáo", "không giống quảng cáo", "kém chất lượng", "chán"
    ],
    response: () => {
      return "Chúng tôi rất tiếc khi bạn không hài lòng với chất lượng sản phẩm. Phản hồi của bạn rất quan trọng để chúng tôi cải thiện dịch vụ. Vui lòng:\n\n1. Liên hệ bộ phận Chăm sóc khách hàng qua số 1900 6789 hoặc email complaints@chuoikoicho.com\n2. Cung cấp mã đơn hàng, tên sản phẩm và mô tả chi tiết vấn đề chất lượng\n3. Gửi hình ảnh sản phẩm nếu có thể\n\nChúng tôi cam kết phản hồi trong vòng 24 giờ làm việc và đưa ra phương án giải quyết thỏa đáng như đổi sản phẩm, hoàn tiền hoặc tặng phiếu mua hàng bồi thường. Cảm ơn sự góp ý của bạn!";
    }
  },
  
  contactSupport: {
    patterns: [
      "khiếu nại", "phàn nàn", "góp ý", "than phiền", "tố cáo", "báo cáo vấn đề",
      "report", "complain", "complaint", "feedback", "phản hồi", "ý kiến", "nhận xét",
      "đánh giá", "review", "liên hệ ai", "báo cáo ai", "khiếu nại với ai", "góp ý với ai",
      "gặp quản lý", "gặp người phụ trách", "gặp giám đốc", "gặp trưởng phòng",
      "gặp bộ phận", "phản ánh vấn đề", "báo lỗi"
    ],
    response: () => {
      return "Để gửi khiếu nại, góp ý hoặc phản hồi, bạn có thể liên hệ chúng tôi qua các kênh sau:\n\n1. Hotline Chăm sóc khách hàng: 1900 6789 (8h00 - 22h00 hàng ngày)\n2. Email: feedback@chuoikoicho.com (phản hồi trong vòng 24 giờ làm việc)\n3. Form góp ý trên website: www.chuoikoicho.com/feedback\n4. Trực tiếp tại cửa hàng: Gặp quản lý cửa hàng\n5. Văn phòng dịch vụ khách hàng: 273 An Dương Vương, Phường 3, Quận 5, TP. HCM\n\nMọi phản hồi của bạn đều được ghi nhận và xử lý nghiêm túc. Chúng tôi luôn nỗ lực cải thiện dịch vụ để mang đến trải nghiệm tốt nhất cho khách hàng.";
    }
  },
  
  diabeticFoods: {
    patterns: [
      "đồ ăn cho người tiểu đường", "thực phẩm cho người tiểu đường", "tiểu đường", "đái tháo đường",
      "diabetes", "đường huyết cao", "đường trong máu cao", "thực phẩm ít đường",
      "đồ ăn ít đường", "thực phẩm cho bệnh tiểu đường", "thực phẩm an toàn cho người tiểu đường",
      "đồ ăn dành cho người tiểu đường", "diabetic food", "đồ cho người tiểu đường",
      "sản phẩm cho người tiểu đường", "cho người bị tiểu đường", "kiểm soát đường huyết"
    ],
    response: () => {
      return "Chúng tôi có nhiều sản phẩm phù hợp cho người tiểu đường bao gồm:\n\n1. Thực phẩm ít đường/không đường: sữa không đường, ngũ cốc ít đường, đồ uống không đường\n2. Thực phẩm có chỉ số đường huyết thấp (GI thấp): gạo lứt, yến mạch, các loại đậu\n3. Rau củ tươi và trái cây ít ngọt: bưởi, táo, dưa chuột, rau xanh\n4. Thực phẩm giàu protein: thịt nạc, cá, trứng, đậu phụ\n5. Thực phẩm chuyên biệt cho người tiểu đường: bánh ăn kiêng, các sản phẩm sử dụng chất tạo ngọt thay thế đường\n\nCác sản phẩm này được phân loại và gắn nhãn riêng trong cửa hàng hoặc website. Bạn có thể tham khảo ý kiến của bác sĩ hoặc chuyên gia dinh dưỡng để lựa chọn thực phẩm phù hợp với tình trạng sức khỏe của mình.";
    }
  },
  
  quickMeals: {
    patterns: [
      "đồ ăn nhanh", "thức ăn nhanh", "đồ ăn liền", "mì gói", "mì ăn liền", "cơm cháy",
      "cháo ăn liền", "súp ăn liền", "thức ăn tiện lợi", "đồ ăn nấu nhanh", "đồ ăn chế biến nhanh",
      "bữa ăn nhanh", "bữa ăn tiện lợi", "đồ ăn chỉ cần hâm nóng", "đồ ăn chỉ cần pha",
      "đồ ăn chỉ cần trộn", "đồ ăn tiết kiệm thời gian", "món ăn nhanh", "nấu gì nhanh",
      "nấu nhanh mà rẻ", "quick meal", "fast food", "instant food", "convenient food"
    ],
    response: () => {
      return "Chúng tôi có nhiều lựa chọn thực phẩm nấu nhanh, vừa tiện lợi vừa đảm bảo dinh dưỡng:\n\n1. Thực phẩm ăn liền: mì gói cao cấp, cháo ăn liền, phở ăn liền, miến ăn liền\n2. Thực phẩm đông lạnh: cá viên, chả giò, há cảo, xíu mại chỉ cần hâm nóng\n3. Các loại hộp cơm/thực phẩm đóng gói: cơm cuộn, cơm hộp, salad đóng gói\n4. Đồ hộp: thịt/cá đóng hộp, súp đóng hộp, rau đóng hộp\n5. Thực phẩm bán chế biến: rau củ đã sơ chế, thịt đã ướp sẵn chỉ cần mang đi nấu\n\nĐặc biệt, nếu bạn quan tâm đến giá cả, chúng tôi có combo thực phẩm nấu nhanh tiết kiệm chỉ từ 30.000đ/bữa, đủ dinh dưỡng cho 1-2 người. Các sản phẩm đều có hướng dẫn chế biến đơn giản, chỉ mất 3-10 phút là có thể dùng được.";
    }
  },
  
  bestSellers: {
    patterns: [
      "sản phẩm bán chạy", "sản phẩm bán chạy nhất", "mua nhiều nhất", "sản phẩm hot",
      "sản phẩm phổ biến", "sản phẩm nổi bật", "sản phẩm được ưa chuộng", "sản phẩm được yêu thích",
      "sản phẩm bán tốt nhất", "sản phẩm hot nhất", "sản phẩm top", "top sản phẩm",
      "best sellers", "best selling", "most popular", "trending products", "hot items",
      "sản phẩm trending", "sản phẩm xu hướng", "đang hot", "được mua nhiều"
    ],
    response: async () => {
      try {
        // Thử lấy dữ liệu sản phẩm bán chạy từ database
        const bestSellingProducts = await Product.find({}).sort({ productSold: -1 }).limit(5);
        
        if (bestSellingProducts && bestSellingProducts.length > 0) {
          // Tạo response với sản phẩm thực từ database
          let response = "Các sản phẩm bán chạy nhất hiện nay tại cửa hàng chúng tôi:\n\n";
          
          bestSellingProducts.forEach((product, index) => {
            response += `${index + 1}. ${product.productName} - ${formatCurrency(product.productPrice)}${product.productDiscount > 0 ? ` (Giảm ${product.productDiscount}%)` : ''}\n`;
          });
          
          response += "\nBạn có thể tìm hiểu thêm về các sản phẩm này hoặc đặt mua ngay trên website của chúng tôi.";
          return response;
        } else {
          // Trả về dữ liệu mẫu nếu không tìm thấy trong database
          return "Các sản phẩm bán chạy nhất hiện nay tại cửa hàng chúng tôi:\n\n1. Pepsi lon 330ml (thùng 24 lon) - Giảm 10%\n2. Mì Hảo Hảo tôm chua cay (thùng 30 gói) - Giảm 15%\n3. Sữa tươi Vinamilk không đường 1L - Mua 2 tặng 1\n4. Dầu ăn Tường An 1L - Giảm 8%\n5. Nước mắm Nam Ngư 900ml - Giảm 12%\n\nCác sản phẩm này được nhiều khách hàng tin dùng và thường xuyên nằm trong top sản phẩm bán chạy của chúng tôi.";
        }
      } catch (error) {
        console.error("Lỗi khi lấy sản phẩm bán chạy:", error);
        // Trả về dữ liệu mẫu trong trường hợp lỗi
        return "Các sản phẩm bán chạy nhất hiện nay tại cửa hàng chúng tôi:\n\n1. Pepsi lon 330ml (thùng 24 lon) - Giảm 10%\n2. Mì Hảo Hảo tôm chua cay (thùng 30 gói) - Giảm 15%\n3. Sữa tươi Vinamilk không đường 1L - Mua 2 tặng 1\n4. Dầu ăn Tường An 1L - Giảm 8%\n5. Nước mắm Nam Ngư 900ml - Giảm 12%\n\nCác sản phẩm này được nhiều khách hàng tin dùng và thường xuyên nằm trong top sản phẩm bán chạy của chúng tôi.";
      }
    }
  },
  
  healthyFoods: {
    patterns: [
      "thực phẩm lành mạnh", "đồ ăn lành mạnh", "ăn kiêng", "ăn sạch", "healthy food",
      "clean eating", "diet food", "low calorie", "ít calo", "giảm cân", "ăn để giảm cân",
      "đồ ăn healthy", "organic", "thực phẩm hữu cơ", "thực phẩm tốt cho sức khỏe",
      "đồ ăn bổ dưỡng", "thực phẩm dinh dưỡng", "thực phẩm tốt", "đồ ăn tốt",
      "ăn uống lành mạnh", "ăn uống khoa học", "ăn uống điều độ", "chế độ ăn khoa học"
    ],
    response: () => {
      return "Chúng tôi có nhiều lựa chọn thực phẩm lành mạnh cho lối sống khỏe mạnh:\n\n1. Thực phẩm hữu cơ: rau củ, trái cây, trứng, thịt hữu cơ được chứng nhận\n2. Thực phẩm nguyên chất: gạo lứt, yến mạch, ngũ cốc nguyên hạt, hạt dinh dưỡng\n3. Superfoods: hạt chia, quả acai, bột maca, goji berry, hạt lanh\n4. Thực phẩm ít calo/low-carb: các loại rau nhiều chất xơ, protein nạc, thực phẩm thay thế đường\n5. Đồ uống lành mạnh: nước ép trái cây/rau củ tươi, trà xanh, trà thảo mộc, nước ion kiềm\n\nChúng tôi cũng có góc tư vấn dinh dưỡng miễn phí trên website và tại cửa hàng để giúp bạn lựa chọn thực phẩm phù hợp với mục tiêu sức khỏe và tình trạng cơ thể.";
    }
  },
  
  productUsage: {
    patterns: [
      "công dụng", "tác dụng", "lợi ích", "dùng để làm gì", "dùng để", "dùng làm gì",
      "sử dụng để", "sử dụng làm gì", "lợi ích của", "ích lợi", "giúp gì", "có tác dụng gì",
      "có công dụng gì", "dùng như thế nào", "dùng sao", "dùng như nào", "cách dùng",
      "uống như thế nào", "ăn như thế nào", "dùng khi nào", "dùng lúc nào", 
      "nó dùng để làm gì", "sản phẩm này dùng để làm gì", "dùng để làm gì vậy",
      "để làm gì", "tại sao nên dùng", "tác dụng phụ", "tác dụng của"
    ],
    response: (product) => {
      if (!product) {
        return "Vui lòng cho biết bạn muốn biết công dụng của sản phẩm nào?";
      }
      
      // Xây dựng phản hồi dựa trên thông tin sản phẩm từ DB
      let productInfo = "";
      
      // Kiểm tra và sử dụng các trường thông tin khác nhau của sản phẩm
      if (product.productDetails && product.productDetails.trim()) {
        productInfo = product.productDetails;
      } else if (product.productInfo && product.productInfo.trim()) {
        productInfo = product.productInfo;
      } else if (product.productDescription && product.productDescription.trim()) {
        productInfo = product.productDescription;
      }
      
      // Nếu không có thông tin cụ thể, sử dụng thông tin chung dựa trên loại sản phẩm
      if (!productInfo) {
        const productType = (product.productCategory || "").toLowerCase();
        
        if (productType.includes("sữa") || product.productName.toLowerCase().includes("sữa")) {
          productInfo = "Sữa là nguồn cung cấp canxi và protein dồi dào, giúp xây dựng và duy trì xương chắc khỏe, phát triển cơ bắp. Sản phẩm có thể dùng trực tiếp hoặc kết hợp với các món ăn, đồ uống khác.";
        } else if (productType.includes("đồ uống") || productType.includes("nước")) {
          productInfo = "Đồ uống giúp giải khát, bổ sung nước và các dưỡng chất cần thiết cho cơ thể. Nên uống lạnh để có trải nghiệm tốt nhất.";
        } else if (productType.includes("thực phẩm khô") || productType.includes("đồ ăn vặt")) {
          productInfo = "Đây là thực phẩm tiện lợi, có thể sử dụng trực tiếp hoặc chế biến nhanh. Phù hợp làm bữa ăn nhẹ hoặc đồ ăn vặt.";
        } else {
          productInfo = "Sản phẩm dùng trong chế biến thực phẩm hoặc tiêu dùng hàng ngày. Vui lòng xem hướng dẫn sử dụng trên bao bì để có kết quả tốt nhất.";
        }
      }
        
        return {
        type: "text",
        text: `Công dụng của ${product.productName}:\n${productInfo}`
      };
    }
  },
  // Thêm intent mới cho giới thiệu sản phẩm
  productIntroduction: {
    patterns: [
      "giới thiệu", "nói về", "kể về", "cho biết về", "mô tả về", 
      "giới thiệu về sản phẩm", "nói về sản phẩm", "kể về sản phẩm", 
      "sản phẩm này là gì", "sản phẩm này như thế nào", "cho mình biết về sản phẩm",
      "sản phẩm này có gì đặc biệt", "đặc điểm của sản phẩm", "thông tin về sản phẩm",
      "giới thiệu sản phẩm", "mô tả sản phẩm", "cho tôi biết về", "nói qua về"
    ],
    response: (product) => {
      try {
        if (!product) {
          return "Vui lòng cho biết bạn muốn tôi giới thiệu về sản phẩm nào?";
        }
        
        // Xây dựng phản hồi dựa trên thông tin sản phẩm
        let introduction = "";
        
        // Tạo phần thông tin chính
        introduction += `${product.productName} là sản phẩm ${product.productCategory || "chất lượng"} của chúng tôi.\n\n`;
        
        // Thêm thông tin chi tiết từ các trường có sẵn - Thêm kiểm tra null/undefined
        if (product.productDetails && typeof product.productDetails === 'string' && product.productDetails.trim()) {
          introduction += `Thông tin chi tiết: ${product.productDetails}\n\n`;
        }
        
        if (product.productInfo && typeof product.productInfo === 'string' && product.productInfo.trim()) {
          introduction += `${product.productInfo}\n\n`;
        }
        
        if (product.productDescription && typeof product.productDescription === 'string' && product.productDescription.trim()) {
          introduction += `${product.productDescription}\n\n`;
        }
        
        // Thêm thông tin về giá và khuyến mãi
        introduction += `Giá: ${formatCurrency(product.productPrice)}`;
        
        if (product.productDiscount && product.productDiscount > 0) {
          const discountedPrice = Math.round(product.productPrice * (1 - product.productDiscount / 100));
          introduction += ` (Đang giảm ${product.productDiscount}%, còn ${formatCurrency(discountedPrice)})`;
        }
        
        // Nếu không có đủ thông tin chi tiết, tạo giới thiệu dựa trên loại sản phẩm
        if (introduction.split('\n').length <= 3) {
          const productType = (product.productCategory || "").toLowerCase();
          
          if (productType.includes("nước giặt") || product.productName.toLowerCase().includes("nước giặt")) {
            introduction += `\n\nĐây là sản phẩm nước giặt chất lượng cao, giúp làm sạch hiệu quả, khử mùi hôi và làm thơm quần áo. Phù hợp với nhiều loại vải và an toàn cho da nhạy cảm.`;
          } else if (productType.includes("sữa") || product.productName.toLowerCase().includes("sữa")) {
            introduction += `\n\nĐây là sản phẩm sữa chất lượng, giàu dưỡng chất, vitamin và khoáng chất, giúp bổ sung dinh dưỡng hàng ngày cho cơ thể.`;
          } else if (productType.includes("đồ uống") || productType.includes("nước")) {
            introduction += `\n\nĐây là thức uống ngon, giúp giải khát và bổ sung năng lượng. Được nhiều khách hàng ưa chuộng và đánh giá cao về chất lượng.`;
          } else if (productType.includes("thực phẩm") || productType.includes("đồ ăn")) {
            introduction += `\n\nĐây là thực phẩm chất lượng cao, được sản xuất theo các tiêu chuẩn an toàn vệ sinh thực phẩm, mang lại hương vị tuyệt vời và trải nghiệm ẩm thực tốt nhất.`;
          }
        }
        
        // Thêm thông tin mua hàng
        introduction += `\n\nBạn có thể mua sản phẩm này tại cửa hàng hoặc đặt mua online trên website của chúng tôi.`;
        
        return {
          type: "text",
          text: introduction
        };
      } catch (error) {
        console.error("Lỗi khi giới thiệu sản phẩm:", error);
        return {
          type: "text",
          text: `Xin lỗi, đã có lỗi xảy ra khi lấy thông tin giới thiệu về sản phẩm ${product?.productName || ""}. Bạn có thể yêu cầu hỗ trợ từ nhân viên tư vấn.`
        };
      }
    }
  },
  // Thêm responses cho các loại sản phẩm cụ thể
  categoryQuery: {
    patterns: [
      "có muối nào", "có muối gì", "muối ngon", "muối nào ngon", 
      "muối loại nào", "muối hiệu nào", "muối thơm", "muối tôm",
      "muối ớt", "muối tiêu", "muối chanh", "nước mắm", "nước tương"
    ],
    response: async (message) => {
      try {
        // Trích xuất tên danh mục từ tin nhắn
        let category = "";
        
        if (message.toLowerCase().includes("muối")) {
          category = "muối";
        } else if (message.toLowerCase().includes("nước mắm")) {
          category = "nước mắm";
        } else if (message.toLowerCase().includes("nước tương")) {
          category = "nước tương";
        } else {
          // Trích xuất từ categories
          const categories = [
            "muối", "nước", "bánh", "kẹo", "mì", "gạo", "đường", "sữa", "gia vị", 
            "nước mắm", "nước tương", "bột ngọt", "dầu ăn", "snack", "bánh kẹo"
          ];
          
          for (const cat of categories) {
            if (message.toLowerCase().includes(cat)) {
              category = cat;
              break;
            }
          }
        }
        
        if (!category) {
          return "Bạn đang quan tâm đến sản phẩm thuộc danh mục nào? Cửa hàng có nhiều loại hàng hóa như bánh kẹo, nước uống, đồ ăn vặt, thực phẩm,...";
        }
        
        console.log(`Đang tìm kiếm sản phẩm trong danh mục: "${category}"`);
        
        // Tìm kiếm sản phẩm theo danh mục
        const products = await Product.find({
          $or: [
            { productCategory: { $regex: category, $options: 'i' } },
            { productName: { $regex: category, $options: 'i' } }
          ]
        })
        .sort({ soldCount: -1, productDiscount: -1 })
        .limit(8);
        
        if (products.length > 0) {
          // Format sản phẩm để hiển thị
          const formattedProducts = products.map(p => ({
            id: p._id,
            name: p.productName,
            price: p.productPrice,
            discount: p.productDiscount,
            promotionalPrice: p.productDiscount ? Math.round(p.productPrice * (1 - p.productDiscount / 100)) : p.productPrice,
            image: p.productImages && p.productImages.length > 0 ? p.productImages[0] : "default-product.jpg",
            description: p.productDetails || p.productInfo || "",
            category: p.productCategory
          }));
          
          // Xử lý trường hợp đặc biệt - muối
          if (category === "muối") {
            // Lấy thông tin sản phẩm muối Fadely nếu có
            const fadelyMuoi = products.find(p => 
              p.productName.toLowerCase().includes("fadely") && 
              p.productName.toLowerCase().includes("muối")
            );
            
            if (fadelyMuoi) {
              const priceText = fadelyMuoi.productDiscount ? 
                `${formatCurrency(fadelyMuoi.productPrice)} (đang giảm ${fadelyMuoi.productDiscount}% còn ${formatCurrency(fadelyMuoi.productPrice * (1 - fadelyMuoi.productDiscount/100))})` :
                formatCurrency(fadelyMuoi.productPrice);
                
              let additionalInfo = "";
              if (fadelyMuoi.productDetails) {
                additionalInfo = ` ${fadelyMuoi.productDetails}`;
              }
              
              return {
                success: true,
                message: `Cửa hàng có sản phẩm ${fadelyMuoi.productName} giá ${priceText}.${additionalInfo} Ngoài ra còn có ${products.length-1} sản phẩm muối khác:`,
                data: formattedProducts,
                type: 'categoryQuery',
                text: `Cửa hàng có sản phẩm ${fadelyMuoi.productName} giá ${priceText}.${additionalInfo} Ngoài ra còn có ${products.length-1} sản phẩm muối khác:`,
                intent: "categoryQuery"
              };
            } else {
              return {
                success: true,
                message: `Cửa hàng có ${products.length} sản phẩm ${category} như sau:`,
                data: formattedProducts,
                type: 'categoryQuery',
                text: `Cửa hàng có ${products.length} sản phẩm ${category} như sau:`,
                intent: "categoryQuery"
              };
            }
          } else {
            // Trường hợp thông thường cho các danh mục khác
            return {
              success: true,
              message: `Cửa hàng có ${products.length} sản phẩm ${category} như sau:`,
              data: formattedProducts,
              type: 'categoryQuery',
              text: `Cửa hàng có ${products.length} sản phẩm ${category} như sau:`,
              intent: "categoryQuery"
            };
          }
        } else {
          return `Rất tiếc, hiện tại cửa hàng không có sản phẩm ${category} nào. Bạn có thể tham khảo các sản phẩm khác hoặc cho biết bạn đang tìm gì?`;
        }
      } catch (error) {
        console.error("Lỗi khi xử lý tìm kiếm sản phẩm theo danh mục:", error);
        return "Xin lỗi, đã xảy ra lỗi khi tìm kiếm sản phẩm. Vui lòng thử lại sau.";
      }
    }
  }
};

// Cấu hình Rasa
const RASA_URL = process.env.RASA_URL || 'http://localhost:5005';

// Hàm format tiền tệ
function formatCurrency(amount) {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND'
  }).format(amount);
}

// Cải thiện hàm tính toán độ tương đồng để chính xác hơn
function calculateSimilarity(message, pattern) {
  const normalizedMessage = message.toLowerCase().trim();
  const normalizedPattern = pattern.toLowerCase().trim();
  
  // Kiểm tra chính xác - nếu message chứa pattern chính xác
  if (normalizedMessage.includes(normalizedPattern)) {
    // Kiểm tra xem pattern là một phần của từ hay là một từ riêng biệt
    const messageWords = normalizedMessage.split(/\s+/);
    const patternWords = normalizedPattern.split(/\s+/);

    // Nếu pattern là nhiều từ và được tìm thấy chính xác trong tin nhắn
    if (patternWords.length > 1) {
      // Nếu pattern dài (>=3 từ) và khớp chính xác - độ tin cậy rất cao
      if (patternWords.length >= 3) {
        return 1.5;
      }
      // Pattern trung bình (2 từ) - khớp chính xác
      return 1.2;
    } 
    
    // Kiểm tra xem từ đơn lẻ có là một từ riêng biệt không
    let isStandaloneWord = false;
    for (const word of messageWords) {
      if (word === normalizedPattern) {
        isStandaloneWord = true;
        break;
      }
    }
    
    if (isStandaloneWord) {
      // Từ đơn lẻ cần kiểm tra thêm ngữ cảnh
      // Kiểm tra xem nó có phải là một từ chung quá phổ biến không
      const commonWords = ["thông tin", "giá", "mua", "cách"];
      if (commonWords.includes(normalizedPattern)) {
        // Với từ phổ biến, kiểm tra thêm ngữ cảnh
        // Tìm các từ có ý nghĩa xung quanh từ khóa
        let contextScore = 0;
        
        // Kiểm tra xem tin nhắn có phải chỉ là từ khóa đơn lẻ không
        if (messageWords.length <= 2) {
          return 0.8; // Chỉ có từ khóa đơn lẻ, điểm cao nhưng không quá cao
        }
        
        // Kiểm tra thêm các từ khóa liên quan đến chủ đề cụ thể
        const relatedTopics = {
          "thông tin": ["thực phẩm", "sạch", "hữu cơ", "organic", "xuất xứ", "sản phẩm", "rau", "thịt", "cá", "trái cây", "tươi"],
          "giá": ["sản phẩm", "bao nhiêu", "tiền", "đắt", "rẻ", "chi phí"],
          "mua": ["sản phẩm", "hàng", "đặt", "order", "thủ tục", "online"],
          "cách": ["sử dụng", "bảo quản", "chế biến", "nấu", "dùng"]
        };
        
        // Nếu có từ khóa liên quan đến chủ đề cụ thể
        if (relatedTopics[normalizedPattern]) {
          for (const word of messageWords) {
            if (relatedTopics[normalizedPattern].includes(word)) {
              contextScore += 0.2; // Cộng điểm cho mỗi từ liên quan
            }
          }
        }
        
        // Nếu tìm thấy ngữ cảnh rõ ràng
        if (contextScore > 0) {
          return Math.min(1.0, 0.7 + contextScore); // Tối đa là 1.0
        }
        
        return 0.7; // Mặc định cho từ phổ biến
      }
      
      return 1.0; // Từ không phổ biến, khớp hoàn toàn
    }
    
    // Pattern là một phần của từ khác, cho điểm thấp hơn
    return 0.6;
  }
  
  // Kiểm tra từng từ trong pattern
  const patternWords = normalizedPattern.split(/\s+/);
  let matchingWords = 0;
  let totalWeight = 0;
  let matchedWeight = 0;
  
  for (const word of patternWords) {
    if (word.length < 2) continue; // Bỏ qua các từ quá ngắn
    
    // Từ dài quan trọng hơn
    const wordWeight = Math.min(1.0, 0.5 + (word.length / 10));
    totalWeight += wordWeight;
    
    if (normalizedMessage.includes(word)) {
      matchingWords++;
      matchedWeight += wordWeight;
    }
  }
  
  // Nếu không có từ nào có thể so sánh, trả về 0
  if (totalWeight === 0) return 0;
  
  // Tính similarity dựa trên trọng số của các từ khớp
  const similarity = matchedWeight / totalWeight;
  
  // Bonus cho số lượng từ khớp nhiều (thúc đẩy khớp nhiều từ)
  if (patternWords.length > 2 && matchingWords >= 2) {
    return similarity * (1 + (matchingWords / patternWords.length) * 0.5);
  }
  
  return similarity;
}

// Thêm mảng quy định các trường hợp ưu tiên intent khi có xung đột
const priorityRules = [
  // Nếu tin nhắn chứa "sản phẩm giảm giá", ưu tiên intent discountedProducts hơn price
  { 
    patterns: ["sản phẩm giảm giá", "sản phẩm đang giảm giá", "tìm sản phẩm giảm giá"], 
    priorityIntent: "discountedProducts" 
  },
  // Nếu tin nhắn chứa "sản phẩm dưới" hoặc "tìm sản phẩm giá", ưu tiên intent priceRange hơn price
  { 
    patterns: ["sản phẩm dưới", "tìm sản phẩm giá", "tìm sản phẩm theo giá", "tìm hàng giá"],
    priorityIntent: "priceRange" 
  },
  // Nếu tin nhắn chứa các từ khóa liên quan đến tìm kiếm theo danh mục, ưu tiên intent categorySearch
  {
    patterns: ["tìm rau", "các loại rau", "hiển thị rau", "rau gì", "rau nào"],
    priorityIntent: "categorySearch"
  },
  // Nếu tin nhắn chứa các từ khóa tìm kiếm sản phẩm cụ thể, ưu tiên intent productSearch
  {
    patterns: ["tìm sản phẩm", "tìm cho tôi", "có bán", "muốn mua", "muốn xem", "tôi muốn", "có sản phẩm", "hiển thị"],
    priorityIntent: "productSearch"
  }
];

// Sửa hàm detectIntent để ưu tiên xử lý câu hỏi về nước uống
function detectIntent(message) {
  if (!message || typeof message !== 'string') {
    return { name: 'general', score: 0.5 };
  }
  
  const lowerCaseMessage = message.toLowerCase().trim();
  
  // Kiểm tra intent tìm kiếm theo khoảng giá
  if (lowerCaseMessage.includes("dưới") || 
      lowerCaseMessage.includes("từ") && lowerCaseMessage.includes("đến") ||
      lowerCaseMessage.includes("khoảng") ||
      (lowerCaseMessage.includes("giá") && 
       (lowerCaseMessage.includes("k") || 
        lowerCaseMessage.includes("nghìn") || 
        lowerCaseMessage.includes("000") ||
        lowerCaseMessage.includes("triệu")))) {
    return { name: "priceRangeProducts", score: 0.9 };
  }
  
  // Kiểm tra intent truy vấn danh mục sản phẩm
  const categoryPatterns = [
    "có muối nào", "có muối gì", "muối ngon", "muối nào ngon", 
    "muối loại nào", "muối hiệu nào", "muối thơm", "muối tôm",
    "cửa hàng có muối", "shop có muối", "bán muối", "muối gì", 
    "muối tôm không", "muối ớt không", "có muối không"
  ];
  
  for (const pattern of categoryPatterns) {
    if (lowerCaseMessage.includes(pattern)) {
      return { name: "categoryQuery", score: 0.9 };
    }
  }
  
  // Kiểm tra intent tìm kiếm sản phẩm
  const productSearchKeywords = ["tìm", "có bán", "mua", "cửa hàng có", "muốn mua", "sản phẩm", 
                               "có không", "bán không", "bán gì", "có gì", "loại nào", "hãng nào"];
  
  for (const keyword of productSearchKeywords) {
    if (lowerCaseMessage.includes(keyword)) {
      return { name: "productSearch", score: 0.8 };
    }
  }
  
  // Kiểm tra câu hỏi về danh mục
  const categories = ["muối", "nước", "bánh", "kẹo", "mì", "gạo", "đường", "sữa", "gia vị", 
                     "nước mắm", "nước tương", "bột ngọt", "dầu ăn", "snack", "bánh kẹo", 
                     "đồ uống", "nước ngọt", "đồ nhậu", "bia", "rượu", "thịt", "rau", "trái cây",
                     "thực phẩm"];
                     
  for (const category of categories) {
    if (lowerCaseMessage.includes(category)) {
      // Kiểm tra các mẫu câu cụ thể về danh mục
      if (lowerCaseMessage.includes(`có ${category}`) || 
          lowerCaseMessage.includes(`${category} nào`) || 
          lowerCaseMessage.includes(`${category} không`) || 
          lowerCaseMessage.includes(`${category} gì`)) {
        return { name: "categoryQuery", score: 0.85 };
      }
      return { name: "productSearch", score: 0.85 };
    }
  }
  
  // Nếu hỏi về giá và khuyến mãi
  if (lowerCaseMessage.includes("giá") || 
      lowerCaseMessage.includes("bao nhiêu tiền") || 
      lowerCaseMessage.includes("giá bao nhiêu") ||
      lowerCaseMessage.includes("giá cả") ||
      lowerCaseMessage.includes("khuyến mãi") ||
      lowerCaseMessage.includes("giảm giá") ||
      lowerCaseMessage.includes("sale")) {
    return { name: "productPrice", score: 0.8 };
  }
  
  // Các intent khác giữ nguyên...
  return { name: 'general', score: 0.5 };
}

// Hàm xử lý context của cuộc trò chuyện
function handleContext(context, currentIntent) {
  if (!context || !context.type) {
    return null;
  }

  try {
    // Handle product context
    if (context.type === 'product' && context.data) {
      const product = context.data;
      
      // If there's no specific intent, provide general product info
      if (!currentIntent) {
        return `Sản phẩm ${product.productName} có giá ${formatCurrency(product.productPrice)}. ${product.productDiscount > 0 ? `Đang giảm giá ${product.productDiscount}%.` : ''} Bạn muốn biết thêm thông tin gì về sản phẩm này?`;
      }
      
      // If there's a specific intent that needs product info, use the intent handler
      if (intents[currentIntent] && typeof intents[currentIntent].response === 'function') {
        return intents[currentIntent].response(product);
      }
    }
    
    return null;
  } catch (error) {
    console.error(`Error handling context: ${error.message}`);
    return null;
  }
}

// Hàm gửi tin nhắn đến Rasa và nhận phản hồi
async function sendToRasa(message, senderId) {
  try {
    const response = await axios.post(`${RASA_URL}/webhooks/rest/webhook`, {
      sender: senderId,
      message: message
    });
    
    if (response.data && response.data.length > 0) {
      return response.data[0].text;
    }
    
    return "Xin lỗi, tôi không hiểu câu hỏi của bạn.";
  } catch (error) {
    return "Đã có lỗi xảy ra khi xử lý tin nhắn của bạn.";
  }
}

// Hàm tạo slug từ tên sản phẩm
function createSlug(name) {
  if (!name) {
    return "";
  }
  
  const slug = name
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[đĐ]/g, 'd')
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .trim();
  
  return slug;
}

// Kiểm tra các intent không cần thông tin sản phẩm
const generalIntents = [
  'greeting', 'thanks', 'bye', 'storeAddress', 'orderStatus', 'contactInfo', 
  'mostExpensiveProduct', 'cheapestProduct', 'discountedProducts', 'userInfo', 'buyingMethods', 'paymentMethods',
  'foodSafety', 'organicFood', 'deliveryInfo', 'returnPolicy', 'membershipProgram', 'freshFood',
  'importedFood', 'vegetarianFood', 'storeLocation', 'promotions', 'mobileApp', 'nutritionAdvice'
];

/**
 * Get answer from RAG chatbot
 * @param {string} message - User message
 * @returns {Promise<string>} - RAG chatbot response
 */
async function getAnswerFromRagChatbot(message) {
  try {
    console.log("Đang thử sử dụng RAG chatbot...");
    
    // TẠM THỜI TẮT RAG CHATBOT ĐỂ TRÁNH LỖI
    console.log("RAG chatbot bị tắt để tránh lỗi. Chuyển sang chatbot đơn giản.");
    return null; // Luôn trả về null để sử dụng chatbot pattern-based
  } catch (error) {
    console.error('Lỗi tổng quát khi sử dụng RAG chatbot:', error);
    return null; // Trả về null để sử dụng chatbot pattern-based
  }
}

// Hàm xử lý tin nhắn từ người dùng
export const handleMessage = async (req, res) => {
  try {
    const { message, userId, productId } = req.body;

    if (!message) {
      return res.status(400).json({
        success: false,
        message: "Message is required"
      });
    }
    
    console.log(`Nhận tin nhắn từ user ${userId || 'anonymous'}: "${message}"`);
    
    // Phát hiện intent từ tin nhắn
    const intent = detectIntent(message);
    console.log("Intent được phát hiện:", intent);
    
    let responseMessage;
    
    // Xử lý riêng cho intent tìm kiếm sản phẩm
    if (intent && intent.name === 'productSearch') {
      try {
        // Trích xuất tên sản phẩm từ tin nhắn
        const productName = extractProductNameFromMessage(message);
        console.log(`Tên sản phẩm trích xuất từ tin nhắn: "${productName}"`);
        
        if (!productName || productName === "") {
          return res.status(200).json({
            success: true,
            message: "Vui lòng cho tôi biết bạn muốn tìm sản phẩm gì?",
            intent: "productSearch"
          });
        } else {
          // Tìm kiếm sản phẩm theo tên
          const searchResults = await searchProducts(productName);
          
          if (searchResults && searchResults.length > 0) {
            console.log(`Tìm thấy ${searchResults.length} sản phẩm cho "${productName}"`);
            
            // Format products for display
            const formattedProducts = searchResults.map(product => ({
              id: product._id,
              name: product.productName,
              price: product.productPrice,
              discount: product.productDiscount,
              promotionalPrice: product.productDiscount ? Math.round(product.productPrice * (1 - product.productDiscount / 100)) : product.productPrice,
              image: product.productImages && product.productImages.length > 0 ? product.productImages[0] : "default-product.jpg",
              description: product.productInfo || product.productDetails || product.productDescription || ""
            }));
            
            return res.status(200).json({
              success: true,
              message: `Tôi đã tìm thấy ${searchResults.length} sản phẩm "${productName}" cho bạn:`,
              data: formattedProducts,
              type: 'productSearch',
              text: `Tôi đã tìm thấy ${searchResults.length} sản phẩm "${productName}" cho bạn:`,
              intent: "productSearch"
            });
          } else {
            console.log(`Không tìm thấy sản phẩm nào cho "${productName}"`);
            return res.status(200).json({
              success: true,
              message: `Xin lỗi, tôi không tìm thấy sản phẩm nào với từ khóa "${productName}". Bạn có thể thử tìm kiếm với từ khóa khác.`,
              intent: "productSearch"
            });
          }
        }
      } catch (error) {
        console.error("Lỗi khi xử lý tìm kiếm sản phẩm:", error);
        return res.status(200).json({
          success: true,
          message: "Xin lỗi, đã xảy ra lỗi khi tìm kiếm. Vui lòng thử lại sau.",
          intent: "productSearch"
        });
      }
    }
    
    // Xử lý riêng cho intent tìm kiếm theo danh mục sản phẩm cụ thể
    if (intent && intent.name === 'categoryQuery') {
      try {
        // Trích xuất tên danh mục từ tin nhắn
        let category = "";
        
        if (message.toLowerCase().includes("muối")) {
          category = "muối";
        } else if (message.toLowerCase().includes("nước mắm")) {
          category = "nước mắm";
        } else if (message.toLowerCase().includes("nước tương")) {
          category = "nước tương";
        } else {
          // Trích xuất từ categories
          const categories = [
            "muối", "nước", "bánh", "kẹo", "mì", "gạo", "đường", "sữa", "gia vị", 
            "bột ngọt", "dầu ăn", "snack", "bánh kẹo"
          ];
          
          for (const cat of categories) {
            if (message.toLowerCase().includes(cat)) {
              category = cat;
              break;
            }
          }
        }
        
        if (!category) {
          responseMessage = "Bạn đang quan tâm đến sản phẩm thuộc danh mục nào? Cửa hàng có nhiều loại hàng hóa như bánh kẹo, nước uống, đồ ăn vặt, thực phẩm,...";
        } else {
          console.log(`Đang tìm kiếm sản phẩm trong danh mục: "${category}"`);
          
          // Tìm kiếm sản phẩm theo danh mục
          const products = await Product.find({
            $or: [
              { productCategory: { $regex: category, $options: 'i' } },
              { productName: { $regex: category, $options: 'i' } }
            ]
          })
          .sort({ soldCount: -1, productDiscount: -1 })
          .limit(8);
          
          if (products.length > 0) {
            // Format sản phẩm để hiển thị
            const formattedProducts = products.map(p => ({
              id: p._id,
              name: p.productName,
              price: p.productPrice,
              discount: p.productDiscount,
              promotionalPrice: p.productDiscount ? Math.round(p.productPrice * (1 - p.productDiscount / 100)) : p.productPrice,
              image: p.productImages && p.productImages.length > 0 ? p.productImages[0] : "default-product.jpg",
              description: p.productDetails || p.productInfo || "",
              category: p.productCategory
            }));
            
            // Xử lý trường hợp đặc biệt - muối
            if (category === "muối") {
              // Lấy thông tin sản phẩm muối Fadely nếu có
              const fadelyMuoi = products.find(p => 
                p.productName.toLowerCase().includes("fadely") && 
                p.productName.toLowerCase().includes("muối")
              );
              
              if (fadelyMuoi) {
                const priceText = fadelyMuoi.productDiscount ? 
                  `${formatCurrency(fadelyMuoi.productPrice)} (đang giảm ${fadelyMuoi.productDiscount}% còn ${formatCurrency(fadelyMuoi.productPrice * (1 - fadelyMuoi.productDiscount/100))})` :
                  formatCurrency(fadelyMuoi.productPrice);
                  
                let additionalInfo = "";
                if (fadelyMuoi.productDetails) {
                  additionalInfo = ` ${fadelyMuoi.productDetails}`;
                }
                
                responseMessage = {
                  success: true,
                  message: `Cửa hàng có sản phẩm ${fadelyMuoi.productName} giá ${priceText}.${additionalInfo} Ngoài ra còn có ${products.length-1} sản phẩm muối khác:`,
                  data: formattedProducts,
                  type: 'categoryQuery',
                  text: `Cửa hàng có sản phẩm ${fadelyMuoi.productName} giá ${priceText}.${additionalInfo} Ngoài ra còn có ${products.length-1} sản phẩm muối khác:`,
                  intent: "categoryQuery"
                };
              } else {
                responseMessage = {
                  success: true,
                  message: `Cửa hàng có ${products.length} sản phẩm ${category} như sau:`,
                  data: formattedProducts,
                  type: 'categoryQuery',
                  text: `Cửa hàng có ${products.length} sản phẩm ${category} như sau:`,
                  intent: "categoryQuery"
                };
              }
            } else {
              // Trường hợp thông thường cho các danh mục khác
              responseMessage = {
                success: true,
                message: `Cửa hàng có ${products.length} sản phẩm ${category} như sau:`,
                data: formattedProducts,
                type: 'categoryQuery',
                text: `Cửa hàng có ${products.length} sản phẩm ${category} như sau:`,
                intent: "categoryQuery"
              };
            }
          } else {
            responseMessage = `Rất tiếc, hiện tại cửa hàng không có sản phẩm ${category} nào. Bạn có thể tham khảo các sản phẩm khác hoặc cho biết bạn đang tìm gì?`;
          }
        }
      } catch (error) {
        console.error("Lỗi khi xử lý tìm kiếm sản phẩm theo danh mục:", error);
        responseMessage = "Xin lỗi, đã xảy ra lỗi khi tìm kiếm. Vui lòng thử lại sau.";
      }
      
      return res.status(200).json(
        typeof responseMessage === 'string' 
          ? {
              success: true,
              message: responseMessage,
              intent: "categoryQuery"
            }
          : responseMessage
      );
    }
    
    // Xử lý riêng cho intent tìm kiếm theo khoảng giá
    if (intent && intent.name === 'priceRangeProducts') {
      try {
        console.log("Xử lý intent priceRangeProducts với tin nhắn:", message);
        
        // Xác định khoảng giá từ tin nhắn
        const priceRange = extractPriceRange(message);
        console.log("Khoảng giá được trích xuất:", priceRange);

        let query = {};
        if (priceRange.minPrice !== null && priceRange.maxPrice !== null) {
          query = { 
            productPrice: { 
              $gte: priceRange.minPrice, 
              $lte: priceRange.maxPrice 
            } 
          };
        } else if (priceRange.maxPrice !== null) {
          query = { productPrice: { $lte: priceRange.maxPrice } };
        } else {
          // Mặc định tìm sản phẩm dưới 100k
          query = { productPrice: { $lte: 100000 } };
        }

        console.log("Query MongoDB:", JSON.stringify(query));

        const products = await Product.find(query)
          .select('productName productPrice productDiscount productImages productDetails productInfo')
          .limit(8);

        console.log(`Tìm thấy ${products.length} sản phẩm theo khoảng giá`);

        if (products && products.length > 0) {
          const priceRangeText = priceRange.minPrice !== null && priceRange.maxPrice !== null 
            ? `từ ${formatCurrency(priceRange.minPrice)} đến ${formatCurrency(priceRange.maxPrice)}`
            : priceRange.maxPrice !== null 
              ? `dưới ${formatCurrency(priceRange.maxPrice)}`
              : "dưới 100.000đ";

          // Format products for display
          const formattedProducts = products.map(product => ({
            id: product._id,
            name: product.productName,
            price: product.productPrice,
            discount: product.productDiscount,
            promotionalPrice: product.productDiscount ? Math.round(product.productPrice * (1 - product.productDiscount / 100)) : product.productPrice,
            image: product.productImages && product.productImages.length > 0 ? product.productImages[0] : "default-product.jpg",
            description: product.productDetails || product.productInfo || ""
          }));

          return res.status(200).json({
            success: true,
            message: `Tôi đã tìm thấy ${products.length} sản phẩm ${priceRangeText}:`,
            data: formattedProducts,
            type: 'priceRangeProducts',
            text: `Tôi đã tìm thấy ${products.length} sản phẩm ${priceRangeText}:`,
            intent: "priceRangeProducts"
          });
        } else {
          const priceRangeText = priceRange.minPrice !== null && priceRange.maxPrice !== null 
            ? `trong khoảng từ ${formatCurrency(priceRange.minPrice)} đến ${formatCurrency(priceRange.maxPrice)}`
            : priceRange.maxPrice !== null 
              ? `dưới ${formatCurrency(priceRange.maxPrice)}`
              : "dưới 100.000đ";
          
          return res.status(200).json({
            success: true,
            message: `Xin lỗi, tôi không tìm thấy sản phẩm nào ${priceRangeText}. Bạn có thể thử tìm với mức giá khác.`,
            intent: "priceRangeProducts"
          });
        }
      } catch (error) {
        console.error("Lỗi khi xử lý tìm kiếm sản phẩm theo giá:", error);
        return res.status(200).json({
          success: true,
          message: "Xin lỗi, đã xảy ra lỗi khi tìm kiếm. Vui lòng thử lại sau.",
          intent: "priceRangeProducts"
        });
      }
    }
    
    // Xử lý các intent khác (giữ nguyên code xử lý)

    // Trực tiếp sử dụng chatbot pattern-based, bỏ qua RAG
    // Sử dụng context nếu có
    let context = null;

    // Nếu có productId, lấy thông tin sản phẩm
    let product = null;
    if (productId) {
      try {
        console.log(`Đang tìm kiếm sản phẩm với ID: ${productId}`);
        product = await Product.findById(productId);
        if (product) {
          console.log(`Tìm thấy sản phẩm: ${product.productName}, danh mục: ${product.productCategory}`);
          context = { type: 'product', data: product };
        } else {
          console.log(`Không tìm thấy sản phẩm với ID: ${productId}`);
        }
      } catch (error) {
        console.error(`Lỗi khi lấy thông tin sản phẩm: ${error.message}`);
      }
    }

    // Lấy phản hồi dựa trên intent và context
    let response = await handleContext(context, intent.name);
    console.log(`Phản hồi từ handleContext: ${response ? (typeof response === 'object' ? 'Object response' : response) : 'Không có phản hồi'}`);

    // Nếu không có phản hồi từ context, sử dụng response theo intent
    if (!response) {
      if (intent.score > 0.5) {
        if (intents[intent.name] && typeof intents[intent.name].response === 'function') {
          console.log(`Gọi hàm xử lý cho intent: ${intent.name} ${product ? 'với product' : 'không có product'}`);
          try {
          if (product) {
              response = await intents[intent.name].response(product);
          } else {
              response = await intents[intent.name].response();
            }
          } catch (error) {
            console.error(`Lỗi khi gọi hàm xử lý cho intent ${intent.name}:`, error);
            response = "Xin lỗi, đã xảy ra lỗi khi xử lý yêu cầu của bạn. Vui lòng thử lại sau.";
          }
        } else if (intents[intent.name] && intents[intent.name].response) {
          response = intents[intent.name].response;
        } else {
          response = "Xin lỗi, tôi không hiểu ý của bạn. Bạn có thể diễn đạt lại hoặc hỏi về sản phẩm, giá cả, hoặc dịch vụ giao hàng của chúng tôi.";
        }
        console.log(`Phản hồi từ intentHandler: ${typeof response === 'object' ? 'Object response' : response}`);
      } else {
        // Nếu không tìm thấy intent nào phù hợp, trả về tin nhắn mặc định
        console.log(`Intent không đủ độ chính xác (score: ${intent.score}), trả về tin nhắn mặc định`);
        response = "Xin lỗi, tôi không hiểu ý của bạn. Bạn có thể diễn đạt lại hoặc hỏi về sản phẩm, giá cả, hoặc dịch vụ giao hàng của chúng tôi.";
      }
    }

    // Chuẩn bị phản hồi JSON
    const responseJSON = {
      success: true,
      intent: intent.name,
      score: intent.score
    };

    // Nếu response là object (có thể chứa thông tin products, nameCategory, v.v.)
    if (typeof response === 'object' && response !== null) {
      console.log(`Phản hồi dạng object với type: ${response.type}`);
      responseJSON.message = response.text || '';
      responseJSON.data = response;
      
      // Thêm thông tin bổ sung
      if (response.type) responseJSON.type = response.type;
      if (response.nameCategory) responseJSON.nameCategory = response.nameCategory;
      if (response.products) {
        responseJSON.products = response.products;
        console.log(`Phản hồi chứa ${response.products.length} sản phẩm`);
      }
    } else {
      // Nếu response chỉ là chuỗi văn bản đơn giản
      responseJSON.message = response;
    }

    // Trả về phản hồi
    console.log(`Trả về phản hồi cho client với type: ${responseJSON.type || 'không có type'}`);
    res.status(200).json(responseJSON);
  } catch (error) {
    console.error(`Lỗi xử lý tin nhắn: ${error.message}`);
    return res.status(500).json({
      success: false,
      message: "Lỗi xử lý tin nhắn",
      error: error.message
    });
  }
};

// Hàm xử lý webhook từ Rasa
export const handleRasaWebhook = async (req, res) => {
  try {
    const { sender, message } = req.body;
    
    if (!sender || !message) {
      return res.status(400).json({
        success: false,
        message: "Thiếu thông tin cần thiết"
      });
    }
    
    // Xử lý tin nhắn từ Rasa
    // Có thể thêm logic xử lý đặc biệt ở đây nếu cần
    
    return res.json({
      success: true,
      message: "Đã nhận tin nhắn từ Rasa"
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "Đã có lỗi xảy ra khi xử lý webhook từ Rasa"
    });
  }
};

async function findRelatedProducts(product) {
  try {
    // Define the fields we want to use for finding related products
    const possibleFields = [
      { field: 'productCategory', value: product.productCategory },
      { field: 'categoryCode', value: product.categoryCode },
    ];

    // Select the first non-empty field
    const categoryField = possibleFields.find(f => f.value && f.value !== 'undefined');
    const categoryValue = categoryField?.value;

    // Build the query based on available data
    let query = {};

    // If it's a beverage product (can check based on category name or code)
    if (product.productCategory === 'Đồ uống các loại' || 
        product.categoryCode === 'douong') {
      // For beverages, find other beverages
      query = {
        $or: [
          { productCategory: 'Đồ uống các loại' },
          { categoryCode: 'douong' }
        ],
        _id: { $ne: product._id } // Exclude the current product
      };
    }
    // If we have category information
    else if (categoryValue) {
      query = {
        [categoryField.field]: categoryValue,
        _id: { $ne: product._id } // Exclude the current product
      };
    } else {
      // Fallback to a more general search if no category available
      // Could use text search here if available in your MongoDB setup
      query = {
        _id: { $ne: product._id } // At minimum, exclude the current product
      };
    }

    // Find related products
    const relatedProducts = await Product.find(query).limit(5);

    // If no related products found, get some random products
    if (relatedProducts.length === 0) {
      return await Product.aggregate([{ $sample: { size: 3 } }]);
    }

    return relatedProducts;
  } catch (_) {
    // Error handled by the caller
    return [];
  }
}

// Helper function to create a slug from a product name
function createSlugFromName(name) {
  if (!name) {
    return '';
  }
  
  try {
    // Basic slug creation: lowercase, replace spaces with hyphens, remove special chars
    const slug = name
      .toLowerCase()
      .replace(/đ/g, 'd')
      .replace(/[áàảãạâấầẩẫậăắằẳẵặ]/g, 'a')
      .replace(/[éèẻẽẹêếềểễệ]/g, 'e')
      .replace(/[íìỉĩị]/g, 'i')
      .replace(/[óòỏõọôốồổỗộơớờởỡợ]/g, 'o')
      .replace(/[úùủũụưứừửữự]/g, 'u')
      .replace(/[ýỳỷỹỵ]/g, 'y')
      .replace(/\s+/g, '-')
      .replace(/[^\w\-]+/g, '')
      .replace(/\-\-+/g, '-')
      .trim();
      
    return slug;
  } catch (error) {
    return '';
  }
}

// Hàm trích xuất khoảng giá từ tin nhắn người dùng
function extractPriceRanges(message) {
  // Kiểm tra message có tồn tại và là string hay không
  if (!message || typeof message !== 'string') {
    return { minPrice: null, maxPrice: null };
  }

  // Chuẩn hóa message: bỏ dấu, chuyển về chữ thường, thay thế k/nghìn thành 000
  const normalizedMessage = message.toLowerCase()
    .replace(/k\b/g, '000')
    .replace(/nghìn\b/g, '000')
    .replace(/\.000/g, '000')
    .replace(/\./g, '')
    .replace(/,/g, '');
  
  console.log("Normalized message for price extraction:", normalizedMessage);
  
  // Pattern cho tìm sản phẩm theo giá cụ thể
  const exactPattern = /(?:giá|giá tiền|giá cả|giá bán|chi phí|mức giá|sản phẩm giá)\s+(\d+)(?:k|nghìn|000)?(?:\s+đồng|\s+vnd|\s+đ)?/i;
  const exactMatch = normalizedMessage.match(exactPattern);
  
  // Pattern cho khoảng giá từ X đến Y
  const rangePattern = /(?:từ|giá từ|khoảng|trong khoảng|dao động từ)\s+(\d+)(?:k|nghìn|000)?(?:\s+đồng|\s+vnd|\s+đ)?\s+(?:đến|tới|tới|toi|den|~|-|đến)\s+(\d+)(?:k|nghìn|000)?(?:\s+đồng|\s+vnd|\s+đ)?/i;
  const rangeMatch = normalizedMessage.match(rangePattern);
  
  // Pattern cho giá dưới X
  const belowPattern = /(?:dưới|ít hơn|nhỏ hơn|không quá|dưới mức|thấp hơn|rẻ hơn|tìm sản phẩm giá dưới|sản phẩm giá dưới|giá dưới)\s+(\d+)(?:k|nghìn|000)?(?:\s+đồng|\s+vnd|\s+đ)?/i;
  const belowMatch = normalizedMessage.match(belowPattern);
  
  // Pattern cho giá trên X
  const abovePattern = /(?:trên|hơn|lớn hơn|cao hơn|đắt hơn|từ|tìm sản phẩm giá trên|sản phẩm giá trên|giá trên)\s+(\d+)(?:k|nghìn|000)?(?:\s+đồng|\s+vnd|\s+đ)?(?:\s+trở lên|\s+trở nên)?/i;
  const aboveMatch = normalizedMessage.match(abovePattern);
  
  // Pattern cho khoảng giá tương tự/gần như một mức giá cố định
  const similarPattern = /(?:khoảng|gần như|tương tự|giá tương tự|giá gần|gần bằng|xấp xỉ)\s+(\d+)(?:k|nghìn|000)?(?:\s+đồng|\s+vnd|\s+đ)?/i;
  const similarMatch = normalizedMessage.match(similarPattern);
  
  // Khởi tạo giá trị mặc định
  let minPrice = null;
  let maxPrice = null;
  
  // Tùy chỉnh cho những câu như "tìm sản phẩm giá dưới 100k"
  if (normalizedMessage.includes("tìm sản phẩm") && normalizedMessage.includes("giá")) {
    // Tìm số trong câu
    const numberPattern = /(\d+)(?:k|nghìn|000)?/g;
    const numberMatches = normalizedMessage.match(numberPattern);
    
    if (numberMatches && numberMatches.length > 0) {
      let price = parseInt(numberMatches[0].replace(/k/g, '000').replace(/nghìn/g, '000'));
      if (price < 1000) price *= 1000;
      
      if (normalizedMessage.includes("dưới") || normalizedMessage.includes("ít hơn") || normalizedMessage.includes("không quá")) {
        maxPrice = price;
      } else if (normalizedMessage.includes("trên") || normalizedMessage.includes("hơn") || normalizedMessage.includes("ít nhất")) {
        minPrice = price;
      } else if (normalizedMessage.includes("khoảng") || normalizedMessage.includes("xấp xỉ") || normalizedMessage.includes("tương tự")) {
        // Khoảng giá xấp xỉ (±20%)
        minPrice = Math.floor(price * 0.8);
        maxPrice = Math.ceil(price * 1.2);
      } else {
        // Giá chính xác
        minPrice = price;
        maxPrice = price;
      }
      
      console.log(`Extracted from specific pattern: minPrice=${minPrice}, maxPrice=${maxPrice}`);
      return { minPrice, maxPrice };
    }
  }
  
  // Xử lý khoảng giá từ X đến Y
  if (rangeMatch) {
    minPrice = parseInt(rangeMatch[1]);
    maxPrice = parseInt(rangeMatch[2]);
    
    // Xử lý trường hợp người dùng nhập 100 thay vì 100000
    if (minPrice < 1000) minPrice *= 1000;
    if (maxPrice < 1000) maxPrice *= 1000;
  } 
  // Xử lý giá dưới X
  else if (belowMatch) {
    maxPrice = parseInt(belowMatch[1]);
    if (maxPrice < 1000) maxPrice *= 1000;
  } 
  // Xử lý giá trên X
  else if (aboveMatch) {
    minPrice = parseInt(aboveMatch[1]);
    if (minPrice < 1000) minPrice *= 1000;
  }
  // Xử lý giá tương tự X
  else if (similarMatch) {
    const price = parseInt(similarMatch[1]);
    if (price < 1000) {
      minPrice = price * 800; // 20% thấp hơn
      maxPrice = price * 1200; // 20% cao hơn
    } else {
      minPrice = price * 0.8; // 20% thấp hơn
      maxPrice = price * 1.2; // 20% cao hơn
    }
  }
  // Xử lý giá chính xác
  else if (exactMatch) {
    const price = parseInt(exactMatch[1]);
    if (price < 1000) {
      minPrice = price * 1000;
      maxPrice = price * 1000;
    } else {
      minPrice = price;
      maxPrice = price;
    }
  }
  // Các từ khóa đặc biệt
  else if (normalizedMessage.includes("giá rẻ") || normalizedMessage.includes("rẻ")) {
    maxPrice = 50000; // Dưới 50k cho sản phẩm giá rẻ
  }
  
  console.log(`Extracted price range: minPrice=${minPrice}, maxPrice=${maxPrice}`);
  return { minPrice, maxPrice };
}

// Hàm trích xuất tên sản phẩm từ tin nhắn người dùng
function extractProductNameFromMessage(message) {
  try {
    // Đảm bảo message là string
    if (!message || typeof message !== 'string') {
      console.log("Message không phải string:", message);
      return ""; // Trả về rỗng nếu không phải string
    }
    
    // Chuẩn hóa message
    message = message.toLowerCase().trim();
    console.log("Đang phân tích nội dung tin nhắn:", message);
    
    // Kiểm tra và xử lý các trường hợp "đồ nhậu"
    if (message.includes("mối đề nhậu") || 
        message.includes("mồi đề nhậu") || 
        message.includes("mồi nhậu") || 
        message.includes("đồ nhậu")) {
      return "đồ nhậu";
    }
    
    // Xử lý các câu hỏi về danh mục sản phẩm cụ thể
    // Danh sách danh mục phổ biến
    const categories = [
      "muối", "nước", "bánh", "kẹo", "mì", "gạo", "đường", "sữa", "gia vị", 
      "nước mắm", "nước tương", "bột ngọt", "dầu ăn", "snack", "bánh kẹo", 
      "đồ uống", "nước ngọt", "đồ nhậu", "bia", "rượu", "thịt", "rau", "trái cây"
    ];
    
    // Kiểm tra xem tin nhắn có chứa tên danh mục nào không
    for (const category of categories) {
      if (message.includes(category)) {
        console.log(`Tìm thấy danh mục trong tin nhắn: "${category}"`);
        
        // Xử lý các trường hợp đặc biệt
        if (category === "nước") {
          // Kiểm tra nếu có kèm theo "nước mắm" hoặc "nước tương"
          if (message.includes("nước mắm")) return "nước mắm";
          if (message.includes("nước tương")) return "nước tương";
          if (message.includes("giải khát") || message.includes("uống")) return "nước giải khát";
        }
        
        // Trả về danh mục
        return category;
      }
    }
    
    // Xử lý các trường hợp phổ biến
    if (message.includes("nước giải khát") || 
        message.includes("giải khát") || 
        message.includes("đồ uống") || 
        message.includes("thức uống")) {
      return "nước giải khát";
    }
    
    // Các pattern cần loại bỏ
    const patterns = [
      "tìm", "kiếm", "mua", "bán", "tôi muốn", "giúp tôi", "cho tôi",
      "sản phẩm", "hàng", "cần", "muốn", "hỏi về", "về", "cho mình", "bạn có",
      "cái", "một cái", "một", "có bán", "không", "có", "những", "các",
      "loại", "giống", "mấy", "giá", "bao nhiêu", "thông tin", 
      "cửa hàng", "shop", "ngon", "tốt", "chất lượng", "hãng", "hiệu"
    ];
    
    // Loại bỏ các từ không cần thiết
    patterns.forEach(pattern => {
      message = message.replace(new RegExp(`\\b${pattern}\\b`, 'gi'), ' ');
    });
    
    // Loại bỏ ký tự đặc biệt và khoảng trắng thừa
    message = message.replace(/[^\w\sàáạảãâầấậẩẫăằắặẳẵèéẹẻẽêềếệểễìíịỉĩòóọỏõôồốộổỗơờớợởỡùúụủũưừứựửữỳýỵỷỹđ]/g, ' ');
    message = message.replace(/\s+/g, ' ').trim();
    
    console.log("Sau khi xử lý, từ khóa tìm kiếm:", message);
    return message;
  } catch (error) {
    console.error("Lỗi khi phân tích tên sản phẩm:", error);
    return "";
  }
}

// Cập nhật hàm productSearch.response để sử dụng hàm searchProducts
intents.productSearch = {
  patterns: [
    "tìm sản phẩm", "tìm", "tìm kiếm", "tìm giúp", "tìm cho tôi", 
    "tìm cho mình", "kiếm", "kiếm giúp", "kiếm cho tôi", "kiếm cho mình",
    "tìm hiểu", "tìm hiểu về", "tìm hiểu sản phẩm", "tìm hiểu về sản phẩm",
    "sản phẩm", "có sản phẩm", "có sản phẩm nào", "sản phẩm gì",
    "tìm mối đề nhậu", "tìm đồ nhậu", "tìm đồ ăn", "tìm thức ăn", "tìm nước uống",
    "tìm món ăn", "tìm món", "tìm đồ", "tìm thức", "tìm nước",
    // Thêm các mẫu câu hỏi mới
    "cửa hàng có", "có bán", "mua được", "bán không", "có không", 
    "bán gì", "có gì", "tôi muốn mua", "muốn mua", "bán ở đâu",
    "cung cấp", "cho mình hỏi", "cho tôi hỏi", "ngon không", "loại nào ngon",
    "loại nào tốt", "loại nào", "hãng nào", "hàng nào", "chất lượng",
    "giới thiệu", "mua ở đâu", "đặt hàng", "order", "mua online"
  ],
  response: async (message) => {
    try {
      const productName = extractProductNameFromMessage(message);
      
      if (!productName) {
        return "Bạn muốn tìm sản phẩm gì? Vui lòng cung cấp tên hoặc mô tả sản phẩm cụ thể.";
      }
      
      console.log(`Đang tìm kiếm sản phẩm: "${productName}"`);
      
      // Sử dụng hàm searchProducts để tìm sản phẩm
      const products = await searchProducts(productName);
      
      if (products.length > 0) {
        // Tạo phản hồi với sản phẩm tìm thấy
        const productElements = products.map(p => {
          const imageUrl = p.productImages && p.productImages.length > 0 
            ? p.productImages[0] 
            : "default-product.jpg";
          
          return {
            type: "product",
            id: p._id,
            name: p.productName,
            price: p.productPrice,
            image: imageUrl,
            discount: p.productDiscount,
            promotionalPrice: p.productDiscount ? Math.round(p.productPrice * (1 - p.productDiscount / 100)) : p.productPrice,
            description: p.productInfo || p.productDetails || p.productDescription || ""
          };
        });
        
        return {
          text: `Tôi đã tìm thấy ${products.length} sản phẩm "${productName}" cho bạn:`,
          products: productElements,
          type: "productSearch"
        };
      } else {
        return `Xin lỗi, tôi không tìm thấy sản phẩm nào với từ khóa "${productName}". Bạn có thể thử tìm kiếm với từ khóa khác.`;
      }
    } catch (error) {
      console.error("Lỗi khi tìm kiếm sản phẩm:", error);
      return "Xin lỗi, đã xảy ra lỗi khi tìm kiếm sản phẩm. Vui lòng thử lại sau.";
    }
  }
};

// Cập nhật hàm searchProducts
async function searchProducts(productName) {
  try {
    let results = [];
    
    console.log(`Tìm kiếm sản phẩm với từ khóa: "${productName}"`);
    
    // Xử lý tìm kiếm theo danh mục sản phẩm cụ thể
    // Các danh mục phổ biến
    const commonCategories = {
      "muối": ["muối", "muối ăn", "muối tinh", "muối biển", "muối tôm", "muối ớt", "muối chanh", "muối hạt"],
      "nước giải khát": ["nước", "nước uống", "nước ngọt", "đồ uống", "thức uống", "giải khát", "nước khoáng", "coca", "pepsi", "7up", "sprite", "fanta"],
      "gia vị": ["gia vị", "bột nêm", "bột canh", "hạt nêm", "dầu ăn", "nước mắm", "nước tương", "tương ớt", "tương cà", "mắm", "nước chấm"]
    };
    
    // Xử lý trường hợp đặc biệt - tìm danh mục
    for (const [category, keywords] of Object.entries(commonCategories)) {
      if (keywords.includes(productName) || productName.includes(category)) {
        console.log(`Đang tìm kiếm sản phẩm theo danh mục: ${category}`);
        
        // Tìm sản phẩm theo danh mục
        const categoryResults = await Product.find({
          $or: [
            { productCategory: { $regex: category, $options: 'i' } },
            { productName: { $regex: category, $options: 'i' } }
          ]
        })
        .sort({ soldCount: -1, averageRating: -1 }) // Ưu tiên sản phẩm bán chạy, đánh giá cao
        .limit(8);
        
        if (categoryResults.length > 0) {
          console.log(`Tìm thấy ${categoryResults.length} sản phẩm thuộc danh mục '${category}'`);
          return categoryResults;
        }
      }
    }
    
    // Xử lý trường hợp đặc biệt - muối
    if (productName === "muối" || productName.includes("muối")) {
      console.log("Đang tìm kiếm sản phẩm muối...");
      
      const muoiResults = await Product.find({
        $or: [
          { productCategory: { $regex: 'muối', $options: 'i' } },
          { productName: { $regex: 'muối', $options: 'i' } },
          { productInfo: { $regex: 'muối', $options: 'i' } },
          { productDetails: { $regex: 'muối', $options: 'i' } }
        ]
      })
      .sort({ productPrice: 1 }) // Sắp xếp theo giá tăng dần
      .limit(8);
      
      if (muoiResults.length > 0) {
        console.log(`Tìm thấy ${muoiResults.length} sản phẩm muối`);
        return muoiResults;
      }
    }
    
    // Xử lý trường hợp đặc biệt - đồ nhậu
    if (productName === "đồ nhậu" || productName === "mồi nhậu" || productName === "mồi đề nhậu" || productName === "mối nhậu") {
      console.log("Đang tìm kiếm đồ nhậu/mồi nhậu...");
      // Tìm các đồ nhậu phổ biến
      return await Product.find({
        $or: [
          // Danh mục ẩm thực
          { productCategory: { $regex: 'nhậu', $options: 'i' } },
          { productCategory: { $regex: 'bia', $options: 'i' } },
          { productCategory: { $regex: 'rượu', $options: 'i' } },
          { productCategory: { $regex: 'snack', $options: 'i' } },
          
          // Tên sản phẩm cụ thể liên quan đến đồ nhậu
          { productName: { $regex: '\\bbia\\b', $options: 'i' } },
          { productName: { $regex: '\\brượu\\b', $options: 'i' } },
          { productName: { $regex: '\\bkhô\\b', $options: 'i' } },
          { productName: { $regex: '\\bmực\\b', $options: 'i' } },
          { productName: { $regex: '\\bcá khô\\b', $options: 'i' } },
          { productName: { $regex: '\\bkhô gà\\b', $options: 'i' } },
          { productName: { $regex: '\\bkhô bò\\b', $options: 'i' } },
          { productName: { $regex: '\\bkhô mực\\b', $options: 'i' } },
          { productName: { $regex: '\\bsnack\\b', $options: 'i' } },
          { productName: { $regex: '\\bbim bim\\b', $options: 'i' } },
          { productName: { $regex: '\\bhạt\\b', $options: 'i' } },
          { productName: { $regex: '\\bnhân hạt\\b', $options: 'i' } },
          { productName: { $regex: '\\bhạt dẻ\\b', $options: 'i' } },
          { productName: { $regex: '\\bhạt điều\\b', $options: 'i' } },
          { productName: { $regex: '\\bbim\\b', $options: 'i' } },
          { productName: { $regex: '\\boishi\\b', $options: 'i' } },
          { productName: { $regex: '\\bdừa\\b', $options: 'i' } },
          { productName: { $regex: '\\bđậu phộng\\b', $options: 'i' } },
          { productName: { $regex: '\\blạp xưởng\\b', $options: 'i' } },
          { productName: { $regex: '\\bnem\\b', $options: 'i' } },
          { productName: { $regex: '\\bchả\\b', $options: 'i' } },
          
          // Đồ uống nhậu
          { productName: { $regex: '\\bpepsi\\b', $options: 'i' } },
          { productName: { $regex: '\\bcoca\\b', $options: 'i' } },
          { productName: { $regex: '\\bcoca.*cola\\b', $options: 'i' } },
          { productName: { $regex: '\\bsprite\\b', $options: 'i' } },
          { productName: { $regex: '\\bsting\\b', $options: 'i' } },
          { productName: { $regex: '\\bheniken\\b', $options: 'i' } },
          { productName: { $regex: '\\btiger\\b', $options: 'i' } },
          { productName: { $regex: '\\bbudweiser\\b', $options: 'i' } },
          { productName: { $regex: '\\bi bia\\b', $options: 'i' } },
          { productName: { $regex: '\\bia\\b', $options: 'i' } }
        ],
        // Loại trừ các sản phẩm không phải đồ nhậu
        productName: {
          $not: {
            $regex: 'giặt|tẩy|lau|rửa|vệ sinh|bột giặt|xà phòng|màn|rèm|đèn|gối|chăn|quần|áo',
            $options: 'i'
          }
        }
      }).limit(8);
    }
    
    // Xử lý trường hợp đặc biệt - nước uống
    if (productName === "nước uống" || productName === "nước" || productName === "đồ uống" || productName === "nước giải khát") {
      console.log("Đang tìm kiếm nước uống...");
      // Tìm các đồ uống phổ biến
      return await Product.find({
        $or: [
          // Tên sản phẩm chứa từ khóa liên quan đến nước uống
          { productName: { $regex: '\\bnước\\b', $options: 'i' } },
          { productName: { $regex: '\\bchai\\b', $options: 'i' } },
          { productName: { $regex: '\\blon\\b', $options: 'i' } },
          { productName: { $regex: '\\blốc\\b', $options: 'i' } },
          { productName: { $regex: '\\bpepsi\\b', $options: 'i' } },
          { productName: { $regex: '\\bcoca\\b', $options: 'i' } },
          { productName: { $regex: '\\bcola\\b', $options: 'i' } },
          { productName: { $regex: '\\btrà\\b', $options: 'i' } },
          { productName: { $regex: '\\btea\\b', $options: 'i' } },
          { productName: { $regex: '\\baquafina\\b', $options: 'i' } },
          { productName: { $regex: '\\blavie\\b', $options: 'i' } },
          { productName: { $regex: '\\bsting\\b', $options: 'i' } },
          { productName: { $regex: '\\btwister\\b', $options: 'i' } },
          { productName: { $regex: '\\bsprite\\b', $options: 'i' } },
          { productName: { $regex: '\\bmirinda\\b', $options: 'i' } },
          { productName: { $regex: '\\bcà phê\\b', $options: 'i' } },
          { productName: { $regex: '\\bcafe\\b', $options: 'i' } },
          { productName: { $regex: '\\bcaffee\\b', $options: 'i' } },
          { productName: { $regex: '\\bsữa\\b', $options: 'i' } },
          { productName: { $regex: '\\bnestlé\\b', $options: 'i' } },
          { productName: { $regex: '\\bvinamilk\\b', $options: 'i' } },
          { productName: { $regex: '\\bolongg\\b', $options: 'i' } },
          { productName: { $regex: '\\b7up\\b', $options: 'i' } },
          { productName: { $regex: '\\bnuoc\\b', $options: 'i' } },
          
          // Danh mục liên quan đến nước uống
          { productCategory: { $regex: 'đồ uống', $options: 'i' } },
          { productCategory: { $regex: 'nước', $options: 'i' } },
          { productCategory: { $regex: 'giải khát', $options: 'i' } },
          { productCategory: { $regex: 'thức uống', $options: 'i' } }
        ],
        // Loại trừ các sản phẩm không phải đồ uống
        productName: {
          $not: {
            $regex: 'giặt|tẩy|lau|rửa|vệ sinh|bột giặt|xà phòng|gội|dầu gội|sữa tắm|kem đánh răng',
            $options: 'i'
          }
        }
      }).limit(8);
    }
    
    // Tìm trực tiếp bằng tên
    const directResults = await Product.find({
      productName: { $regex: productName, $options: 'i' }
    }).limit(6);
    
    if (directResults.length > 0) {
      console.log(`Tìm thấy ${directResults.length} sản phẩm trực tiếp theo tên`);
      return directResults;
    }
    
    // Tìm bằng full-text search
    const textResults = await Product.find({
      $text: { $search: productName }
    }).limit(6);
    
    if (textResults.length > 0) {
      console.log(`Tìm thấy ${textResults.length} sản phẩm bằng full-text search`);
      return textResults;
    }
    
    // Tách từ khóa và tìm kiếm mở rộng
    const keywords = productName.split(/\s+/).filter(word => word.length > 2);
    
    if (keywords.length > 0) {
      const orConditions = keywords.map(keyword => ({
        $or: [
          { productName: { $regex: keyword, $options: 'i' } },
          { productInfo: { $regex: keyword, $options: 'i' } },
          { productCategory: { $regex: keyword, $options: 'i' } },
          { productBrand: { $regex: keyword, $options: 'i' } },
          { productDetails: { $regex: keyword, $options: 'i' } }
        ]
      }));
      
      const expandedResults = await Product.find({
        $or: orConditions
      }).limit(8);
      
      if (expandedResults.length > 0) {
        console.log(`Tìm thấy ${expandedResults.length} sản phẩm bằng tìm kiếm mở rộng`);
        return expandedResults;
      }
    }
    
    // Thử tìm theo thương hiệu
    const brandResults = await Product.find({
      productBrand: { $regex: productName, $options: 'i' }
    }).limit(8);
    
    if (brandResults.length > 0) {
      console.log(`Tìm thấy ${brandResults.length} sản phẩm theo thương hiệu`);
      return brandResults;
    }
    
    // Nếu không tìm thấy gì, trả về mảng rỗng
    console.log("Không tìm thấy sản phẩm phù hợp");
    return [];
  } catch (error) {
    console.error("Lỗi khi tìm kiếm sản phẩm:", error);
    return [];
  }
}

// Cập nhật hàm handleCustomMessage để xử lý phản hồi từ intent productUsage
const handleCustomMessage = async (message, userId, productId) => {
  try {
    const intent = detectIntent(message).name;
    console.log("Intent được phát hiện:", { name: intent });

    if (intent === "priceRangeProducts") {
      console.log("Xử lý intent priceRangeProducts với tin nhắn:", message);
      
      // Xác định khoảng giá từ tin nhắn
      const priceRange = extractPriceRange(message);
      console.log("Khoảng giá được trích xuất:", priceRange);

      let query = {};
      if (priceRange.minPrice !== null && priceRange.maxPrice !== null) {
        query = { 
          productPrice: { 
            $gte: priceRange.minPrice, 
            $lte: priceRange.maxPrice 
          } 
        };
      } else if (priceRange.maxPrice !== null) {
        query = { productPrice: { $lte: priceRange.maxPrice } };
        } else {
        // Mặc định tìm sản phẩm dưới 100k
        query = { productPrice: { $lte: 100000 } };
      }

      console.log("Query MongoDB:", JSON.stringify(query));

      try {
        const products = await Product.find(query)
          .select('productName productPrice productDiscount productImages')
          .limit(8);

        console.log(`Tìm thấy ${products.length} sản phẩm`);

        if (products && products.length > 0) {
          const priceRangeText = priceRange.minPrice !== null && priceRange.maxPrice !== null 
            ? `từ ${formatCurrency(priceRange.minPrice)} đến ${formatCurrency(priceRange.maxPrice)}`
            : priceRange.maxPrice !== null 
              ? `dưới ${formatCurrency(priceRange.maxPrice)}`
              : "dưới 100.000đ";

          const formattedProducts = products.map(product => ({
                name: product.productName,
                price: product.productPrice,
            promotionalPrice: product.productDiscount > 0 
              ? Math.round(product.productPrice * (1 - product.productDiscount/100)) 
              : null,
                discount: product.productDiscount > 0 ? product.productDiscount : null,
                image: product.productImages && product.productImages.length > 0 
                  ? product.productImages[0] 
                  : "default-product.jpg",
                slug: createSlug(product.productName)
          }));

          return {
            success: true,
            data: {
              type: 'priceRangeProducts',
              text: `Tôi đã tìm thấy ${products.length} sản phẩm ${priceRangeText}:`,
              products: formattedProducts
            },
            intent: "priceRangeProducts"
          };
        }

          return { 
            success: true, 
          message: `Không tìm thấy sản phẩm nào ${
            priceRange.minPrice !== null && priceRange.maxPrice !== null 
              ? `trong khoảng từ ${formatCurrency(priceRange.minPrice)} đến ${formatCurrency(priceRange.maxPrice)}`
              : priceRange.maxPrice !== null 
                ? `dưới ${formatCurrency(priceRange.maxPrice)}`
                : "dưới 100.000đ"
          }. Bạn có thể thử tìm với mức giá khác.`,
            intent: "priceRangeProducts"
          };

      } catch (error) {
        console.error("Lỗi khi tìm sản phẩm theo giá:", error);
        return { 
          success: true, 
          message: "Xin lỗi, đã có lỗi xảy ra khi tìm kiếm sản phẩm theo giá. Vui lòng thử lại sau.",
          intent: "priceRangeProducts"
        };
      }
    }

    // ... rest of the code ...
  } catch (error) {
    console.error("Lỗi xử lý tin nhắn:", error);
          return {
      success: false,
      message: "Xin lỗi, đã có lỗi xảy ra. Vui lòng thử lại sau.",
      intent: "error"
    };
  }
};

// Thêm hàm xử lý khoảng giá chi tiết
function extractPriceRange(message) {
  const lowerCaseMsg = message.toLowerCase().trim();
  let minPrice = null;
  let maxPrice = null;

  console.log("Phân tích khoảng giá từ:", lowerCaseMsg);

  // Xử lý các từ khóa chỉ ra dưới một mức giá
  if (lowerCaseMsg.includes("dưới") || 
      lowerCaseMsg.includes("ít hơn") ||
      lowerCaseMsg.includes("không quá") ||
      lowerCaseMsg.includes("thấp hơn") ||
      lowerCaseMsg.includes("rẻ hơn")) {
    
    // Mẫu regex bắt nhiều dạng "dưới X"
    const priceMatch = lowerCaseMsg.match(/dưới\s+(\d+)(?:k|nghìn|\.000|000)?/i) || 
                      lowerCaseMsg.match(/ít hơn\s+(\d+)(?:k|nghìn|\.000|000)?/i) ||
                      lowerCaseMsg.match(/không quá\s+(\d+)(?:k|nghìn|\.000|000)?/i) ||
                      lowerCaseMsg.match(/thấp hơn\s+(\d+)(?:k|nghìn|\.000|000)?/i) ||
                      lowerCaseMsg.match(/rẻ hơn\s+(\d+)(?:k|nghìn|\.000|000)?/i);

    if (priceMatch) {
      // Nếu có chữ "k" hoặc "nghìn" thì nhân với 1000, nếu không thì giữ nguyên
      let multiplier = 1;
      if (priceMatch[0].includes("k") || priceMatch[0].includes("nghìn") || priceMatch[0].includes("000")) {
        multiplier = 1000;
      }
      
      maxPrice = parseInt(priceMatch[1]) * multiplier;
      
      // Nếu giá trị quá nhỏ (< 1000) và không có "k"/"nghìn", có thể người dùng đã bỏ qua đơn vị nghìn
      if (maxPrice < 1000 && !priceMatch[0].includes("k") && !priceMatch[0].includes("nghìn")) {
        maxPrice *= 1000;
      }
      
      console.log(`Trích xuất khoảng giá dưới: maxPrice=${maxPrice}`);
    } else {
      // Mặc định dưới 100k nếu không xác định được giá cụ thể
      maxPrice = 100000;
      console.log("Không tìm thấy giá trị cụ thể, sử dụng mặc định maxPrice=100000");
    }
  }
  // Xử lý "từ X đến Y"
  else if (lowerCaseMsg.includes("từ") && lowerCaseMsg.includes("đến")) {
    const priceMatches = lowerCaseMsg.match(/từ\s+(\d+)(?:k|nghìn|\.000|000)?\s+đến\s+(\d+)(?:k|nghìn|\.000|000)?/i);
    if (priceMatches) {
      minPrice = parseInt(priceMatches[1]);
      maxPrice = parseInt(priceMatches[2]);
      
      // Xử lý trường hợp người dùng nhập 100 thay vì 100000
      if (minPrice < 1000) minPrice *= 1000;
      if (maxPrice < 1000) maxPrice *= 1000;
      
      console.log(`Trích xuất khoảng giá từ-đến: minPrice=${minPrice}, maxPrice=${maxPrice}`);
    }
  }
  // Xử lý "khoảng X"
  else if (lowerCaseMsg.includes("khoảng")) {
    const priceMatch = lowerCaseMsg.match(/khoảng\s+(\d+)(?:k|nghìn|\.000|000)?/i);
    if (priceMatch) {
      const price = parseInt(priceMatch[1]);
      const multiplier = priceMatch[0].includes("k") || priceMatch[0].includes("nghìn") || priceMatch[0].includes("000") ? 1000 : 1;
      const basePrice = price * multiplier;
      
      // Nếu giá trị quá nhỏ và không có "k"/"nghìn", có thể người dùng đã bỏ qua đơn vị nghìn
      const finalPrice = (basePrice < 1000 && multiplier === 1) ? basePrice * 1000 : basePrice;
      
      minPrice = finalPrice * 0.8; // 20% thấp hơn
      maxPrice = finalPrice * 1.2; // 20% cao hơn
      
      console.log(`Trích xuất khoảng giá xấp xỉ: minPrice=${minPrice}, maxPrice=${maxPrice}`);
    }
  }
  // Trích xuất giá từ số trực tiếp trong tin nhắn
  else {
    // Tìm tất cả các số trong tin nhắn
    const numbers = lowerCaseMsg.match(/(\d+)(?:k|nghìn|\.000|000)?/gi);
    if (numbers && numbers.length > 0) {
      // Lấy số đầu tiên
      let price = numbers[0];
      let value = parseInt(price.replace(/[^0-9]/g, ''));
      
      // Xử lý trường hợp có đơn vị k/nghìn
      if (price.includes('k') || price.includes('nghìn') || price.includes('000')) {
        value *= 1000;
      } else if (value < 1000) {
        // Nếu giá trị nhỏ và không có đơn vị, giả định là nghìn
        value *= 1000;
      }
      
      maxPrice = value;
      console.log(`Trích xuất giá từ số trực tiếp: maxPrice=${maxPrice}`);
    } else {
      // Mặc định dưới 100k
      maxPrice = 100000;
      console.log("Không tìm thấy giá trị, sử dụng mặc định maxPrice=100000");
    }
  }

  // Đảm bảo giá trị hợp lý
  if (minPrice !== null && maxPrice !== null && minPrice > maxPrice) {
    // Đổi chỗ nếu minPrice > maxPrice
    [minPrice, maxPrice] = [maxPrice, minPrice];
    console.log(`Đảo ngược khoảng giá vì minPrice > maxPrice: minPrice=${minPrice}, maxPrice=${maxPrice}`);
  }

  console.log(`Kết quả phân tích cuối cùng: minPrice=${minPrice}, maxPrice=${maxPrice}`);
  return { minPrice, maxPrice };
}
