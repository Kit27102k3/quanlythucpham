// src/utils/MapUtils.js
import axios from "axios";

// Get Mapbox API key from environment variable
const MAPBOX_API_KEY =
  "pk.eyJ1Ijoia2l0MjcxMCIsImEiOiJjbWF4bWh5YWQwc2N0MmtxM2p1M2Z5azZkIn0.navJSR4rbpRHVV3TEXelQg";

// Export Mapbox access token for use in other components
export const MAPBOX_ACCESS_TOKEN = MAPBOX_API_KEY;

// ƒê·ªãnh nghƒ©a c√°c th√†nh ph·ªë l·ªõn ·ªü Vi·ªát Nam v√† t·ªça ƒë·ªô c·ªßa ch√∫ng
export const VIETNAM_MAJOR_CITIES = [
  { name: "H√† N·ªôi", lat: 21.0285, lng: 105.8542, region: "B·∫Øc" },
  { name: "TP H·ªì Ch√≠ Minh", lat: 10.7758, lng: 106.7021, region: "Nam" },
  { name: "ƒê√† N·∫µng", lat: 16.0545, lng: 108.2022, region: "Trung" },
  { name: "H·∫£i Ph√≤ng", lat: 20.8449, lng: 106.6881, region: "B·∫Øc" },
  { name: "C·∫ßn Th∆°", lat: 10.0339, lng: 105.7855, region: "Nam" },
  { name: "Nha Trang", lat: 12.2431, lng: 109.1919, region: "Trung" },
  { name: "Hu·∫ø", lat: 16.4637, lng: 107.5909, region: "Trung" },
  { name: "Vinh", lat: 18.6734, lng: 105.6820, region: "Trung" },
  { name: "Bu√¥n Ma Thu·ªôt", lat: 12.6886, lng: 108.0835, region: "T√¢y Nguy√™n" },
  { name: "Qu·∫£ng Ninh", lat: 21.0063, lng: 107.2951, region: "B·∫Øc" },
  { name: "Quy Nh∆°n", lat: 13.7695, lng: 109.2235, region: "Trung" },
  { name: "Long Xuy√™n", lat: 10.3866, lng: 105.4352, region: "Nam" },
  { name: "Th√°i Nguy√™n", lat: 21.5621, lng: 105.8251, region: "B·∫Øc" },
  { name: "V≈©ng T√†u", lat: 10.3460, lng: 107.0843, region: "Nam" },
  { name: "Thanh H√≥a", lat: 19.8066, lng: 105.7855, region: "B·∫Øc" },
  { name: "R·∫°ch Gi√°", lat: 10.0222, lng: 105.0914, region: "Nam" },
  { name: "H·∫° Long", lat: 20.9587, lng: 107.0929, region: "B·∫Øc" },
  { name: "Phan Thi·∫øt", lat: 10.9804, lng: 108.2622, region: "Nam" },
  { name: "Bi√™n H√≤a", lat: 10.9455, lng: 106.8245, region: "Nam" },
  { name: "M·ªπ Tho", lat: 10.3601, lng: 106.2809, region: "Nam" },
  { name: "Nam ƒê·ªãnh", lat: 20.4196, lng: 106.1684, region: "B·∫Øc" },
  { name: "Pleiku", lat: 13.9879, lng: 108.0134, region: "T√¢y Nguy√™n" },
  { name: "C√† Mau", lat: 9.1769, lng: 105.1526, region: "Nam" },
  { name: "B·∫Øc Giang", lat: 21.2731, lng: 106.1947, region: "B·∫Øc" },
  { name: "Vinh Long", lat: 10.2537, lng: 105.9722, region: "Nam" },
  { name: "S√≥c TrƒÉng", lat: 9.6037, lng: 105.9747, region: "Nam" }
];

// ƒê·ªãnh nghƒ©a c√°c chi nh√°nh c·ª≠a h√†ng
export const SHOP_BRANCHES = [
  {
    id: "cantho",
    name: "Chi nh√°nh C·∫ßn Th∆°",
    lat: 10.0339,
    lng: 105.7855,
    address: "123 Nguy·ªÖn VƒÉn C·ª´, Ninh Ki·ªÅu, C·∫ßn Th∆°",
    isMainBranch: true
  },
  {
    id: "soctrang",
    name: "Chi nh√°nh S√≥c TrƒÉng",
    lat: 9.6037,
    lng: 105.9747,
    address: "456 L√™ H·ªìng Phong, TP. S√≥c TrƒÉng, S√≥c TrƒÉng",
    isMainBranch: false
  }
];

// L·∫•y v·ªã tr√≠ c·ª≠a h√†ng m·∫∑c ƒë·ªãnh (chi nh√°nh ch√≠nh)
export const SHOP_LOCATION = SHOP_BRANCHES.find(branch => branch.isMainBranch) || SHOP_BRANCHES[0];

// L·∫•y chi nh√°nh g·∫ßn nh·∫•t v·ªõi m·ªôt ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ
export const getNearestBranch = (lat, lng) => {
  if (!lat || !lng) return SHOP_LOCATION;
  
  let nearestBranch = SHOP_BRANCHES[0];
  let shortestDistance = calculateDistance(lat, lng, nearestBranch.lat, nearestBranch.lng);
  
  for (let i = 1; i < SHOP_BRANCHES.length; i++) {
    const branch = SHOP_BRANCHES[i];
    const distance = calculateDistance(lat, lng, branch.lat, branch.lng);
    
    if (distance < shortestDistance) {
      shortestDistance = distance;
      nearestBranch = branch;
    }
  }
  
  return nearestBranch;
};

// üß† R√∫t g·ªçn ƒë·ªãa ch·ªâ Vi·ªát Nam
function simplifyVietnameseAddress(address) {
  if (!address) return "";

  const blacklist = [
    "nh√† tr·ªç",
    "h·∫ªm",
    "t·ªï",
    "s·ªë",
    "ng√µ",
    "ng√°ch",
    "khu",
    "block",
    "t√≤a",
    "l·∫ßu",
    "ph√≤ng",
    "apartment",
    "ki·ªát",
    "·∫•p",
    "x√≥m",
    "d√£y",
    "b√£i",
    "b·∫øn",
    "chung c∆∞",
    "building",
    "villa",
    "residence",
    "zone",
    "group",
    "cluster",
    "lot",
    "section",
    "unit",
    "floor",
    "room",
    "suite",
    "tower",
    "area",
    "sector",
    "lane",
    "alley",
  ];

  let parts = address
    .split(",")
    .map((s) => s.trim())
    .filter(Boolean);

  // Keep only the most important parts (ward, district, province)
  parts = parts.filter(
    (part) => !blacklist.some((word) => part.toLowerCase().includes(word))
  );

  // Take last 4 parts which are typically the most important for geocoding
  const simplifiedParts = parts.slice(-4);

  // If we have a province name, make sure it's included
  const provinces = [
    "H√† N·ªôi",
    "TP HCM",
    "H·ªì Ch√≠ Minh",
    "ƒê√† N·∫µng",
    "H·∫£i Ph√≤ng",
    "C·∫ßn Th∆°",
    "An Giang",
    "B√† R·ªãa - V≈©ng T√†u",
    "B·∫Øc Giang",
    "B·∫Øc K·∫°n",
    "B·∫°c Li√™u",
    "B·∫Øc Ninh",
    "B·∫øn Tre",
    "B√¨nh ƒê·ªãnh",
    "B√¨nh D∆∞∆°ng",
    "B√¨nh Ph∆∞·ªõc",
    "B√¨nh Thu·∫≠n",
    "C√† Mau",
    "Cao B·∫±ng",
    "ƒê·∫Øk L·∫Øk",
    "ƒê·∫Øk N√¥ng",
    "ƒêi·ªán Bi√™n",
    "ƒê·ªìng Nai",
    "ƒê·ªìng Th√°p",
    "Gia Lai",
    "H√† Giang",
    "H√† Nam",
    "H√† Tƒ©nh",
    "H·∫£i D∆∞∆°ng",
    "H·∫≠u Giang",
    "H√≤a B√¨nh",
    "H∆∞ng Y√™n",
    "Kh√°nh H√≤a",
    "Ki√™n Giang",
    "Kon Tum",
    "Lai Ch√¢u",
    "L√¢m ƒê·ªìng",
    "L·∫°ng S∆°n",
    "L√†o Cai",
    "Long An",
    "Nam ƒê·ªãnh",
    "Ngh·ªá An",
    "Ninh B√¨nh",
    "Ninh Thu·∫≠n",
    "Ph√∫ Th·ªç",
    "Ph√∫ Y√™n",
    "Qu·∫£ng B√¨nh",
    "Qu·∫£ng Nam",
    "Qu·∫£ng Ng√£i",
    "Qu·∫£ng Ninh",
    "Qu·∫£ng Tr·ªã",
    "S√≥c TrƒÉng",
    "S∆°n La",
    "T√¢y Ninh",
    "Th√°i B√¨nh",
    "Th√°i Nguy√™n",
    "Thanh H√≥a",
    "Th·ª´a Thi√™n Hu·∫ø",
    "Ti·ªÅn Giang",
    "Tr√† Vinh",
    "Tuy√™n Quang",
    "Vƒ©nh Long",
    "Vƒ©nh Ph√∫c",
    "Y√™n B√°i",
  ];

  // Check if any province is in the address
  const hasProvince = provinces.some((province) =>
    address.toLowerCase().includes(province.toLowerCase())
  );

  // If no province found, add "Vi·ªát Nam" to help with geocoding
  if (!hasProvince && !address.toLowerCase().includes("vi·ªát nam")) {
    simplifiedParts.push("Vi·ªát Nam");
  }

  return simplifiedParts.join(", ");
}

// üó∫Ô∏è Geocoding v·ªõi Mapbox
export async function geocodeWithMapbox(address) {
  if (!MAPBOX_API_KEY) {
    console.error("Cannot use Mapbox geocoding: API key is missing");
    return null;
  }

  try {
    const simplified = simplifyVietnameseAddress(address);
    const encoded = encodeURIComponent(simplified);
    const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encoded}.json`;

    const response = await axios.get(url, {
      params: {
        access_token: MAPBOX_API_KEY,
        country: "vn",
        limit: 1,
        language: "vi",
        types: "address,place,locality,district,region",
      },
    });

    const feature = response.data?.features?.[0];
    if (!feature) {
      console.warn("Mapbox kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ.");
      return null;
    }

    const [lng, lat] = feature.center;

    // Validate that coordinates are within Vietnam's bounds
    if (lat < 8.18 || lat > 23.39 || lng < 102.14 || lng > 109.46) {
      console.warn("Mapbox coordinates outside Vietnam bounds:", lat, lng);
      return null;
    }

    return {
      lat,
      lng,
      fullAddress: feature.place_name,
      source: "mapbox",
    };
  } catch (err) {
    if (err.response?.status === 401) {
      console.error(
        "Mapbox API key is invalid or expired. Please check your VITE_MAPBOX_API_KEY"
      );
    } else {
      console.error("L·ªói Mapbox:", err?.response?.data || err.message);
    }
    return null;
  }
}

// üó∫Ô∏è Geocoding v·ªõi OpenStreetMap
export async function geocodeWithOSM(address) {
  try {
    // Simplify the address first
    const simplified = simplifyVietnameseAddress(address);

    // Add Vietnam to the address if not present
    const addressWithCountry = simplified.includes("Vi·ªát Nam")
      ? simplified
      : `${simplified}, Vi·ªát Nam`;

    const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(
      addressWithCountry
    )}&format=json&addressdetails=1&limit=1&countrycodes=vn`;

    const response = await fetch(url, {
      headers: {
        "User-Agent": "kit10012003@gmail.com",
        "Accept-Language": "vi,en",
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    if (data?.[0]) {
      const result = {
        lat: parseFloat(data[0].lat),
        lng: parseFloat(data[0].lon),
        fullAddress: data[0].display_name,
        source: "osm",
      };

      // Validate coordinates
      if (isNaN(result.lat) || isNaN(result.lng)) {
        console.warn("OSM returned invalid coordinates");
        return null;
      }

      // Validate that coordinates are within Vietnam's bounds
      if (
        result.lat < 8.18 ||
        result.lat > 23.39 ||
        result.lng < 102.14 ||
        result.lng > 109.46
      ) {
        console.warn(
          "OSM coordinates outside Vietnam bounds:",
          result.lat,
          result.lng
        );
        return null;
      }

      return result;
    }

    console.warn("OSM kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ.");
    return null;
  } catch (err) {
    console.error("L·ªói OSM:", err.message);
    return null;
  }
}

// Th·ª≠ geocoding v·ªõi Mapbox, n·∫øu kh√¥ng ƒë∆∞·ª£c th√¨ d√πng OpenStreetMap
export async function geocodeAddress(inputAddress) {
  // Th·ª≠ v·ªõi Mapbox tr∆∞·ªõc
  let result = await geocodeWithMapbox(inputAddress);
  
  // N·∫øu Mapbox kh√¥ng tr·∫£ k·∫øt qu·∫£, th·ª≠ v·ªõi OpenStreetMap
  if (!result) {
    result = await geocodeWithOSM(inputAddress);
  }
  
  // N·∫øu c·∫£ hai ƒë·ªÅu th·∫•t b·∫°i, th·ª≠ v·ªõi ƒë·ªãa ch·ªâ ƒë∆°n gi·∫£n h√≥a
  if (!result) {
    const simplifiedAddress = inputAddress
      .split(",")
      .slice(-3)
      .join(",")
      .trim();
      
    if (simplifiedAddress && simplifiedAddress !== inputAddress) {
      result = await geocodeWithMapbox(simplifiedAddress);
      
      if (!result) {
        result = await geocodeWithOSM(simplifiedAddress);
      }
    }
  }
  
  return result;
}

// H√†m geocoding c√≥ debounce ƒë·ªÉ tr√°nh g·ªçi qu√° nhi·ªÅu API
export const geocodeAddressDebounced = (() => {
  let timeout = null;

  return (address, callback, delay = 500) => {
    if (timeout) clearTimeout(timeout);

    timeout = setTimeout(async () => {
      try {
        const result = await geocodeAddress(address);
        if (callback && typeof callback === 'function') {
          callback(result);
        }
        return result;
      } catch (error) {
        console.error('L·ªói khi geocoding ƒë·ªãa ch·ªâ:', error);
        if (callback && typeof callback === 'function') {
          callback(null);
        }
        return null;
      }
    }, delay);
  };
})();

// T√≠nh kho·∫£ng c√°ch gi·ªØa hai ƒëi·ªÉm ƒë·ªãa l√Ω s·ª≠ d·ª•ng c√¥ng th·ª©c haversine
export const calculateDistance = (lat1, lng1, lat2, lng2) => {
  const R = 6371; // B√°n k√≠nh tr√°i ƒë·∫•t t√≠nh b·∫±ng kil√¥m√©t
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lng2 - lng1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
            Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const d = R * c; // Kho·∫£ng c√°ch t√≠nh b·∫±ng km
  return d;
};

/**
 * T·∫°o l·ªô tr√¨nh qua c√°c kho trung chuy·ªÉn d·ª±a v√†o v·ªã tr√≠ c·ª≠a h√†ng v√† kh√°ch h√†ng
 * @param {Object} shopLocation - V·ªã tr√≠ c·ª≠a h√†ng {lat, lng, address}
 * @param {Object} customerLocation - V·ªã tr√≠ kh√°ch h√†ng {lat, lng, address}
 * @returns {Array} - Danh s√°ch c√°c kho trung chuy·ªÉn v·ªõi th·ªùi gian
 */
export const generateWarehouseRoute = (shopLocation, customerLocation) => {
  if (!customerLocation) {
    console.error("Thi·∫øu th√¥ng tin v·ªã tr√≠ kh√°ch h√†ng");
    return [];
  }
  
  // N·∫øu kh√¥ng c√≥ shopLocation ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, ch·ªçn chi nh√°nh g·∫ßn nh·∫•t v·ªõi kh√°ch h√†ng
  const sourceBranch = shopLocation || getNearestBranch(customerLocation.lat, customerLocation.lng);
  
  // T√≠nh kho·∫£ng c√°ch gi·ªØa c·ª≠a h√†ng v√† kh√°ch h√†ng
  const distance = calculateDistance(
    sourceBranch.lat, sourceBranch.lng,
    customerLocation.lat, customerLocation.lng
  );
  
  // S·ªë l∆∞·ª£ng kho trung chuy·ªÉn ph·ª• thu·ªôc v√†o kho·∫£ng c√°ch
  let numWarehouses;
  if (distance < 50) {
    numWarehouses = 1; // D∆∞·ªõi 50km, ch·ªâ c·∫ßn 1 kho
  } else if (distance < 200) {
    numWarehouses = 2; // 50-200km, c·∫ßn 2 kho
  } else if (distance < 500) {
    numWarehouses = 3; // 200-500km, c·∫ßn 3 kho
  } else {
    numWarehouses = 4; // Tr√™n 500km, c·∫ßn 4 kho
  }
  
  // T√¨m c√°c th√†nh ph·ªë n·∫±m tr√™n ƒë∆∞·ªùng ƒëi
  const citiesOnRoute = findCitiesOnRoute(sourceBranch, customerLocation, numWarehouses);
  
  // T·∫°o th·ªùi gian b·∫Øt ƒë·∫ßu (2 gi·ªù tr∆∞·ªõc)
  const now = new Date();
  const startTime = new Date(now);
  startTime.setHours(startTime.getHours() - 2);
  
  // T·∫°o danh s√°ch c√°c kho v·ªõi th·ªùi gian
  const warehouses = citiesOnRoute.map((city, index) => {
    const warehouseAddress = `Kho trung chuy·ªÉn ${city.name}, ${city.name}`;
    
    // T√≠nh to√°n th·ªùi gian ƒë·∫øn v√† ƒëi
    // M·ªói ch·∫∑ng m·∫•t kho·∫£ng 2-4 gi·ªù t√πy thu·ªôc v√†o kho·∫£ng c√°ch
    const hoursBetweenWarehouses = Math.ceil(distance / (numWarehouses + 1) / 30) + 1; // 30km/h trung b√¨nh
    
    // Th·ªùi gian ·ªü l·∫°i kho l√† 1-2 gi·ªù
    const hoursAtWarehouse = Math.floor(Math.random() * 2) + 1;
    
    // T√≠nh th·ªùi gian ƒë·∫øn
    const arrivalTime = new Date(startTime);
    arrivalTime.setHours(arrivalTime.getHours() + (index + 1) * hoursBetweenWarehouses);
    
    // T√≠nh th·ªùi gian ƒëi
    const departureTime = new Date(arrivalTime);
    departureTime.setHours(departureTime.getHours() + hoursAtWarehouse);
    
    return {
      name: `Kho ${city.name}`,
      address: warehouseAddress,
      lat: city.lat,
      lng: city.lng,
      arrivalTime: arrivalTime.toISOString(),
      departureTime: departureTime.toISOString()
    };
  });
  
  return warehouses;
};

/**
 * T√¨m c√°c th√†nh ph·ªë n·∫±m tr√™n ƒë∆∞·ªùng ƒëi t·ª´ c·ª≠a h√†ng ƒë·∫øn kh√°ch h√†ng
 * @param {Object} origin - V·ªã tr√≠ c·ª≠a h√†ng
 * @param {Object} destination - V·ªã tr√≠ kh√°ch h√†ng
 * @param {Number} numWarehouses - S·ªë l∆∞·ª£ng kho c·∫ßn t√¨m
 * @returns {Array} - Danh s√°ch c√°c th√†nh ph·ªë l√†m kho trung chuy·ªÉn
 */
export const findCitiesOnRoute = (origin, destination, numWarehouses) => {
  // T√¨m c√°c th√†nh ph·ªë ph√π h·ª£p cho vi·ªác v·∫≠n chuy·ªÉn trong khu v·ª±c
  const cities = [...VIETNAM_MAJOR_CITIES];
  
  // ∆Øu ti√™n c√°c th√†nh ph·ªë trong khu v·ª±c Nam B·ªô (v√¨ chi nh√°nh ·ªü C·∫ßn Th∆° v√† S√≥c TrƒÉng)
  const mekongDeltaCities = cities.filter(city => 
    city.region === "Nam" || 
    ["C·∫ßn Th∆°", "S√≥c TrƒÉng", "Vƒ©nh Long", "C√† Mau", "B·∫°c Li√™u", "Ki√™n Giang", "An Giang"].includes(city.name)
  );
  
  // T√≠nh to√°n kho·∫£ng c√°ch t·ª´ m·ªói th√†nh ph·ªë ƒë·∫øn ƒë∆∞·ªùng th·∫≥ng
  const citiesWithDistance = mekongDeltaCities.map(city => {
    const distance = distanceFromPointToLine(
      city.lat, city.lng,
      origin.lat, origin.lng,
      destination.lat, destination.lng
    );
    
    // T√≠nh kho·∫£ng c√°ch t·ª´ th√†nh ph·ªë ƒë·∫øn ƒëi·ªÉm xu·∫•t ph√°t
    const distanceFromOrigin = calculateDistance(
      origin.lat, origin.lng,
      city.lat, city.lng
    );
    
    // T√≠nh kho·∫£ng c√°ch t·ª´ th√†nh ph·ªë ƒë·∫øn ƒëi·ªÉm ƒë√≠ch
    const distanceFromDestination = calculateDistance(
      destination.lat, destination.lng,
      city.lat, city.lng
    );
    
    // T√≠nh t·ªïng kho·∫£ng c√°ch ƒëi qua th√†nh ph·ªë
    const totalRouteDistance = distanceFromOrigin + distanceFromDestination;
    
    // Kho·∫£ng c√°ch ƒëi tr·ª±c ti·∫øp t·ª´ xu·∫•t ph√°t ƒë·∫øn ƒë√≠ch
    const directDistance = calculateDistance(
      origin.lat, origin.lng,
      destination.lat, destination.lng
    );
    
    // ƒê√°nh gi√° ƒë·ªô ph√π h·ª£p l√†m ƒëi·ªÉm trung chuy·ªÉn d·ª±a tr√™n v·ªã tr√≠
    const detourFactor = totalRouteDistance / (directDistance || 1);
    
    return {
      ...city,
      distanceFromLine: distance,
      distanceFromOrigin,
      distanceFromDestination,
      detourFactor
    };
  });
  
  // L·ªçc b·ªè th√†nh ph·ªë tr√πng v·ªõi ƒëi·ªÉm ƒë·∫ßu v√† ƒëi·ªÉm cu·ªëi v√† ch·ªâ ch·ªçn c√°c th√†nh ph·ªë h·ª£p l√Ω 
  const filteredCities = citiesWithDistance.filter(city => {
    const isOrigin = calculateDistance(city.lat, city.lng, origin.lat, origin.lng) < 10;
    const isDestination = calculateDistance(city.lat, city.lng, destination.lat, destination.lng) < 10;
    
    // Kh√¥ng l√†m tƒÉng qu√£ng ƒë∆∞·ªùng qu√° 40% so v·ªõi ƒë∆∞·ªùng th·∫≥ng
    return !isOrigin && !isDestination && city.detourFactor < 1.4;
  });
  
  // S·∫Øp x·∫øp theo kho·∫£ng c√°ch t·ª´ ƒëi·ªÉm xu·∫•t ph√°t v√† ƒë·ªô ph√π h·ª£p
  const sortedCities = filteredCities.sort((a, b) => {
    // N·∫øu kho·∫£ng c√°ch t·ª´ ngu·ªìn t∆∞∆°ng ƒë∆∞∆°ng, ∆∞u ti√™n th√†nh ph·ªë g·∫ßn ƒë∆∞·ªùng th·∫≥ng h∆°n
    if (Math.abs(a.distanceFromOrigin - b.distanceFromOrigin) < 20) {
      return a.distanceFromLine - b.distanceFromLine;
    }
    return a.distanceFromOrigin - b.distanceFromOrigin;
  });
  
  // Ch·ªçn s·ªë l∆∞·ª£ng th√†nh ph·ªë c·∫ßn thi·∫øt
  const selectedCities = sortedCities.slice(0, numWarehouses);
  
  // N·∫øu kh√¥ng ƒë·ªß th√†nh ph·ªë, t·∫°o c√°c ƒëi·ªÉm trung gian
  if (selectedCities.length < numWarehouses) {
    const missingCount = numWarehouses - selectedCities.length;
    
    for (let i = 0; i < missingCount; i++) {
      // T√≠nh to√°n v·ªã tr√≠ trung gian d·ª±a tr√™n t·ª∑ l·ªá
      const ratio = (i + 1) / (missingCount + 1);
      const lat = origin.lat + (destination.lat - origin.lat) * ratio;
      const lng = origin.lng + (destination.lng - origin.lng) * ratio;
      
      // T√¨m t·ªânh/th√†nh ph·ªë g·∫ßn nh·∫•t trong mi·ªÅn Nam
      const nearestCity = mekongDeltaCities.reduce((nearest, city) => {
        const distance = calculateDistance(lat, lng, city.lat, city.lng);
        if (!nearest || distance < nearest.distance) {
          return { ...city, distance };
        }
        return nearest;
      }, null);
      
      // Th√™m kho ·∫£o g·∫ßn th√†nh ph·ªë n√†y
      if (nearestCity) {
        selectedCities.push({
          name: `${nearestCity.name}`,
          lat: lat,
          lng: lng,
          region: nearestCity.region
        });
      }
    }
    
    // S·∫Øp x·∫øp l·∫°i theo kho·∫£ng c√°ch
    selectedCities.sort((a, b) => {
      const distA = calculateDistance(origin.lat, origin.lng, a.lat, a.lng);
      const distB = calculateDistance(origin.lat, origin.lng, b.lat, b.lng);
      return distA - distB;
    });
  }
  
  return selectedCities;
};

/**
 * T√≠nh kho·∫£ng c√°ch t·ª´ m·ªôt ƒëi·ªÉm ƒë·∫øn m·ªôt ƒë∆∞·ªùng th·∫≥ng
 * @param {Number} pLat - Vƒ© ƒë·ªô c·ªßa ƒëi·ªÉm
 * @param {Number} pLng - Kinh ƒë·ªô c·ªßa ƒëi·ªÉm
 * @param {Number} lineLat1 - Vƒ© ƒë·ªô ƒëi·ªÉm ƒë·∫ßu ƒë∆∞·ªùng th·∫≥ng
 * @param {Number} lineLng1 - Kinh ƒë·ªô ƒëi·ªÉm ƒë·∫ßu ƒë∆∞·ªùng th·∫≥ng
 * @param {Number} lineLat2 - Vƒ© ƒë·ªô ƒëi·ªÉm cu·ªëi ƒë∆∞·ªùng th·∫≥ng
 * @param {Number} lineLng2 - Kinh ƒë·ªô ƒëi·ªÉm cu·ªëi ƒë∆∞·ªùng th·∫≥ng
 * @returns {Number} - Kho·∫£ng c√°ch (km) t·ª´ ƒëi·ªÉm ƒë·∫øn ƒë∆∞·ªùng th·∫≥ng
 */
export const distanceFromPointToLine = (pLat, pLng, lineLat1, lineLng1, lineLat2, lineLng2) => {
  // Chuy·ªÉn ƒë·ªïi sang t·ªça ƒë·ªô Cartesian ƒë∆°n gi·∫£n (ƒë·ªß ch√≠nh x√°c cho kho·∫£ng c√°ch ng·∫Øn)
  // Chuy·ªÉn ƒë·ªïi ƒë·ªô sang radian
  const pLatRad = pLat * Math.PI / 180;
  const pLngRad = pLng * Math.PI / 180;
  const lat1Rad = lineLat1 * Math.PI / 180;
  const lng1Rad = lineLng1 * Math.PI / 180;
  const lat2Rad = lineLat2 * Math.PI / 180;
  const lng2Rad = lineLng2 * Math.PI / 180;
  
  // B√°n k√≠nh tr√°i ƒë·∫•t (km)
  const R = 6371;
  
  // Chuy·ªÉn sang t·ªça ƒë·ªô Cartesian
  const x = R * Math.cos(pLatRad) * Math.cos(pLngRad);
  const y = R * Math.cos(pLatRad) * Math.sin(pLngRad);
  const z = R * Math.sin(pLatRad);
  
  const x1 = R * Math.cos(lat1Rad) * Math.cos(lng1Rad);
  const y1 = R * Math.cos(lat1Rad) * Math.sin(lng1Rad);
  const z1 = R * Math.sin(lat1Rad);
  
  const x2 = R * Math.cos(lat2Rad) * Math.cos(lng2Rad);
  const y2 = R * Math.cos(lat2Rad) * Math.sin(lng2Rad);
  const z2 = R * Math.sin(lat2Rad);
  
  // Vector t·ª´ ƒëi·ªÉm 1 ƒë·∫øn ƒëi·ªÉm 2
  const dx = x2 - x1;
  const dy = y2 - y1;
  const dz = z2 - z1;
  
  // ƒê·ªô d√†i vector
  const length = Math.sqrt(dx*dx + dy*dy + dz*dz);
  
  // Vector ƒë∆°n v·ªã
  const ux = dx / length;
  const uy = dy / length;
  const uz = dz / length;
  
  // Vector t·ª´ ƒëi·ªÉm 1 ƒë·∫øn ƒëi·ªÉm P
  const px = x - x1;
  const py = y - y1;
  const pz = z - z1;
  
  // T√≠ch v√¥ h∆∞·ªõng ƒë·ªÉ t√¨m ƒëi·ªÉm chi·∫øu
  const dot = px*ux + py*uy + pz*uz;
  
  // Ki·ªÉm tra xem ƒëi·ªÉm chi·∫øu c√≥ n·∫±m tr√™n ƒëo·∫°n th·∫≥ng kh√¥ng
  if (dot < 0) {
    // ƒêi·ªÉm g·∫ßn ƒëi·ªÉm 1 h∆°n
    return calculateDistance(pLat, pLng, lineLat1, lineLng1);
  } else if (dot > length) {
    // ƒêi·ªÉm g·∫ßn ƒëi·ªÉm 2 h∆°n
    return calculateDistance(pLat, pLng, lineLat2, lineLng2);
  } else {
    // ƒêi·ªÉm chi·∫øu n·∫±m tr√™n ƒëo·∫°n th·∫≥ng
    const projX = x1 + ux * dot;
    const projY = y1 + uy * dot;
    const projZ = z1 + uz * dot;
    
    // T√≠nh kho·∫£ng c√°ch t·ª´ ƒëi·ªÉm ƒë·∫øn ƒëi·ªÉm chi·∫øu
    const distance = Math.sqrt((x-projX)*(x-projX) + (y-projY)*(y-projY) + (z-projZ)*(z-projZ));
    return distance;
  }
};

/**
 * T·∫°o m·ªôt ƒë∆°n h√†ng m·∫´u cho m·ª•c ƒë√≠ch demo
 * @param {string} orderId - M√£ ƒë∆°n h√†ng
 * @returns {Object} ƒê∆°n h√†ng m·∫´u
 */
export function generateMockOrder(orderId = null) {
  // Danh s√°ch s·∫£n ph·∫©m m·∫´u
  const sampleProducts = [
    {
      _id: '1',
      name: 'Th·ªãt b√≤ Wagyu A5',
      image: 'https://via.placeholder.com/200x200?text=Wagyu',
      unit: 'kg',
      price: 1200000
    },
    {
      _id: '2',
      name: 'Rau c·∫£i th√¨a h·ªØu c∆°',
      image: 'https://via.placeholder.com/200x200?text=Rau',
      unit: 'b√≥',
      price: 25000
    },
    {
      _id: '3',
      name: 'C√° h·ªìi Na Uy',
      image: 'https://via.placeholder.com/200x200?text=Ca',
      unit: 'kg',
      price: 350000
    },
    {
      _id: '4',
      name: 'N·∫•m h∆∞∆°ng r·ª´ng',
      image: 'https://via.placeholder.com/200x200?text=Nam',
      unit: 'h·ªôp',
      price: 85000
    },
    {
      _id: '5',
      name: 'Tr·ª©ng g√† t∆∞∆°i',
      image: 'https://via.placeholder.com/200x200?text=Trung',
      unit: 'v·ªâ',
      price: 45000
    }
  ];
  
  // Ng·∫´u nhi√™n ch·ªçn 1-3 s·∫£n ph·∫©m
  const numProducts = Math.floor(Math.random() * 3) + 1;
  const selectedProducts = [];
  
  // Kh√¥ng ch·ªçn l·∫∑p s·∫£n ph·∫©m
  const usedIndices = new Set();
  
  for (let i = 0; i < numProducts; i++) {
    let randomIndex;
    do {
      randomIndex = Math.floor(Math.random() * sampleProducts.length);
    } while (usedIndices.has(randomIndex));
    
    usedIndices.add(randomIndex);
    const product = sampleProducts[randomIndex];
    
    // T·∫°o item v·ªõi th√¥ng tin s·∫£n ph·∫©m
    selectedProducts.push({
      _id: `item_${i + 1}`,
      product: product,
      quantity: Math.floor(Math.random() * 3) + 1,
      price: product.price,
      discountAmount: Math.random() > 0.7 ? Math.floor(product.price * 0.1) : 0
    });
  }
  
  // T√≠nh t·ªïng ti·ªÅn
  let subtotal = 0;
  for (const item of selectedProducts) {
    subtotal += (item.price * item.quantity - item.discountAmount);
  }
  
  // Ph√≠ v·∫≠n chuy·ªÉn v√† thu·∫ø
  const shippingFee = Math.floor(Math.random() * 50000) + 20000;
  const tax = Math.floor(subtotal * 0.08);
  const discount = Math.random() > 0.5 ? Math.floor(subtotal * 0.05) : 0;
  
  // T·ªïng thanh to√°n
  const totalAmount = subtotal + shippingFee + tax - discount;
  
  // Ng√†y ƒë·∫∑t h√†ng
  const orderDate = new Date();
  orderDate.setDate(orderDate.getDate() - Math.floor(Math.random() * 5));
  
  // Ng√†y giao h√†ng d·ª± ki·∫øn
  const deliveryDate = new Date(orderDate);
  deliveryDate.setDate(deliveryDate.getDate() + Math.floor(Math.random() * 5) + 3);
  
  // ƒê·ªãa ch·ªâ trong khu v·ª±c mi·ªÅn T√¢y Nam B·ªô
  const addresses = [
    'Qu·∫≠n Ninh Ki·ªÅu, C·∫ßn Th∆°, Vi·ªát Nam',
    'Qu·∫≠n C√°i RƒÉng, C·∫ßn Th∆°, Vi·ªát Nam',
    'Qu·∫≠n B√¨nh Th·ªßy, C·∫ßn Th∆°, Vi·ªát Nam',
    'Qu·∫≠n √î M√¥n, C·∫ßn Th∆°, Vi·ªát Nam',
    'Huy·ªán K·∫ø S√°ch, S√≥c TrƒÉng, Vi·ªát Nam',
    'Th√†nh ph·ªë S√≥c TrƒÉng, S√≥c TrƒÉng, Vi·ªát Nam',
    'Th√†nh ph·ªë Long Xuy√™n, An Giang, Vi·ªát Nam',
    'Th√†nh ph·ªë Ch√¢u ƒê·ªëc, An Giang, Vi·ªát Nam',
    'Th√†nh ph·ªë R·∫°ch Gi√°, Ki√™n Giang, Vi·ªát Nam',
    'Th√†nh ph·ªë Vƒ©nh Long, Vƒ©nh Long, Vi·ªát Nam',
    'Th√†nh ph·ªë C√† Mau, C√† Mau, Vi·ªát Nam',
    'Th√†nh ph·ªë B·∫°c Li√™u, B·∫°c Li√™u, Vi·ªát Nam'
  ];
  
  const randomAddressIndex = Math.floor(Math.random() * addresses.length);
  
  // Ph∆∞∆°ng th·ª©c thanh to√°n
  const paymentMethods = ['cod', 'banking', 'momo', 'zalopay', 'vnpay'];
  const randomPaymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];
  
  // Tr·∫°ng th√°i ƒë∆°n h√†ng
  const orderStatuses = ['pending', 'confirmed', 'shipping', 'delivered', 'completed'];
  const randomStatus = orderStatuses[Math.floor(Math.random() * (orderStatuses.length - 1))]; // Lo·∫°i tr·ª´ tr·∫°ng th√°i canceled
  
  // T·ªça ƒë·ªô kh√°ch h√†ng d·ª±a tr√™n khu v·ª±c
  let customerLat, customerLng;
  const selectedAddress = addresses[randomAddressIndex];
  
  // G√°n t·ªça ƒë·ªô t∆∞∆°ng ƒë·ªëi ch√≠nh x√°c cho t·ª´ng khu v·ª±c
  if (selectedAddress.includes('C·∫ßn Th∆°')) {
    customerLat = 10.0339 + (Math.random() * 0.05 - 0.025);
    customerLng = 105.7855 + (Math.random() * 0.05 - 0.025);
  } else if (selectedAddress.includes('S√≥c TrƒÉng')) {
    customerLat = 9.6037 + (Math.random() * 0.05 - 0.025);
    customerLng = 105.9747 + (Math.random() * 0.05 - 0.025);
  } else if (selectedAddress.includes('An Giang')) {
    customerLat = 10.3866 + (Math.random() * 0.05 - 0.025);
    customerLng = 105.4352 + (Math.random() * 0.05 - 0.025);
  } else if (selectedAddress.includes('Ki√™n Giang')) {
    customerLat = 10.0222 + (Math.random() * 0.05 - 0.025);
    customerLng = 105.0914 + (Math.random() * 0.05 - 0.025);
  } else if (selectedAddress.includes('Vƒ©nh Long')) {
    customerLat = 10.2537 + (Math.random() * 0.05 - 0.025);
    customerLng = 105.9722 + (Math.random() * 0.05 - 0.025);
  } else if (selectedAddress.includes('C√† Mau')) {
    customerLat = 9.1769 + (Math.random() * 0.05 - 0.025);
    customerLng = 105.1526 + (Math.random() * 0.05 - 0.025);
  } else if (selectedAddress.includes('B·∫°c Li√™u')) {
    customerLat = 9.2941 + (Math.random() * 0.05 - 0.025);
    customerLng = 105.7216 + (Math.random() * 0.05 - 0.025);
        } else {
    // M·∫∑c ƒë·ªãnh s·∫Ω l√† m·ªôt v·ªã tr√≠ ng·∫´u nhi√™n trong khu v·ª±c C·∫ßn Th∆°
    customerLat = 10.0339 + (Math.random() * 0.1 - 0.05);
    customerLng = 105.7855 + (Math.random() * 0.1 - 0.05);
  }
  
  return {
    _id: orderId || `ORDER${Math.floor(Math.random() * 900000) + 100000}`,
    items: selectedProducts,
    shippingAddress: selectedAddress,
    paymentMethod: randomPaymentMethod,
    shippingFee: shippingFee,
    tax: tax,
    discount: discount,
    subtotal: subtotal,
    totalAmount: totalAmount,
    status: randomStatus,
    createdAt: orderDate.toISOString(),
    estimatedDelivery: deliveryDate.toISOString(),
    customerLocation: {
      lat: customerLat,
      lng: customerLng,
      address: selectedAddress
    },
    // Th√™m chi nh√°nh x·ª≠ l√Ω ƒë∆°n h√†ng
    branch: selectedAddress.includes('S√≥c TrƒÉng') ? 'soctrang' : 'cantho'
  };
}

/**
 * Format date th√†nh chu·ªói ng√†y th√°ng ti·∫øng Vi·ªát
 * @param {string|Date} date - Ng√†y c·∫ßn format
 * @returns {string} Chu·ªói ng√†y th√°ng ƒë√£ ƒë∆∞·ª£c format
 */
export const formatDate = (date) => {
  if (!date) return '';
  
  const d = new Date(date);
  return d.toLocaleDateString('vi-VN', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

/**
 * Format s·ªë ti·ªÅn th√†nh ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá VND
 * @param {number} amount - S·ªë ti·ªÅn c·∫ßn format
 * @returns {string} Chu·ªói ti·ªÅn t·ªá ƒë√£ ƒë∆∞·ª£c format
 */
export const formatCurrency = (amount) => {
  if (amount === undefined || amount === null) return '';
  
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
    maximumFractionDigits: 0
  }).format(amount);
};
